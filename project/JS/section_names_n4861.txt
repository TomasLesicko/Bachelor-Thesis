1: intro.scope - Scope
2: intro.refs - Normative references
3: intro.defs - Terms and definitions
4: intro - General principles
4.1: intro.compliance - Implementation compliance
4.1.1: intro.abstract - Abstract machine
4.2: intro.structure - Structure of this document
4.3: syntax - Syntax notation
4.4: intro.ack - Acknowledgments
5: lex - Lexical conventions
5.1: lex.separate - Separate translation
5.2: lex.phases - Phases of translation
5.3: lex.charset - Character sets
5.4: lex.pptoken - Preprocessing tokens
5.5: lex.digraph - Alternative tokens
5.6: lex.token - Tokens
5.7: lex.comment - Comments
5.8: lex.header - Header names
5.9: lex.ppnumber - Preprocessing numbers
5.10: lex.name - Identifiers
5.11: lex.key - Keywords
5.12: lex.operators - Operators and punctuators
5.13: lex.literal - Literals
5.13.1: lex.literal.kinds - Kinds of literals
5.13.2: lex.icon - Integer literals
5.13.3: lex.ccon - Character literals
5.13.4: lex.fcon - Floating-point literals
5.13.5: lex.string - String literals
5.13.6: lex.bool - Boolean literals
5.13.7: lex.nullptr - Pointer literals
5.13.8: lex.ext - User-defined literals
6: basic - Basics
6.1: basic.pre - Preamble
6.2: basic.def - Declarations and definitions
6.3: basic.def.odr - One-definition rule
6.4: basic.scope - Scope
6.4.1: basic.scope.declarative - Declarative regions and scopes
6.4.2: basic.scope.pdecl - Point of declaration
6.4.3: basic.scope.block - Block scope
6.4.4: basic.scope.param - Function parameter scope
6.4.5: basic.funscope - Function scope
6.4.6: basic.scope.namespace - Namespace scope
6.4.7: basic.scope.class - Class scope
6.4.8: basic.scope.enum - Enumeration scope
6.4.9: basic.scope.temp - Template parameter scope
6.4.10: basic.scope.hiding - Name hiding
6.5: basic.lookup - Name lookup
6.5.1: basic.lookup.unqual - Unqualified name lookup
6.5.2: basic.lookup.argdep - Argument-dependent name lookup
6.5.3: basic.lookup.qual - Qualified name lookup
6.5.3.1: class.qual - Class members
6.5.3.2: namespace.qual - Namespace members
6.5.4: basic.lookup.elab - Elaborated type specifiers
6.5.5: basic.lookup.classref - Class member access
6.5.6: basic.lookup.udir - Using-directives and namespace aliases
6.6: basic.link - Program and linkage
6.7: basic.memobj - Memory and objects
6.7.1: intro.memory - Memory model
6.7.2: intro.object - Object model
6.7.3: basic.life - Lifetime
6.7.4: basic.indet - Indeterminate values
6.7.5: basic.stc - Storage duration
6.7.5.1: basic.stc.static - Static storage duration
6.7.5.2: basic.stc.thread - Thread storage duration
6.7.5.3: basic.stc.auto - Automatic storage duration
6.7.5.4: basic.stc.dynamic - Dynamic storage duration
6.7.5.4.1: basic.stc.dynamic.allocation - Allocation functions
6.7.5.4.2: basic.stc.dynamic.deallocation - Deallocation functions
6.7.5.4.3: basic.stc.dynamic.safety - Safely-derived pointers
6.7.5.5: basic.stc.inherit - Duration of subobjects
6.7.6: basic.align - Alignment
6.7.7: class.temporary - Temporary objects
6.8: basic.types - Types
6.8.1: basic.fundamental - Fundamental types
6.8.2: basic.compound - Compound types
6.8.3: basic.type.qualifier - CV-qualifiers
6.8.4: conv.rank - Integer conversion rank
6.9: basic.exec - Program execution
6.9.1: intro.execution - Sequential execution
6.9.2: intro.multithread - Multi-threaded executions and data races
6.9.2.1: intro.races - Data races
6.9.2.2: intro.progress - Forward progress
6.9.3: basic.start - Start and termination
6.9.3.1: basic.start.main - \tcode{main} function
6.9.3.2: basic.start.static - Static initialization
6.9.3.3: basic.start.dynamic - Dynamic initialization of non-local variables
6.9.3.4: basic.start.term - Termination
7: expr - Expressions
7.1: expr.pre - Preamble
7.2: expr.prop - Properties of expressions
7.2.1: basic.lval - Value category
7.2.2: expr.type - Type
7.2.3: expr.context - Context dependence
7.3: conv - Standard conversions
7.3.1: conv.lval - Lvalue-to-rvalue conversion
7.3.2: conv.array - Array-to-pointer conversion
7.3.3: conv.func - Function-to-pointer conversion
7.3.4: conv.rval - Temporary materialization conversion
7.3.5: conv.qual - Qualification conversions
7.3.6: conv.prom - Integral promotions
7.3.7: conv.fpprom - Floating-point promotion
7.3.8: conv.integral - Integral conversions
7.3.9: conv.double - Floating-point conversions
7.3.10: conv.fpint - Floating-integral conversions
7.3.11: conv.ptr - Pointer conversions
7.3.12: conv.mem - Pointer-to-member conversions
7.3.13: conv.fctptr - Function pointer conversions
7.3.14: conv.bool - Boolean conversions
7.4: expr.arith.conv - Usual arithmetic conversions
7.5: expr.prim - Primary expressions
7.5.1: expr.prim.literal - Literals
7.5.2: expr.prim.this - This
7.5.3: expr.prim.paren - Parentheses
7.5.4: expr.prim.id - Names
7.5.4.1: expr.prim.id.unqual - Unqualified names
7.5.4.2: expr.prim.id.qual - Qualified names
7.5.4.3: expr.prim.id.dtor - Destruction
7.5.5: expr.prim.lambda - Lambda expressions
7.5.5.1: expr.prim.lambda.closure - Closure types
7.5.5.2: expr.prim.lambda.capture - Captures
7.5.6: expr.prim.fold - Fold expressions
7.5.7: expr.prim.req - Requires expressions
7.5.7.1: expr.prim.req.simple - Simple requirements
7.5.7.2: expr.prim.req.type - Type requirements
7.5.7.3: expr.prim.req.compound - Compound requirements
7.5.7.4: expr.prim.req.nested - Nested requirements
7.6: expr.compound - Compound expressions
7.6.1: expr.post - Postfix expressions
7.6.1.1: expr.sub - Subscripting
7.6.1.2: expr.call - Function call
7.6.1.3: expr.type.conv - Explicit type conversion (functional notation)
7.6.1.4: expr.ref - Class member access
7.6.1.5: expr.post.incr - Increment and decrement
7.6.1.6: expr.dynamic.cast - Dynamic cast
7.6.1.7: expr.typeid - Type identification
7.6.1.8: expr.static.cast - Static cast
7.6.1.9: expr.reinterpret.cast - Reinterpret cast
7.6.1.10: expr.const.cast - Const cast
7.6.2: expr.unary - Unary expressions
7.6.2.1: expr.unary.op - Unary operators
7.6.2.2: expr.pre.incr - Increment and decrement
7.6.2.3: expr.await - Await
7.6.2.4: expr.sizeof - Sizeof
7.6.2.5: expr.alignof - Alignof
7.6.2.6: expr.unary.noexcept - \tcode{noexcept} operator
7.6.2.7: expr.new - New
7.6.2.8: expr.delete - Delete
7.6.3: expr.cast - Explicit type conversion (cast notation)
7.6.4: expr.mptr.oper - Pointer-to-member operators
7.6.5: expr.mul - Multiplicative operators
7.6.6: expr.add - Additive operators
7.6.7: expr.shift - Shift operators
7.6.8: expr.spaceship - Three-way comparison operator
7.6.9: expr.rel - Relational operators
7.6.10: expr.eq - Equality operators
7.6.11: expr.bit.and - Bitwise AND operator
7.6.12: expr.xor - Bitwise exclusive OR operator
7.6.13: expr.or - Bitwise inclusive OR operator
7.6.14: expr.log.and - Logical AND operator
7.6.15: expr.log.or - Logical OR operator
7.6.16: expr.cond - Conditional operator
7.6.17: expr.yield - Yielding a value
7.6.18: expr.throw - Throwing an exception
7.6.19: expr.ass - Assignment and compound assignment operators
7.6.20: expr.comma - Comma operator
7.7: expr.const - Constant expressions
8: stmt.stmt - Statements
8.1: stmt.pre - Preamble
8.2: stmt.label - Labeled statement
8.3: stmt.expr - Expression statement
8.4: stmt.block - Compound statement or block
8.5: stmt.select - Selection statements
8.5.1: stmt.if - The \tcode{if} statement
8.5.2: stmt.switch - The \tcode{switch} statement
8.6: stmt.iter - Iteration statements
8.6.1: stmt.while - The \tcode{while} statement
8.6.2: stmt.do - The \tcode{do} statement
8.6.3: stmt.for - The \tcode{for} statement
8.6.4: stmt.ranged - The range-based \tcode{for} statement
8.7: stmt.jump - Jump statements
8.7.1: stmt.break - The \tcode{break} statement
8.7.2: stmt.cont - The \tcode{continue} statement
8.7.3: stmt.return - The \tcode{return} statement
8.7.4: stmt.return.coroutine - The \tcode{co_return} statement
8.7.5: stmt.goto - The \tcode{goto} statement
8.8: stmt.dcl - Declaration statement
8.9: stmt.ambig - Ambiguity resolution
9: dcl.dcl - Declarations
9.1: dcl.pre - Preamble
9.2: dcl.spec - Specifiers
9.2.1: dcl.stc - Storage class specifiers
9.2.2: dcl.fct.spec - Function specifiers
9.2.3: dcl.typedef - The \tcode{typedef} specifier
9.2.4: dcl.friend - The \tcode{friend} specifier
9.2.5: dcl.constexpr - The \tcode{constexpr} and \tcode{consteval} specifiers
9.2.6: dcl.constinit - The \tcode{constinit} specifier
9.2.7: dcl.inline - The \tcode{inline} specifier
9.2.8: dcl.type - Type specifiers
9.2.8.1: dcl.type.cv - The \fakegrammarterm{cv-qualifier}{s}
9.2.8.2: dcl.type.simple - Simple type specifiers
9.2.8.3: dcl.type.elab - Elaborated type specifiers
9.2.8.4: dcl.type.decltype - Decltype specifiers
9.2.8.5: dcl.spec.auto - Placeholder type specifiers
9.2.8.5.1: dcl.type.auto.deduct - Placeholder type deduction
9.2.8.6: dcl.type.class.deduct - Deduced class template specialization types
9.3: dcl.decl - Declarators
9.3.1: dcl.name - Type names
9.3.2: dcl.ambig.res - Ambiguity resolution
9.3.3: dcl.meaning - Meaning of declarators
9.3.3.1: dcl.ptr - Pointers
9.3.3.2: dcl.ref - References
9.3.3.3: dcl.mptr - Pointers to members
9.3.3.4: dcl.array - Arrays
9.3.3.5: dcl.fct - Functions
9.3.3.6: dcl.fct.default - Default arguments
9.4: dcl.init - Initializers
9.4.1: dcl.init.aggr - Aggregates
9.4.2: dcl.init.string - Character arrays
9.4.3: dcl.init.ref - References
9.4.4: dcl.init.list - List-initialization
9.5: dcl.fct.def - Function definitions
9.5.1: dcl.fct.def.general - In general
9.5.2: dcl.fct.def.default - Explicitly-defaulted functions
9.5.3: dcl.fct.def.delete - Deleted definitions
9.5.4: dcl.fct.def.coroutine - Coroutine definitions
9.6: dcl.struct.bind - Structured binding declarations
9.7: enum - Enumerations
9.7.1: dcl.enum - Enumeration declarations
9.7.2: enum.udecl - The \tcode{using enum} declaration
9.8: basic.namespace - Namespaces
9.8.1: namespace.def - Namespace definition
9.8.1.1: namespace.unnamed - Unnamed namespaces
9.8.1.2: namespace.memdef - Namespace member definitions
9.8.2: namespace.alias - Namespace alias
9.8.3: namespace.udir - Using namespace directive
9.9: namespace.udecl - The \tcode{using} declaration
9.10: dcl.asm - The \tcode{asm} declaration
9.11: dcl.link - Linkage specifications
9.12: dcl.attr - Attributes
9.12.1: dcl.attr.grammar - Attribute syntax and semantics
9.12.2: dcl.align - Alignment specifier
9.12.3: dcl.attr.depend - Carries dependency attribute
9.12.4: dcl.attr.deprecated - Deprecated attribute
9.12.5: dcl.attr.fallthrough - Fallthrough attribute
9.12.6: dcl.attr.likelihood - Likelihood attributes
9.12.7: dcl.attr.unused - Maybe unused attribute
9.12.8: dcl.attr.nodiscard - Nodiscard attribute
9.12.9: dcl.attr.noreturn - Noreturn attribute
9.12.10: dcl.attr.nouniqueaddr - No unique address attribute
10: module - Modules
10.1: module.unit - Module units and purviews
10.2: module.interface - Export declaration
10.3: module.import - Import declaration
10.4: module.global.frag - Global module fragment
10.5: module.private.frag - Private module fragment
10.6: module.context - Instantiation context
10.7: module.reach - Reachability
11: class - Classes
11.1: class.pre - Preamble
11.2: class.prop - Properties of classes
11.3: class.name - Class names
11.4: class.mem - Class members
11.4.1: class.mfct - Member functions
11.4.2: class.mfct.non-static - Non-static member functions
11.4.2.1: class.this - The \tcode{this} pointer
11.4.3: special - Special member functions
11.4.4: class.ctor - Constructors
11.4.4.1: class.default.ctor - Default constructors
11.4.4.2: class.copy.ctor - Copy/move constructors
11.4.5: class.copy.assign - Copy/move assignment operator
11.4.6: class.dtor - Destructors
11.4.7: class.conv - Conversions
11.4.7.1: class.conv.ctor - Conversion by constructor
11.4.7.2: class.conv.fct - Conversion functions
11.4.8: class.static - Static members
11.4.8.1: class.static.mfct - Static member functions
11.4.8.2: class.static.data - Static data members
11.4.9: class.bit - Bit-fields
11.4.10: class.nest - Nested class declarations
11.4.11: class.nested.type - Nested type names
11.5: class.union - Unions
11.5.1: class.union.anon - Anonymous unions
11.6: class.local - Local class declarations
11.7: class.derived - Derived classes
11.7.1: class.mi - Multiple base classes
11.7.2: class.virtual - Virtual functions
11.7.3: class.abstract - Abstract classes
11.8: class.member.lookup - Member name lookup
11.9: class.access - Member access control
11.9.1: class.access.spec - Access specifiers
11.9.2: class.access.base - Accessibility of base classes and base class members
11.9.3: class.friend - Friends
11.9.4: class.protected - Protected member access
11.9.5: class.access.virt - Access to virtual functions
11.9.6: class.paths - Multiple access
11.9.7: class.access.nest - Nested classes
11.10: class.init - Initialization
11.10.1: class.expl.init - Explicit initialization
11.10.2: class.base.init - Initializing bases and members
11.10.3: class.inhctor.init - Initialization by inherited constructor
11.10.4: class.cdtor - Construction and destruction
11.10.5: class.copy.elision - Copy/move elision
11.11: class.compare - Comparisons
11.11.1: class.compare.default - Defaulted comparison operator functions
11.11.2: class.eq - Equality operator
11.11.3: class.spaceship - Three-way comparison
11.11.4: class.compare.secondary - Secondary comparison operators
11.12: class.free - Free store
12: over - Overloading
12.1: over.pre - Preamble
12.2: over.load - Overloadable declarations
12.3: over.dcl - Declaration matching
12.4: over.match - Overload resolution
12.4.1: over.match.funcs - Candidate functions and argument lists
12.4.1.1: over.match.call - Function call syntax
12.4.1.1.1: over.call.func - Call to named function
12.4.1.1.2: over.call.object - Call to object of class type
12.4.1.2: over.match.oper - Operators in expressions
12.4.1.3: over.match.ctor - Initialization by constructor
12.4.1.4: over.match.copy - Copy-initialization of class by user-defined conversion
12.4.1.5: over.match.conv - Initialization by conversion function
12.4.1.6: over.match.ref - Initialization by conversion function for direct reference binding
12.4.1.7: over.match.list - Initialization by list-initialization
12.4.1.8: over.match.class.deduct - Class template argument deduction
12.4.2: over.match.viable - Viable functions
12.4.3: over.match.best - Best viable function
12.4.3.1: over.best.ics - Implicit conversion sequences
12.4.3.1.1: over.ics.scs - Standard conversion sequences
12.4.3.1.2: over.ics.user - User-defined conversion sequences
12.4.3.1.3: over.ics.ellipsis - Ellipsis conversion sequences
12.4.3.1.4: over.ics.ref - Reference binding
12.4.3.1.5: over.ics.list - List-initialization sequence
12.4.3.2: over.ics.rank - Ranking implicit conversion sequences
12.5: over.over - Address of overloaded function
12.6: over.oper - Overloaded operators
12.6.1: over.unary - Unary operators
12.6.2: over.binary - Binary operators
12.6.2.1: over.ass - Simple assignment
12.6.3: over.call - Function call
12.6.4: over.sub - Subscripting
12.6.5: over.ref - Class member access
12.6.6: over.inc - Increment and decrement
12.7: over.built - Built-in operators
12.8: over.literal - User-defined literals
13: temp - Templates
13.1: temp.pre - Preamble
13.2: temp.param - Template parameters
13.3: temp.names - Names of template specializations
13.4: temp.arg - Template arguments
13.4.1: temp.arg.type - Template type arguments
13.4.2: temp.arg.nontype - Template non-type arguments
13.4.3: temp.arg.template - Template template arguments
13.5: temp.constr - Template constraints
13.5.1: temp.constr.constr - Constraints
13.5.1.1: temp.constr.op - Logical operations
13.5.1.2: temp.constr.atomic - Atomic constraints
13.5.2: temp.constr.decl - Constrained declarations
13.5.3: temp.constr.normal - Constraint normalization
13.5.4: temp.constr.order - Partial ordering by constraints
13.6: temp.type - Type equivalence
13.7: temp.decls - Template declarations
13.7.1: temp.class - Class templates
13.7.1.1: temp.mem.func - Member functions of class templates
13.7.1.2: temp.deduct.guide - Deduction guides
13.7.1.3: temp.mem.class - Member classes of class templates
13.7.1.4: temp.static - Static data members of class templates
13.7.1.5: temp.mem.enum - Enumeration members of class templates
13.7.2: temp.mem - Member templates
13.7.3: temp.variadic - Variadic templates
13.7.4: temp.friend - Friends
13.7.5: temp.class.spec - Class template partial specializations
13.7.5.1: temp.class.spec.match - Matching of class template partial specializations
13.7.5.2: temp.class.order - Partial ordering of class template specializations
13.7.5.3: temp.class.spec.mfunc - Members of class template specializations
13.7.6: temp.fct - Function templates
13.7.6.1: temp.over.link - Function template overloading
13.7.6.2: temp.func.order - Partial ordering of function templates
13.7.7: temp.alias - Alias templates
13.7.8: temp.concept - Concept definitions
13.8: temp.res - Name resolution
13.8.1: temp.local - Locally declared names
13.8.2: temp.dep - Dependent names
13.8.2.1: temp.dep.type - Dependent types
13.8.2.2: temp.dep.expr - Type-dependent expressions
13.8.2.3: temp.dep.constexpr - Value-dependent expressions
13.8.2.4: temp.dep.temp - Dependent template arguments
13.8.3: temp.nondep - Non-dependent names
13.8.4: temp.dep.res - Dependent name resolution
13.8.4.1: temp.point - Point of instantiation
13.8.4.2: temp.dep.candidate - Candidate functions
13.8.5: temp.inject - Friend names declared within a class template
13.9: temp.spec - Template instantiation and specialization
13.9.1: temp.inst - Implicit instantiation
13.9.2: temp.explicit - Explicit instantiation
13.9.3: temp.expl.spec - Explicit specialization
13.10: temp.fct.spec - Function template specializations
13.10.1: temp.arg.explicit - Explicit template argument specification
13.10.2: temp.deduct - Template argument deduction
13.10.2.1: temp.deduct.call - Deducing template arguments from a function call
13.10.2.2: temp.deduct.funcaddr - Deducing template arguments taking the address of a function template
13.10.2.3: temp.deduct.conv - Deducing conversion function template arguments
13.10.2.4: temp.deduct.partial - Deducing template arguments during partial ordering
13.10.2.5: temp.deduct.type - Deducing template arguments from a type
13.10.2.6: temp.deduct.decl - Deducing template arguments from a function declaration
13.10.3: temp.over - Overload resolution
14: except - Exception handling
14.1: except.pre - Preamble
14.2: except.throw - Throwing an exception
14.3: except.ctor - Constructors and destructors
14.4: except.handle - Handling an exception
14.5: except.spec - Exception specifications
14.6: except.special - Special functions
14.6.1: except.terminate - The \tcode{std::terminate} function
14.6.2: except.uncaught - The \tcode{std::uncaught_exceptions()} function
15: cpp - Preprocessing directives
15.1: cpp.pre - Preamble
15.2: cpp.cond - Conditional inclusion
15.3: cpp.include - Source file inclusion
15.4: cpp.module - Module directive
15.5: cpp.import - Header unit importation
15.6: cpp.replace - Macro replacement
15.6.1: cpp.subst - Argument substitution
15.6.2: cpp.stringize - The \tcode{\#} operator
15.6.3: cpp.concat - The \tcode{\#\#} operator
15.6.4: cpp.rescan - Rescanning and further replacement
15.6.5: cpp.scope - Scope of macro definitions
15.7: cpp.line - Line control
15.8: cpp.error - Error directive
15.9: cpp.pragma - Pragma directive
15.10: cpp.null - Null directive
15.11: cpp.predefined - Predefined macro names
15.12: cpp.pragma.op - Pragma operator
16: library - Library introduction
16.1: library.general - General
16.2: library.c - The C standard library
16.3: definitions - Definitions
16.4: description - Method of description
16.4.1: structure - Structure of each clause
16.4.1.1: structure.elements - Elements
16.4.1.2: structure.summary - Summary
16.4.1.3: structure.requirements - Requirements
16.4.1.4: structure.specifications - Detailed specifications
16.4.1.5: structure.see.also - C library
16.4.2: conventions - Other conventions
16.4.2.1: expos.only.func - Exposition-only functions
16.4.2.2: type.descriptions - Type descriptions
16.4.2.2.1: type.descriptions.general - General
16.4.2.2.2: expos.only.types - Exposition-only types
16.4.2.2.3: enumerated.types - Enumerated types
16.4.2.2.4: bitmask.types - Bitmask types
16.4.2.2.5: character.seq - Character sequences
16.4.2.2.5.1: byte.strings - Byte strings
16.4.2.2.5.2: multibyte.strings - Multibyte strings
16.4.2.2.6: customization.point.object - Customization Point Object types
16.4.2.3: functions.within.classes - Functions within classes
16.4.2.4: objects.within.classes - Private members
16.5: requirements - Library-wide requirements
16.5.1: organization - Library contents and organization
16.5.1.1: contents - Library contents
16.5.1.2: headers - Headers
16.5.1.3: compliance - Freestanding implementations
16.5.2: using - Using the library
16.5.2.1: using.overview - Overview
16.5.2.2: using.headers - Headers
16.5.2.3: using.linkage - Linkage
16.5.3: utility.requirements - Requirements on types and expressions
16.5.3.1: utility.arg.requirements - Template argument requirements
16.5.3.2: swappable.requirements - Swappable requirements
16.5.3.3: nullablepointer.requirements - \oldconcept{NullablePointer} requirements
16.5.3.4: hash.requirements - \oldconcept{Hash} requirements
16.5.3.5: allocator.requirements - \oldconcept{Allocator} requirements
16.5.3.5.1: allocator.requirements.completeness - Allocator completeness requirements
16.5.4: constraints - Constraints on programs
16.5.4.1: constraints.overview - Overview
16.5.4.2: namespace.constraints - Namespace use
16.5.4.2.1: namespace.std - Namespace \tcode{std}
16.5.4.2.2: namespace.posix - Namespace \tcode{posix}
16.5.4.2.3: namespace.future - Namespaces for future standardization
16.5.4.3: reserved.names - Reserved names
16.5.4.3.1: zombie.names - Zombie names
16.5.4.3.2: macro.names - Macro names
16.5.4.3.3: extern.names - External linkage
16.5.4.3.4: extern.types - Types
16.5.4.3.5: usrlit.suffix - User-defined literal suffixes
16.5.4.4: alt.headers - Headers
16.5.4.5: derived.classes - Derived classes
16.5.4.6: replacement.functions - Replacement functions
16.5.4.7: handler.functions - Handler functions
16.5.4.8: res.on.functions - Other functions
16.5.4.9: res.on.arguments - Function arguments
16.5.4.10: res.on.objects - Library object access
16.5.4.11: res.on.expects - Expects paragraph
16.5.4.12: res.on.requirements - Semantic requirements
16.5.5: conforming - Conforming implementations
16.5.5.1: conforming.overview - Overview
16.5.5.2: res.on.headers - Headers
16.5.5.3: res.on.macro.definitions - Restrictions on macro definitions
16.5.5.4: global.functions - Non-member functions
16.5.5.5: member.functions - Member functions
16.5.5.6: hidden.friends - Friend functions
16.5.5.7: constexpr.functions - Constexpr functions and constructors
16.5.5.8: algorithm.stable - Requirements for stable algorithms
16.5.5.9: reentrancy - Reentrancy
16.5.5.10: res.on.data.races - Data race avoidance
16.5.5.11: protection.within.classes - Protection within classes
16.5.5.12: derivation - Derived classes
16.5.5.13: res.on.exception.handling - Restrictions on exception handling
16.5.5.14: res.on.pointer.storage - Restrictions on storage of pointers
16.5.5.15: value.error.codes - Value of error codes
16.5.5.16: lib.types.movedfrom - Moved-from state of library types
17: support - Language support library
17.1: support.general - General
17.2: support.types - Common definitions
17.2.1: cstddef.syn - Header \tcode{<cstddef>} synopsis
17.2.2: cstdlib.syn - Header \tcode{<cstdlib>} synopsis
17.2.3: support.types.nullptr - Null pointers
17.2.4: support.types.layout - Sizes, alignments, and offsets
17.2.5: support.types.byteops - \tcode{byte} type operations
17.3: support.limits - Implementation properties
17.3.1: support.limits.general - General
17.3.2: version.syn - Header \tcode{<version>} synopsis
17.3.3: limits.syn - Header \tcode{<limits>} synopsis
17.3.4: fp.style - Floating-point type properties
17.3.4.1: round.style - Type \tcode{float_round_style}
17.3.4.2: denorm.style - Type \tcode{float_denorm_style}
17.3.5: numeric.limits - Class template \tcode{numeric_limits}
17.3.5.1: numeric.limits.members - \tcode{numeric_limits} members
17.3.5.2: numeric.special - \tcode{numeric_limits} specializations
17.3.6: climits.syn - Header \tcode{<climits>} synopsis
17.3.7: cfloat.syn - Header \tcode{<cfloat>} synopsis
17.4: cstdint - Integer types
17.4.1: cstdint.syn - Header \tcode{<cstdint>} synopsis
17.5: support.start.term - Startup and termination
17.6: support.dynamic - Dynamic memory management
17.6.1: new.syn - Header \tcode{<new>} synopsis
17.6.2: new.delete - Storage allocation and deallocation
17.6.2.1: new.delete.single - Single-object forms
17.6.2.2: new.delete.array - Array forms
17.6.2.3: new.delete.placement - Non-allocating forms
17.6.2.4: new.delete.dataraces - Data races
17.6.3: alloc.errors - Storage allocation errors
17.6.3.1: bad.alloc - Class \tcode{bad_alloc}
17.6.3.2: new.badlength - Class \tcode{bad_array_new_length}
17.6.3.3: new.handler - Type \tcode{new_handler}
17.6.3.4: set.new.handler - \tcode{set_new_handler}
17.6.3.5: get.new.handler - \tcode{get_new_handler}
17.6.4: ptr.launder - Pointer optimization barrier
17.6.5: hardware.interference - Hardware interference size
17.7: support.rtti - Type identification
17.7.1: typeinfo.syn - Header \tcode{<typeinfo>} synopsis
17.7.2: type.info - Class \tcode{type_info}
17.7.3: bad.cast - Class \tcode{bad_cast}
17.7.4: bad.typeid - Class \tcode{bad_typeid}
17.8: support.srcloc - Source location
17.8.1: source.location.syn - Header \tcode{<source_location>} synopsis
17.8.2: support.srcloc.class - Class \tcode{source_location}
17.8.2.1: support.srcloc.cons - Creation
17.8.2.2: support.srcloc.obs - Observers
17.9: support.exception - Exception handling
17.9.1: exception.syn - Header \tcode{<exception>} synopsis
17.9.2: exception - Class \tcode{exception}
17.9.3: bad.exception - Class \tcode{bad_exception}
17.9.4: exception.terminate - Abnormal termination
17.9.4.1: terminate.handler - Type \tcode{terminate_handler}
17.9.4.2: set.terminate - \tcode{set_terminate}
17.9.4.3: get.terminate - \tcode{get_terminate}
17.9.4.4: terminate - \tcode{terminate}
17.9.5: uncaught.exceptions - \tcode{uncaught_exceptions}
17.9.6: propagation - Exception propagation
17.9.7: except.nested - \tcode{nested_exception}
17.10: support.initlist - Initializer lists
17.10.1: initializer.list.syn - Header \tcode{<initializer_list>} synopsis
17.10.2: support.initlist.cons - Initializer list constructors
17.10.3: support.initlist.access - Initializer list access
17.10.4: support.initlist.range - Initializer list range access
17.11: cmp - Comparisons
17.11.1: compare.syn - Header \tcode{<compare>} synopsis
17.11.2: cmp.categories - Comparison category types
17.11.2.1: cmp.categories.pre - Preamble
17.11.2.2: cmp.partialord - Class \tcode{partial_ordering}
17.11.2.3: cmp.weakord - Class \tcode{weak_ordering}
17.11.2.4: cmp.strongord - Class \tcode{strong_ordering}
17.11.3: cmp.common - Class template \tcode{common_comparison_category}
17.11.4: cmp.concept - Concept \tcode{three_way_comparable}
17.11.5: cmp.result - Result of three-way comparison
17.11.6: cmp.alg - Comparison algorithms
17.12: support.coroutine - Coroutines
17.12.1: coroutine.syn - Header \tcode{<coroutine>} synopsis
17.12.2: coroutine.traits - Coroutine traits
17.12.2.1: coroutine.traits.primary - Class template \tcode{coroutine_traits}
17.12.3: coroutine.handle - Class template \tcode{coroutine_handle}
17.12.3.1: coroutine.handle.con - Construct/reset
17.12.3.2: coroutine.handle.export.import - Export/import
17.12.3.3: coroutine.handle.observers - Observers
17.12.3.4: coroutine.handle.resumption - Resumption
17.12.3.5: coroutine.handle.promise - Promise access
17.12.3.6: coroutine.handle.compare - Comparison operators
17.12.3.7: coroutine.handle.hash - Hash support
17.12.4: coroutine.noop - No-op coroutines
17.12.4.1: coroutine.promise.noop - Class \tcode{noop_coroutine_promise}
17.12.4.2: coroutine.handle.noop - Class \tcode{coroutine_handle<noop_coroutine_promise>}
17.12.4.2.1: coroutine.handle.noop.observers - Observers
17.12.4.2.2: coroutine.handle.noop.resumption - Resumption
17.12.4.2.3: coroutine.handle.noop.promise - Promise access
17.12.4.2.4: coroutine.handle.noop.address - Address
17.12.4.3: coroutine.noop.coroutine - Function \tcode{noop_coroutine}
17.12.5: coroutine.trivial.awaitables - Trivial awaitables
17.13: support.runtime - Other runtime support
17.13.1: cstdarg.syn - Header \tcode{<cstdarg>} synopsis
17.13.2: csetjmp.syn - Header \tcode{<csetjmp>} synopsis
17.13.3: csignal.syn - Header \tcode{<csignal>} synopsis
17.13.4: support.signal - Signal handlers
18: concepts - Concepts library
18.1: concepts.general - General
18.2: concepts.equality - Equality preservation
18.3: concepts.syn - Header \tcode{<concepts>} synopsis
18.4: concepts.lang - Language-related concepts
18.4.1: concepts.lang.general - General
18.4.2: concept.same - Concept \cname{same_as}
18.4.3: concept.derived - Concept \cname{derived_from}
18.4.4: concept.convertible - Concept \cname{convertible_to}
18.4.5: concept.commonref - Concept \cname{common_reference_with}
18.4.6: concept.common - Concept \cname{common_with}
18.4.7: concepts.arithmetic - Arithmetic concepts
18.4.8: concept.assignable - Concept \cname{assignable_from}
18.4.9: concept.swappable - Concept \cname{swappable}
18.4.10: concept.destructible - Concept \cname{destructible}
18.4.11: concept.constructible - Concept \cname{constructible_from}
18.4.12: concept.default.init - Concept \cname{default_initializable}
18.4.13: concept.moveconstructible - Concept \cname{move_constructible}
18.4.14: concept.copyconstructible - Concept \cname{copy_constructible}
18.5: concepts.compare - Comparison concepts
18.5.1: concepts.compare.general - General
18.5.2: concept.booleantestable - Boolean testability
18.5.3: concept.equalitycomparable - Concept \cname{equality_comparable}
18.5.4: concept.totallyordered - Concept \cname{totally_ordered}
18.6: concepts.object - Object concepts
18.7: concepts.callable - Callable concepts
18.7.1: concepts.callable.general - General
18.7.2: concept.invocable - Concept \cname{invocable}
18.7.3: concept.regularinvocable - Concept \cname{regular_invocable}
18.7.4: concept.predicate - Concept \cname{predicate}
18.7.5: concept.relation - Concept \cname{relation}
18.7.6: concept.equiv - Concept \cname{equivalence_relation}
18.7.7: concept.strictweakorder - Concept \cname{strict_weak_order}
19: diagnostics - Diagnostics library
19.1: diagnostics.general - General
19.2: std.exceptions - Exception classes
19.2.1: stdexcept.syn - Header \tcode{<stdexcept>} synopsis
19.2.2: logic.error - Class \tcode{logic_error}
19.2.3: domain.error - Class \tcode{domain_error}
19.2.4: invalid.argument - Class \tcode{invalid_argument}
19.2.5: length.error - Class \tcode{length_error}
19.2.6: out.of.range - Class \tcode{out_of_range}
19.2.7: runtime.error - Class \tcode{runtime_error}
19.2.8: range.error - Class \tcode{range_error}
19.2.9: overflow.error - Class \tcode{overflow_error}
19.2.10: underflow.error - Class \tcode{underflow_error}
19.3: assertions - Assertions
19.3.1: cassert.syn - Header \tcode{<cassert>} synopsis
19.3.2: assertions.assert - The \tcode{assert} macro
19.4: errno - Error numbers
19.4.1: cerrno.syn - Header \tcode{<cerrno>} synopsis
19.5: syserr - System error support
19.5.1: system.error.syn - Header \tcode{<system_error>} synopsis
19.5.2: syserr.errcat - Class \tcode{error_category}
19.5.2.1: syserr.errcat.overview - Overview
19.5.2.2: syserr.errcat.virtuals - Virtual members
19.5.2.3: syserr.errcat.nonvirtuals - Non-virtual members
19.5.2.4: syserr.errcat.derived - Program-defined classes derived from \tcode{error_category}
19.5.2.5: syserr.errcat.objects - Error category objects
19.5.3: syserr.errcode - Class \tcode{error_code}
19.5.3.1: syserr.errcode.overview - Overview
19.5.3.2: syserr.errcode.constructors - Constructors
19.5.3.3: syserr.errcode.modifiers - Modifiers
19.5.3.4: syserr.errcode.observers - Observers
19.5.3.5: syserr.errcode.nonmembers - Non-member functions
19.5.4: syserr.errcondition - Class \tcode{error_condition}
19.5.4.1: syserr.errcondition.overview - Overview
19.5.4.2: syserr.errcondition.constructors - Constructors
19.5.4.3: syserr.errcondition.modifiers - Modifiers
19.5.4.4: syserr.errcondition.observers - Observers
19.5.4.5: syserr.errcondition.nonmembers - Non-member functions
19.5.5: syserr.compare - Comparison functions
19.5.6: syserr.hash - System error hash support
19.5.7: syserr.syserr - Class \tcode{system_error}
19.5.7.1: syserr.syserr.overview - Overview
19.5.7.2: syserr.syserr.members - Members
20: utilities - General utilities library
20.1: utilities.general - General
20.2: utility - Utility components
20.2.1: utility.syn - Header \tcode{<utility>} synopsis
20.2.2: utility.swap - \tcode{swap}
20.2.3: utility.exchange - \tcode{exchange}
20.2.4: forward - Forward/move helpers
20.2.5: utility.as.const - Function template \tcode{as_const}
20.2.6: declval - Function template \tcode{declval}
20.2.7: utility.intcmp - Integer comparison functions
20.3: intseq - Compile-time integer sequences
20.3.1: intseq.general - In general
20.3.2: intseq.intseq - Class template \tcode{integer_sequence}
20.3.3: intseq.make - Alias template \tcode{make_integer_sequence}
20.4: pairs - Pairs
20.4.1: pairs.general - In general
20.4.2: pairs.pair - Class template \tcode{pair}
20.4.3: pairs.spec - Specialized algorithms
20.4.4: pair.astuple - Tuple-like access to pair
20.4.5: pair.piecewise - Piecewise construction
20.5: tuple - Tuples
20.5.1: tuple.general - In general
20.5.2: tuple.syn - Header \tcode{<tuple>} synopsis
20.5.3: tuple.tuple - Class template \tcode{tuple}
20.5.3.1: tuple.cnstr - Construction
20.5.3.2: tuple.assign - Assignment
20.5.3.3: tuple.swap - \tcode{swap}
20.5.4: tuple.creation - Tuple creation functions
20.5.5: tuple.apply - Calling a function with a \tcode{tuple} of arguments
20.5.6: tuple.helper - Tuple helper classes
20.5.7: tuple.elem - Element access
20.5.8: tuple.rel - Relational operators
20.5.9: tuple.traits - Tuple traits
20.5.10: tuple.special - Tuple specialized algorithms
20.6: optional - Optional objects
20.6.1: optional.general - In general
20.6.2: optional.syn - Header \tcode{<optional>} synopsis
20.6.3: optional.optional - Class template \tcode{optional}
20.6.3.1: optional.ctor - Constructors
20.6.3.2: optional.dtor - Destructor
20.6.3.3: optional.assign - Assignment
20.6.3.4: optional.swap - Swap
20.6.3.5: optional.observe - Observers
20.6.3.6: optional.mod - Modifiers
20.6.4: optional.nullopt - No-value state indicator
20.6.5: optional.bad.access - Class \tcode{bad_optional_access}
20.6.6: optional.relops - Relational operators
20.6.7: optional.nullops - Comparison with \tcode{nullopt}
20.6.8: optional.comp.with.t - Comparison with \tcode{T}
20.6.9: optional.specalg - Specialized algorithms
20.6.10: optional.hash - Hash support
20.7: variant - Variants
20.7.1: variant.general - In general
20.7.2: variant.syn - Header \tcode{<variant>} synopsis
20.7.3: variant.variant - Class template \tcode{variant}
20.7.3.1: variant.ctor - Constructors
20.7.3.2: variant.dtor - Destructor
20.7.3.3: variant.assign - Assignment
20.7.3.4: variant.mod - Modifiers
20.7.3.5: variant.status - Value status
20.7.3.6: variant.swap - Swap
20.7.4: variant.helper - \tcode{variant} helper classes
20.7.5: variant.get - Value access
20.7.6: variant.relops - Relational operators
20.7.7: variant.visit - Visitation
20.7.8: variant.monostate - Class \tcode{monostate}
20.7.9: variant.monostate.relops - \tcode{monostate} relational operators
20.7.10: variant.specalg - Specialized algorithms
20.7.11: variant.bad.access - Class \tcode{bad_variant_access}
20.7.12: variant.hash - Hash support
20.8: any - Storage for any type
20.8.1: any.synop - Header \tcode{<any>} synopsis
20.8.2: any.bad.any.cast - Class \tcode{bad_any_cast}
20.8.3: any.class - Class \tcode{any}
20.8.3.1: any.cons - Construction and destruction
20.8.3.2: any.assign - Assignment
20.8.3.3: any.modifiers - Modifiers
20.8.3.4: any.observers - Observers
20.8.4: any.nonmembers - Non-member functions
20.9: bitset - Bitsets
20.9.1: bitset.syn - Header \tcode{<bitset>} synopsis
20.9.2: template.bitset - Class template \tcode{bitset}
20.9.2.1: bitset.cons - Constructors
20.9.2.2: bitset.members - Members
20.9.3: bitset.hash - \tcode{bitset} hash support
20.9.4: bitset.operators - \tcode{bitset} operators
20.10: memory - Memory
20.10.1: memory.general - In general
20.10.2: memory.syn - Header \tcode{<memory>} synopsis
20.10.3: pointer.traits - Pointer traits
20.10.3.1: pointer.traits.types - Member types
20.10.3.2: pointer.traits.functions - Member functions
20.10.3.3: pointer.traits.optmem - Optional members
20.10.4: pointer.conversion - Pointer conversion
20.10.5: util.dynamic.safety - Pointer safety
20.10.6: ptr.align - Pointer alignment
20.10.7: allocator.tag - Allocator argument tag
20.10.8: allocator.uses - \tcode{uses_allocator}
20.10.8.1: allocator.uses.trait - \tcode{uses_allocator} trait
20.10.8.2: allocator.uses.construction - Uses-allocator construction
20.10.9: allocator.traits - Allocator traits
20.10.9.1: allocator.traits.types - Member types
20.10.9.2: allocator.traits.members - Static member functions
20.10.10: default.allocator - The default allocator
20.10.10.1: allocator.members - Members
20.10.10.2: allocator.globals - Operators
20.10.11: specialized.addressof - \tcode{addressof}
20.10.12: c.malloc - C library memory allocation
20.11: smartptr - Smart pointers
20.11.1: unique.ptr - Class template \tcode{unique_ptr}
20.11.1.1: unique.ptr.dltr - Default deleters
20.11.1.1.1: unique.ptr.dltr.general - In general
20.11.1.1.2: unique.ptr.dltr.dflt - \tcode{default_delete}
20.11.1.1.3: unique.ptr.dltr.dflt1 - \tcode{default_delete<T[]>}
20.11.1.2: unique.ptr.single - \tcode{unique_ptr} for single objects
20.11.1.2.1: unique.ptr.single.ctor - Constructors
20.11.1.2.2: unique.ptr.single.dtor - Destructor
20.11.1.2.3: unique.ptr.single.asgn - Assignment
20.11.1.2.4: unique.ptr.single.observers - Observers
20.11.1.2.5: unique.ptr.single.modifiers - Modifiers
20.11.1.3: unique.ptr.runtime - \tcode{unique_ptr} for array objects with a runtime length
20.11.1.3.1: unique.ptr.runtime.ctor - Constructors
20.11.1.3.2: unique.ptr.runtime.asgn - Assignment
20.11.1.3.3: unique.ptr.runtime.observers - Observers
20.11.1.3.4: unique.ptr.runtime.modifiers - Modifiers
20.11.1.4: unique.ptr.create - Creation
20.11.1.5: unique.ptr.special - Specialized algorithms
20.11.1.6: unique.ptr.io - I/O
20.11.2: util.smartptr.weak.bad - Class \tcode{bad_weak_ptr}
20.11.3: util.smartptr.shared - Class template \tcode{shared_ptr}
20.11.3.1: util.smartptr.shared.const - Constructors
20.11.3.2: util.smartptr.shared.dest - Destructor
20.11.3.3: util.smartptr.shared.assign - Assignment
20.11.3.4: util.smartptr.shared.mod - Modifiers
20.11.3.5: util.smartptr.shared.obs - Observers
20.11.3.6: util.smartptr.shared.create - Creation
20.11.3.7: util.smartptr.shared.cmp - Comparison
20.11.3.8: util.smartptr.shared.spec - Specialized algorithms
20.11.3.9: util.smartptr.shared.cast - Casts
20.11.3.10: util.smartptr.getdeleter - \tcode{get_deleter}
20.11.3.11: util.smartptr.shared.io - I/O
20.11.4: util.smartptr.weak - Class template \tcode{weak_ptr}
20.11.4.1: util.smartptr.weak.const - Constructors
20.11.4.2: util.smartptr.weak.dest - Destructor
20.11.4.3: util.smartptr.weak.assign - Assignment
20.11.4.4: util.smartptr.weak.mod - Modifiers
20.11.4.5: util.smartptr.weak.obs - Observers
20.11.4.6: util.smartptr.weak.spec - Specialized algorithms
20.11.5: util.smartptr.ownerless - Class template \tcode{owner_less}
20.11.6: util.smartptr.enab - Class template \tcode{enable_shared_from_this}
20.11.7: util.smartptr.hash - Smart pointer hash support
20.12: mem.res - Memory resources
20.12.1: mem.res.syn - Header \tcode{<memory_resource>} synopsis
20.12.2: mem.res.class - Class \tcode{memory_resource}
20.12.2.1: mem.res.public - Public member functions
20.12.2.2: mem.res.private - Private virtual member functions
20.12.2.3: mem.res.eq - Equality
20.12.3: mem.poly.allocator.class - Class template \tcode{polymorphic_allocator}
20.12.3.1: mem.poly.allocator.ctor - Constructors
20.12.3.2: mem.poly.allocator.mem - Member functions
20.12.3.3: mem.poly.allocator.eq - Equality
20.12.4: mem.res.global - Access to program-wide \tcode{memory_resource} objects
20.12.5: mem.res.pool - Pool resource classes
20.12.5.1: mem.res.pool.overview - Classes \tcode{synchronized_pool_resource} and \tcode{unsynchronized_pool_resource}
20.12.5.2: mem.res.pool.options - \tcode{pool_options} data members
20.12.5.3: mem.res.pool.ctor - Constructors and destructors
20.12.5.4: mem.res.pool.mem - Members
20.12.6: mem.res.monotonic.buffer - Class \tcode{monotonic_buffer_resource}
20.12.6.1: mem.res.monotonic.buffer.ctor - Constructors and destructor
20.12.6.2: mem.res.monotonic.buffer.mem - Members
20.13: allocator.adaptor - Class template \tcode{scoped_allocator_adaptor}
20.13.1: allocator.adaptor.syn - Header \tcode{<scoped_allocator>} synopsis
20.13.2: allocator.adaptor.types - Member types
20.13.3: allocator.adaptor.cnstr - Constructors
20.13.4: allocator.adaptor.members - Members
20.13.5: scoped.adaptor.operators - Operators
20.14: function.objects - Function objects
20.14.1: functional.syn - Header \tcode{<functional>} synopsis
20.14.2: func.def - Definitions
20.14.3: func.require - Requirements
20.14.4: func.invoke - Function template \tcode{invoke}
20.14.5: refwrap - Class template \tcode{reference_wrapper}
20.14.5.1: refwrap.const - Constructors and destructor
20.14.5.2: refwrap.assign - Assignment
20.14.5.3: refwrap.access - Access
20.14.5.4: refwrap.invoke - Invocation
20.14.5.5: refwrap.helpers - Helper functions
20.14.6: arithmetic.operations - Arithmetic operations
20.14.6.1: arithmetic.operations.plus - Class template \tcode{plus}
20.14.6.2: arithmetic.operations.minus - Class template \tcode{minus}
20.14.6.3: arithmetic.operations.multiplies - Class template \tcode{multiplies}
20.14.6.4: arithmetic.operations.divides - Class template \tcode{divides}
20.14.6.5: arithmetic.operations.modulus - Class template \tcode{modulus}
20.14.6.6: arithmetic.operations.negate - Class template \tcode{negate}
20.14.7: comparisons - Comparisons
20.14.7.1: comparisons.equal.to - Class template \tcode{equal_to}
20.14.7.2: comparisons.not.equal.to - Class template \tcode{not_equal_to}
20.14.7.3: comparisons.greater - Class template \tcode{greater}
20.14.7.4: comparisons.less - Class template \tcode{less}
20.14.7.5: comparisons.greater.equal - Class template \tcode{greater_equal}
20.14.7.6: comparisons.less.equal - Class template \tcode{less_equal}
20.14.7.7: comparisons.three.way - Class \tcode{compare_three_way}
20.14.8: range.cmp - Concept-constrained comparisons
20.14.9: logical.operations - Logical operations
20.14.9.1: logical.operations.and - Class template \tcode{logical_and}
20.14.9.2: logical.operations.or - Class template \tcode{logical_or}
20.14.9.3: logical.operations.not - Class template \tcode{logical_not}
20.14.10: bitwise.operations - Bitwise operations
20.14.10.1: bitwise.operations.and - Class template \tcode{bit_and}
20.14.10.2: bitwise.operations.or - Class template \tcode{bit_or}
20.14.10.3: bitwise.operations.xor - Class template \tcode{bit_xor}
20.14.10.4: bitwise.operations.not - Class template \tcode{bit_not}
20.14.11: func.identity - Class \tcode{identity}
20.14.12: func.not.fn - Function template \tcode{not_fn}
20.14.13: func.bind.front - Function template \tcode{bind_front}
20.14.14: func.bind - Function object binders
20.14.14.1: func.bind.isbind - Class template \tcode{is_bind_expression}
20.14.14.2: func.bind.isplace - Class template \tcode{is_placeholder}
20.14.14.3: func.bind.bind - Function template \tcode{bind}
20.14.14.4: func.bind.place - Placeholders
20.14.15: func.memfn - Function template \tcode{mem_fn}
20.14.16: func.wrap - Polymorphic function wrappers
20.14.16.1: func.wrap.badcall - Class \tcode{bad_function_call}
20.14.16.2: func.wrap.func - Class template \tcode{function}
20.14.16.2.1: func.wrap.func.con - Constructors and destructor
20.14.16.2.2: func.wrap.func.mod - Modifiers
20.14.16.2.3: func.wrap.func.cap - Capacity
20.14.16.2.4: func.wrap.func.inv - Invocation
20.14.16.2.5: func.wrap.func.targ - Target access
20.14.16.2.6: func.wrap.func.nullptr - Null pointer comparison functions
20.14.16.2.7: func.wrap.func.alg - Specialized algorithms
20.14.17: func.search - Searchers
20.14.17.1: func.search.default - Class template \tcode{default_searcher}
20.14.17.2: func.search.bm - Class template \tcode{boyer_moore_searcher}
20.14.17.3: func.search.bmh - Class template \tcode{boyer_moore_horspool_searcher}
20.14.18: unord.hash - Class template \tcode{hash}
20.15: meta - Metaprogramming and type traits
20.15.1: meta.rqmts - Requirements
20.15.2: meta.type.synop - Header \tcode{<type_traits>} synopsis
20.15.3: meta.help - Helper classes
20.15.4: meta.unary - Unary type traits
20.15.4.1: meta.unary.cat - Primary type categories
20.15.4.2: meta.unary.comp - Composite type traits
20.15.4.3: meta.unary.prop - Type properties
20.15.5: meta.unary.prop.query - Type property queries
20.15.6: meta.rel - Relationships between types
20.15.7: meta.trans - Transformations between types
20.15.7.1: meta.trans.cv - Const-volatile modifications
20.15.7.2: meta.trans.ref - Reference modifications
20.15.7.3: meta.trans.sign - Sign modifications
20.15.7.4: meta.trans.arr - Array modifications
20.15.7.5: meta.trans.ptr - Pointer modifications
20.15.7.6: meta.trans.other - Other transformations
20.15.8: meta.logical - Logical operator traits
20.15.9: meta.member - Member relationships
20.15.10: meta.const.eval - Constant evaluation context
20.16: ratio - Compile-time rational arithmetic
20.16.1: ratio.general - In general
20.16.2: ratio.syn - Header \tcode{<ratio>} synopsis
20.16.3: ratio.ratio - Class template \tcode{ratio}
20.16.4: ratio.arithmetic - Arithmetic on \tcode{ratio}{s}
20.16.5: ratio.comparison - Comparison of \tcode{ratio}{s}
20.16.6: ratio.si - SI types for \tcode{ratio}
20.17: type.index - Class \tcode{type_index}
20.17.1: type.index.synopsis - Header \tcode{<typeindex>} synopsis
20.17.2: type.index.overview - \tcode{type_index} overview
20.17.3: type.index.members - \tcode{type_index} members
20.17.4: type.index.hash - Hash support
20.18: execpol - Execution policies
20.18.1: execpol.general - In general
20.18.2: execution.syn - Header \tcode{<execution>} synopsis
20.18.3: execpol.type - Execution policy type trait
20.18.4: execpol.seq - Sequenced execution policy
20.18.5: execpol.par - Parallel execution policy
20.18.6: execpol.parunseq - Parallel and unsequenced execution policy
20.18.7: execpol.unseq - Unsequenced execution policy
20.18.8: execpol.objects - Execution policy objects
20.19: charconv - Primitive numeric conversions
20.19.1: charconv.syn - Header \tcode{<charconv>} synopsis
20.19.2: charconv.to.chars - Primitive numeric output conversion
20.19.3: charconv.from.chars - Primitive numeric input conversion
20.20: format - Formatting
20.20.1: format.syn - Header \tcode{<format>} synopsis
20.20.2: format.string - Format string
20.20.2.1: format.string.general - In general
20.20.2.2: format.string.std - Standard format specifiers
20.20.3: format.err.report - Error reporting
20.20.4: format.functions - Formatting functions
20.20.5: format.formatter - Formatter
20.20.5.1: formatter.requirements - Formatter requirements
20.20.5.2: format.formatter.spec - Formatter specializations
20.20.5.3: format.parse.ctx - Class template \tcode{basic_format_parse_context}
20.20.5.4: format.context - Class template \tcode{basic_format_context}
20.20.6: format.arguments - Arguments
20.20.6.1: format.arg - Class template \tcode{basic_format_arg}
20.20.6.2: format.arg.store - Class template \exposid{format-arg-store}
20.20.6.3: format.args - Class template \tcode{basic_format_args}
20.20.7: format.error - Class \tcode{format_error}
21: strings - Strings library
21.1: strings.general - General
21.2: char.traits - Character traits
21.2.1: char.traits.require - Character traits requirements
21.2.2: char.traits.typedefs - Traits typedefs
21.2.3: char.traits.specializations - \tcode{char_traits} specializations
21.2.3.1: char.traits.specializations.char - \tcode{struct char_traits<char>}
21.2.3.2: char.traits.specializations.char8.t - \tcode{struct char_traits<char8_t>}
21.2.3.3: char.traits.specializations.char16.t - \tcode{struct char_traits<char16_t>}
21.2.3.4: char.traits.specializations.char32.t - \tcode{struct char_traits<char32_t>}
21.2.3.5: char.traits.specializations.wchar.t - \tcode{struct char_traits<wchar_t>}
21.3: string.classes - String classes
21.3.1: string.syn - Header \tcode{<string>} synopsis
21.3.2: basic.string - Class template \tcode{basic_string}
21.3.2.1: string.require - General requirements
21.3.2.2: string.cons - Constructors and assignment operators
21.3.2.3: string.iterators - Iterator support
21.3.2.4: string.capacity - Capacity
21.3.2.5: string.access - Element access
21.3.2.6: string.modifiers - Modifiers
21.3.2.6.1: string.op.append - \tcode{basic_string::operator+=}
21.3.2.6.2: string.append - \tcode{basic_string::append}
21.3.2.6.3: string.assign - \tcode{basic_string::assign}
21.3.2.6.4: string.insert - \tcode{basic_string::insert}
21.3.2.6.5: string.erase - \tcode{basic_string::erase}
21.3.2.6.6: string.replace - \tcode{basic_string::replace}
21.3.2.6.7: string.copy - \tcode{basic_string::copy}
21.3.2.6.8: string.swap - \tcode{basic_string::swap}
21.3.2.7: string.ops - String operations
21.3.2.7.1: string.accessors - Accessors
21.3.2.7.2: string.find - Searching
21.3.2.7.3: string.substr - \tcode{basic_string::substr}
21.3.2.7.4: string.compare - \tcode{basic_string::compare}
21.3.2.7.5: string.starts.with - \tcode{basic_string::starts_with}
21.3.2.7.6: string.ends.with - \tcode{basic_string::ends_with}
21.3.3: string.nonmembers - Non-member functions
21.3.3.1: string.op.plus - \tcode{operator+}
21.3.3.2: string.cmp - Non-member comparison functions
21.3.3.3: string.special - \tcode{swap}
21.3.3.4: string.io - Inserters and extractors
21.3.3.5: string.erasure - Erasure
21.3.4: string.conversions - Numeric conversions
21.3.5: basic.string.hash - Hash support
21.3.6: basic.string.literals - Suffix for \tcode{basic_string} literals
21.4: string.view - String view classes
21.4.1: string.view.synop - Header \tcode{<string_view>} synopsis
21.4.2: string.view.template - Class template \tcode{basic_string_view}
21.4.2.1: string.view.cons - Construction and assignment
21.4.2.2: string.view.iterators - Iterator support
21.4.2.3: string.view.capacity - Capacity
21.4.2.4: string.view.access - Element access
21.4.2.5: string.view.modifiers - Modifiers
21.4.2.6: string.view.ops - String operations
21.4.2.7: string.view.find - Searching
21.4.3: string.view.deduct - Deduction guide
21.4.4: string.view.comparison - Non-member comparison functions
21.4.5: string.view.io - Inserters and extractors
21.4.6: string.view.hash - Hash support
21.4.7: string.view.literals - Suffix for \tcode{basic_string_view} literals
21.5: c.strings - Null-terminated sequence utilities
21.5.1: cctype.syn - Header \tcode{<cctype>} synopsis
21.5.2: cwctype.syn - Header \tcode{<cwctype>} synopsis
21.5.3: cstring.syn - Header \tcode{<cstring>} synopsis
21.5.4: cwchar.syn - Header \tcode{<cwchar>} synopsis
21.5.5: cuchar.syn - Header \tcode{<cuchar>} synopsis
21.5.6: c.mb.wcs - Multibyte / wide string and character conversion functions
22: containers - Containers library
22.1: containers.general - General
22.2: container.requirements - Container requirements
22.2.1: container.requirements.general - General container requirements
22.2.2: container.requirements.dataraces - Container data races
22.2.3: sequence.reqmts - Sequence containers
22.2.4: container.node - Node handles
22.2.4.1: container.node.overview - Overview
22.2.4.2: container.node.cons - Constructors, copy, and assignment
22.2.4.3: container.node.dtor - Destructor
22.2.4.4: container.node.observers - Observers
22.2.4.5: container.node.modifiers - Modifiers
22.2.5: container.insert.return - Insert return type
22.2.6: associative.reqmts - Associative containers
22.2.6.1: associative.reqmts.except - Exception safety guarantees
22.2.7: unord.req - Unordered associative containers
22.2.7.1: unord.req.except - Exception safety guarantees
22.3: sequences - Sequence containers
22.3.1: sequences.general - In general
22.3.2: array.syn - Header \tcode{<array>} synopsis
22.3.3: deque.syn - Header \tcode{<deque>} synopsis
22.3.4: forward.list.syn - Header \tcode{<forward_list>} synopsis
22.3.5: list.syn - Header \tcode{<list>} synopsis
22.3.6: vector.syn - Header \tcode{<vector>} synopsis
22.3.7: array - Class template \tcode{array}
22.3.7.1: array.overview - Overview
22.3.7.2: array.cons - Constructors, copy, and assignment
22.3.7.3: array.members - Member functions
22.3.7.4: array.special - Specialized algorithms
22.3.7.5: array.zero - Zero-sized arrays
22.3.7.6: array.creation - Array creation functions
22.3.7.7: array.tuple - Tuple interface
22.3.8: deque - Class template \tcode{deque}
22.3.8.1: deque.overview - Overview
22.3.8.2: deque.cons - Constructors, copy, and assignment
22.3.8.3: deque.capacity - Capacity
22.3.8.4: deque.modifiers - Modifiers
22.3.8.5: deque.erasure - Erasure
22.3.9: forwardlist - Class template \tcode{forward_list}
22.3.9.1: forwardlist.overview - Overview
22.3.9.2: forwardlist.cons - Constructors, copy, and assignment
22.3.9.3: forwardlist.iter - Iterators
22.3.9.4: forwardlist.access - Element access
22.3.9.5: forwardlist.modifiers - Modifiers
22.3.9.6: forwardlist.ops - Operations
22.3.9.7: forward.list.erasure - Erasure
22.3.10: list - Class template \tcode{list}
22.3.10.1: list.overview - Overview
22.3.10.2: list.cons - Constructors, copy, and assignment
22.3.10.3: list.capacity - Capacity
22.3.10.4: list.modifiers - Modifiers
22.3.10.5: list.ops - Operations
22.3.10.6: list.erasure - Erasure
22.3.11: vector - Class template \tcode{vector}
22.3.11.1: vector.overview - Overview
22.3.11.2: vector.cons - Constructors, copy, and assignment
22.3.11.3: vector.capacity - Capacity
22.3.11.4: vector.data - Data
22.3.11.5: vector.modifiers - Modifiers
22.3.11.6: vector.erasure - Erasure
22.3.12: vector.bool - Class \tcode{vector<bool>}
22.4: associative - Associative containers
22.4.1: associative.general - In general
22.4.2: associative.map.syn - Header \tcode{<map>} synopsis
22.4.3: associative.set.syn - Header \tcode{<set>} synopsis
22.4.4: map - Class template \tcode{map}
22.4.4.1: map.overview - Overview
22.4.4.2: map.cons - Constructors, copy, and assignment
22.4.4.3: map.access - Element access
22.4.4.4: map.modifiers - Modifiers
22.4.4.5: map.erasure - Erasure
22.4.5: multimap - Class template \tcode{multimap}
22.4.5.1: multimap.overview - Overview
22.4.5.2: multimap.cons - Constructors
22.4.5.3: multimap.modifiers - Modifiers
22.4.5.4: multimap.erasure - Erasure
22.4.6: set - Class template \tcode{set}
22.4.6.1: set.overview - Overview
22.4.6.2: set.cons - Constructors, copy, and assignment
22.4.6.3: set.erasure - Erasure
22.4.7: multiset - Class template \tcode{multiset}
22.4.7.1: multiset.overview - Overview
22.4.7.2: multiset.cons - Constructors
22.4.7.3: multiset.erasure - Erasure
22.5: unord - Unordered associative containers
22.5.1: unord.general - In general
22.5.2: unord.map.syn - Header \tcode{<unordered_map>} synopsis
22.5.3: unord.set.syn - Header \tcode{<unordered_set>} synopsis
22.5.4: unord.map - Class template \tcode{unordered_map}
22.5.4.1: unord.map.overview - Overview
22.5.4.2: unord.map.cnstr - Constructors
22.5.4.3: unord.map.elem - Element access
22.5.4.4: unord.map.modifiers - Modifiers
22.5.4.5: unord.map.erasure - Erasure
22.5.5: unord.multimap - Class template \tcode{unordered_multimap}
22.5.5.1: unord.multimap.overview - Overview
22.5.5.2: unord.multimap.cnstr - Constructors
22.5.5.3: unord.multimap.modifiers - Modifiers
22.5.5.4: unord.multimap.erasure - Erasure
22.5.6: unord.set - Class template \tcode{unordered_set}
22.5.6.1: unord.set.overview - Overview
22.5.6.2: unord.set.cnstr - Constructors
22.5.6.3: unord.set.erasure - Erasure
22.5.7: unord.multiset - Class template \tcode{unordered_multiset}
22.5.7.1: unord.multiset.overview - Overview
22.5.7.2: unord.multiset.cnstr - Constructors
22.5.7.3: unord.multiset.erasure - Erasure
22.6: container.adaptors - Container adaptors
22.6.1: container.adaptors.general - In general
22.6.2: queue.syn - Header \tcode{<queue>} synopsis
22.6.3: stack.syn - Header \tcode{<stack>} synopsis
22.6.4: queue - Class template \tcode{queue}
22.6.4.1: queue.defn - Definition
22.6.4.2: queue.cons - Constructors
22.6.4.3: queue.cons.alloc - Constructors with allocators
22.6.4.4: queue.ops - Operators
22.6.4.5: queue.special - Specialized algorithms
22.6.5: priority.queue - Class template \tcode{priority_queue}
22.6.5.1: priqueue.overview - Overview
22.6.5.2: priqueue.cons - Constructors
22.6.5.3: priqueue.cons.alloc - Constructors with allocators
22.6.5.4: priqueue.members - Members
22.6.5.5: priqueue.special - Specialized algorithms
22.6.6: stack - Class template \tcode{stack}
22.6.6.1: stack.defn - Definition
22.6.6.2: stack.cons - Constructors
22.6.6.3: stack.cons.alloc - Constructors with allocators
22.6.6.4: stack.ops - Operators
22.6.6.5: stack.special - Specialized algorithms
22.7: views - Views
22.7.1: views.general - General
22.7.2: span.syn - Header \tcode{<span>} synopsis
22.7.3: views.span - Class template \tcode{span}
22.7.3.1: span.overview - Overview
22.7.3.2: span.cons - Constructors, copy, and assignment
22.7.3.3: span.deduct - Deduction guides
22.7.3.4: span.sub - Subviews
22.7.3.5: span.obs - Observers
22.7.3.6: span.elem - Element access
22.7.3.7: span.iterators - Iterator support
22.7.3.8: span.objectrep - Views of object representation
23: iterators - Iterators library
23.1: iterators.general - General
23.2: iterator.synopsis - Header \tcode{<iterator>}\ synopsis
23.3: iterator.requirements - Iterator requirements
23.3.1: iterator.requirements.general - In general
23.3.2: iterator.assoc.types - Associated types
23.3.2.1: incrementable.traits - Incrementable traits
23.3.2.2: readable.traits - Indirectly readable traits
23.3.2.3: iterator.traits - Iterator traits
23.3.3: iterator.cust - Customization points
23.3.3.1: iterator.cust.move - \tcode{ranges::iter_move}
23.3.3.2: iterator.cust.swap - \tcode{ranges::iter_swap}
23.3.4: iterator.concepts - Iterator concepts
23.3.4.1: iterator.concepts.general - General
23.3.4.2: iterator.concept.readable - Concept \cname{indirectly_readable}
23.3.4.3: iterator.concept.writable - Concept \cname{indirectly_writable}
23.3.4.4: iterator.concept.winc - Concept \cname{weakly_incrementable}
23.3.4.5: iterator.concept.inc - Concept \cname{incrementable}
23.3.4.6: iterator.concept.iterator - Concept \cname{input_or_output_iterator}
23.3.4.7: iterator.concept.sentinel - Concept \cname{sentinel_for}
23.3.4.8: iterator.concept.sizedsentinel - Concept \cname{sized_sentinel_for}
23.3.4.9: iterator.concept.input - Concept \cname{input_iterator}
23.3.4.10: iterator.concept.output - Concept \cname{output_iterator}
23.3.4.11: iterator.concept.forward - Concept \cname{forward_iterator}
23.3.4.12: iterator.concept.bidir - Concept \cname{bidirectional_iterator}
23.3.4.13: iterator.concept.random.access - Concept \cname{random_access_iterator}
23.3.4.14: iterator.concept.contiguous - Concept \cname{contiguous_iterator}
23.3.5: iterator.cpp17 - \Cpp{}17 iterator requirements
23.3.5.1: iterator.iterators - \oldconcept{Iterator}
23.3.5.2: input.iterators - Input iterators
23.3.5.3: output.iterators - Output iterators
23.3.5.4: forward.iterators - Forward iterators
23.3.5.5: bidirectional.iterators - Bidirectional iterators
23.3.5.6: random.access.iterators - Random access iterators
23.3.6: indirectcallable - Indirect callable requirements
23.3.6.1: indirectcallable.general - General
23.3.6.2: indirectcallable.indirectinvocable - Indirect callables
23.3.6.3: projected - Class template \tcode{projected}
23.3.7: alg.req - Common algorithm requirements
23.3.7.1: alg.req.general - General
23.3.7.2: alg.req.ind.move - Concept \cname{indirectly_movable}
23.3.7.3: alg.req.ind.copy - Concept \cname{indirectly_copyable}
23.3.7.4: alg.req.ind.swap - Concept \cname{indirectly_swappable}
23.3.7.5: alg.req.ind.cmp - Concept \cname{indirectly_comparable}
23.3.7.6: alg.req.permutable - Concept \cname{permutable}
23.3.7.7: alg.req.mergeable - Concept \cname{mergeable}
23.3.7.8: alg.req.sortable - Concept \cname{sortable}
23.4: iterator.primitives - Iterator primitives
23.4.1: std.iterator.tags - Standard iterator tags
23.4.2: iterator.operations - Iterator operations
23.4.3: range.iter.ops - Range iterator operations
23.4.3.1: range.iter.op.advance - \tcode{ranges::advance}
23.4.3.2: range.iter.op.distance - \tcode{ranges::distance}
23.4.3.3: range.iter.op.next - \tcode{ranges::next}
23.4.3.4: range.iter.op.prev - \tcode{ranges::prev}
23.5: predef.iterators - Iterator adaptors
23.5.1: reverse.iterators - Reverse iterators
23.5.1.1: reverse.iterator - Class template \tcode{reverse_iterator}
23.5.1.2: reverse.iter.requirements - Requirements
23.5.1.3: reverse.iter.cons - Construction and assignment
23.5.1.4: reverse.iter.conv - Conversion
23.5.1.5: reverse.iter.elem - Element access
23.5.1.6: reverse.iter.nav - Navigation
23.5.1.7: reverse.iter.cmp - Comparisons
23.5.1.8: reverse.iter.nonmember - Non-member functions
23.5.2: insert.iterators - Insert iterators
23.5.2.1: back.insert.iterator - Class template \tcode{back_insert_iterator}
23.5.2.1.1: back.insert.iter.ops - Operations
23.5.2.1.2: back.inserter -  \tcode{back_inserter}
23.5.2.2: front.insert.iterator - Class template \tcode{front_insert_iterator}
23.5.2.2.1: front.insert.iter.ops - Operations
23.5.2.2.2: front.inserter - \tcode{front_inserter}
23.5.2.3: insert.iterator - Class template \tcode{insert_iterator}
23.5.2.3.1: insert.iter.ops - Operations
23.5.2.3.2: inserter - \tcode{inserter}
23.5.3: move.iterators - Move iterators and sentinels
23.5.3.1: move.iterator - Class template \tcode{move_iterator}
23.5.3.2: move.iter.requirements - Requirements
23.5.3.3: move.iter.cons - Construction and assignment
23.5.3.4: move.iter.op.conv - Conversion
23.5.3.5: move.iter.elem - Element access
23.5.3.6: move.iter.nav - Navigation
23.5.3.7: move.iter.op.comp - Comparisons
23.5.3.8: move.iter.nonmember - Non-member functions
23.5.3.9: move.sentinel - Class template \tcode{move_sentinel}
23.5.3.10: move.sent.ops - Operations
23.5.4: iterators.common - Common iterators
23.5.4.1: common.iterator - Class template \tcode{common_iterator}
23.5.4.2: common.iter.types - Associated types
23.5.4.3: common.iter.const - Constructors and conversions
23.5.4.4: common.iter.access - Accessors
23.5.4.5: common.iter.nav - Navigation
23.5.4.6: common.iter.cmp - Comparisons
23.5.4.7: common.iter.cust - Customization
23.5.5: default.sentinels - Default sentinels
23.5.6: iterators.counted - Counted iterators
23.5.6.1: counted.iterator - Class template \tcode{counted_iterator}
23.5.6.2: counted.iter.const - Constructors and conversions
23.5.6.3: counted.iter.access - Accessors
23.5.6.4: counted.iter.elem - Element access
23.5.6.5: counted.iter.nav - Navigation
23.5.6.6: counted.iter.cmp - Comparisons
23.5.6.7: counted.iter.cust - Customizations
23.5.7: unreachable.sentinels - Unreachable sentinel
23.5.7.1: unreachable.sentinel - Class \tcode{unreachable_sentinel_t}
23.6: stream.iterators - Stream iterators
23.6.1: istream.iterator - Class template \tcode{istream_iterator}
23.6.1.1: istream.iterator.cons - Constructors and destructor
23.6.1.2: istream.iterator.ops - Operations
23.6.2: ostream.iterator - Class template \tcode{ostream_iterator}
23.6.2.1: ostream.iterator.cons.des - Constructors and destructor
23.6.2.2: ostream.iterator.ops - Operations
23.6.3: istreambuf.iterator - Class template \tcode{istreambuf_iterator}
23.6.3.1: istreambuf.iterator.proxy - Class \tcode{istreambuf_iterator::\placeholder{proxy}}
23.6.3.2: istreambuf.iterator.cons - Constructors
23.6.3.3: istreambuf.iterator.ops - Operations
23.6.4: ostreambuf.iterator - Class template \tcode{ostreambuf_iterator}
23.6.4.1: ostreambuf.iter.cons - Constructors
23.6.4.2: ostreambuf.iter.ops - Operations
23.7: iterator.range - Range access
24: ranges - Ranges library
24.1: ranges.general - General
24.2: ranges.syn - Header \tcode{<ranges>} synopsis
24.3: range.access - Range access
24.3.1: range.access.begin - \tcode{ranges::begin}
24.3.2: range.access.end - \tcode{ranges::end}
24.3.3: range.access.cbegin - \tcode{ranges::cbegin}
24.3.4: range.access.cend - \tcode{ranges::cend}
24.3.5: range.access.rbegin - \tcode{ranges::rbegin}
24.3.6: range.access.rend - \tcode{ranges::rend}
24.3.7: range.access.crbegin - \tcode{ranges::crbegin}
24.3.8: range.access.crend - \tcode{ranges::crend}
24.3.9: range.prim.size - \tcode{ranges::size}
24.3.10: range.prim.ssize - \tcode{ranges::ssize}
24.3.11: range.prim.empty - \tcode{ranges::empty}
24.3.12: range.prim.data - \tcode{ranges::data}
24.3.13: range.prim.cdata - \tcode{ranges::cdata}
24.4: range.req - Range requirements
24.4.1: range.req.general - General
24.4.2: range.range - Ranges
24.4.3: range.sized - Sized ranges
24.4.4: range.view - Views
24.4.5: range.refinements - Other range refinements
24.5: range.utility - Range utilities
24.5.1: range.utility.helpers - Helper concepts
24.5.2: view.interface - View interface
24.5.2.1: view.interface.members - Members
24.5.3: range.subrange - Sub-ranges
24.5.3.1: range.subrange.ctor - Constructors and conversions
24.5.3.2: range.subrange.access - Accessors
24.5.4: range.dangling - Dangling iterator handling
24.6: range.factories - Range factories
24.6.1: range.empty - Empty view
24.6.1.1: range.empty.overview - Overview
24.6.1.2: range.empty.view - Class template \tcode{empty_view}
24.6.2: range.single - Single view
24.6.2.1: range.single.overview - Overview
24.6.2.2: range.single.view - Class template \tcode{single_view}
24.6.3: range.iota - Iota view
24.6.3.1: range.iota.overview - Overview
24.6.3.2: range.iota.view - Class template \tcode{iota_view}
24.6.3.3: range.iota.iterator - Class \tcode{iota_view::\exposid{iterator}}
24.6.3.4: range.iota.sentinel - Class \tcode{iota_view::\exposid{sentinel}}
24.6.4: range.istream - Istream view
24.6.4.1: range.istream.overview - Overview
24.6.4.2: range.istream.view - Class template \tcode{basic_istream_view}
24.6.4.3: range.istream.iterator - Class template \tcode{basic_istream_view::\exposid{iterator}}
24.7: range.adaptors - Range adaptors
24.7.1: range.adaptor.object - Range adaptor objects
24.7.2: range.semi.wrap - Semiregular wrapper
24.7.3: range.all - All view
24.7.3.1: range.ref.view - Class template \tcode{ref_view}
24.7.4: range.filter - Filter view
24.7.4.1: range.filter.overview - Overview
24.7.4.2: range.filter.view - Class template \tcode{filter_view}
24.7.4.3: range.filter.iterator - Class \tcode{filter_view::\exposid{iterator}}
24.7.4.4: range.filter.sentinel - Class \tcode{filter_view::\exposid{sentinel}}
24.7.5: range.transform - Transform view
24.7.5.1: range.transform.overview - Overview
24.7.5.2: range.transform.view - Class template \tcode{transform_view}
24.7.5.3: range.transform.iterator - Class template \tcode{transform_view::\exposid{iterator}}
24.7.5.4: range.transform.sentinel - Class template \tcode{transform_view::\exposid{sentinel}}
24.7.6: range.take - Take view
24.7.6.1: range.take.overview - Overview
24.7.6.2: range.take.view - Class template \tcode{take_view}
24.7.6.3: range.take.sentinel - Class template \tcode{take_view::\exposid{sentinel}}
24.7.7: range.take.while - Take while view
24.7.7.1: range.take.while.overview - Overview
24.7.7.2: range.take.while.view - Class template \tcode{take_while_view}
24.7.7.3: range.take.while.sentinel - Class template \tcode{take_while_view::\exposid{sentinel}}
24.7.8: range.drop - Drop view
24.7.8.1: range.drop.overview - Overview
24.7.8.2: range.drop.view - Class template \tcode{drop_view}
24.7.9: range.drop.while - Drop while view
24.7.9.1: range.drop.while.overview - Overview
24.7.9.2: range.drop.while.view - Class template \tcode{drop_while_view}
24.7.10: range.join - Join view
24.7.10.1: range.join.overview - Overview
24.7.10.2: range.join.view - Class template \tcode{join_view}
24.7.10.3: range.join.iterator - Class template \tcode{join_view::\exposid{iterator}}
24.7.10.4: range.join.sentinel - Class template \tcode{join_view::\exposid{sentinel}}
24.7.11: range.split - Split view
24.7.11.1: range.split.overview - Overview
24.7.11.2: range.split.view - Class template \tcode{split_view}
24.7.11.3: range.split.outer - Class template \tcode{split_view::\exposid{outer-iterator}}
24.7.11.4: range.split.outer.value - Class \tcode{split_view::\exposid{outer-iterator}::value_type}
24.7.11.5: range.split.inner - Class template \tcode{split_view::\exposid{inner-iterator}}
24.7.12: range.counted - Counted view
24.7.13: range.common - Common view
24.7.13.1: range.common.overview - Overview
24.7.13.2: range.common.view - Class template \tcode{common_view}
24.7.14: range.reverse - Reverse view
24.7.14.1: range.reverse.overview - Overview
24.7.14.2: range.reverse.view - Class template \tcode{reverse_view}
24.7.15: range.elements - Elements view
24.7.15.1: range.elements.overview - Overview
24.7.15.2: range.elements.view - Class template \tcode{elements_view}
24.7.15.3: range.elements.iterator - Class template \tcode{elements_view::\exposid{iterator}}
24.7.15.4: range.elements.sentinel - Class template \tcode{elements_view::\exposid{sentinel}}
25: algorithms - Algorithms library
25.1: algorithms.general - General
25.2: algorithms.requirements - Algorithms requirements
25.3: algorithms.parallel - Parallel algorithms
25.3.1: algorithms.parallel.defns - Preamble
25.3.2: algorithms.parallel.user - Requirements on user-provided function objects
25.3.3: algorithms.parallel.exec - Effect of execution policies on algorithm execution
25.3.4: algorithms.parallel.exceptions - Parallel algorithm exceptions
25.3.5: algorithms.parallel.overloads - \tcode{ExecutionPolicy} algorithm overloads
25.4: algorithm.syn - Header \tcode{<algorithm>} synopsis
25.5: algorithms.results - Algorithm result types
25.6: alg.nonmodifying - Non-modifying sequence operations
25.6.1: alg.all.of - All of
25.6.2: alg.any.of - Any of
25.6.3: alg.none.of - None of
25.6.4: alg.foreach - For each
25.6.5: alg.find - Find
25.6.6: alg.find.end - Find end
25.6.7: alg.find.first.of - Find first
25.6.8: alg.adjacent.find - Adjacent find
25.6.9: alg.count - Count
25.6.10: mismatch - Mismatch
25.6.11: alg.equal - Equal
25.6.12: alg.is.permutation - Is permutation
25.6.13: alg.search - Search
25.7: alg.modifying.operations - Mutating sequence operations
25.7.1: alg.copy - Copy
25.7.2: alg.move - Move
25.7.3: alg.swap - Swap
25.7.4: alg.transform - Transform
25.7.5: alg.replace - Replace
25.7.6: alg.fill - Fill
25.7.7: alg.generate - Generate
25.7.8: alg.remove - Remove
25.7.9: alg.unique - Unique
25.7.10: alg.reverse - Reverse
25.7.11: alg.rotate - Rotate
25.7.12: alg.random.sample - Sample
25.7.13: alg.random.shuffle - Shuffle
25.7.14: alg.shift - Shift
25.8: alg.sorting - Sorting and related operations
25.8.1: alg.sort - Sorting
25.8.1.1: sort - \tcode{sort}
25.8.1.2: stable.sort - \tcode{stable_sort}
25.8.1.3: partial.sort - \tcode{partial_sort}
25.8.1.4: partial.sort.copy - \tcode{partial_sort_copy}
25.8.1.5: is.sorted - \tcode{is_sorted}
25.8.2: alg.nth.element - Nth element
25.8.3: alg.binary.search - Binary search
25.8.3.1: lower.bound - \tcode{lower_bound}
25.8.3.2: upper.bound - \tcode{upper_bound}
25.8.3.3: equal.range - \tcode{equal_range}
25.8.3.4: binary.search - \tcode{binary_search}
25.8.4: alg.partitions - Partitions
25.8.5: alg.merge - Merge
25.8.6: alg.set.operations - Set operations on sorted structures
25.8.6.1: includes - \tcode{includes}
25.8.6.2: set.union - \tcode{set_union}
25.8.6.3: set.intersection - \tcode{set_intersection}
25.8.6.4: set.difference - \tcode{set_difference}
25.8.6.5: set.symmetric.difference - \tcode{set_symmetric_difference}
25.8.7: alg.heap.operations - Heap operations
25.8.7.1: push.heap - \tcode{push_heap}
25.8.7.2: pop.heap - \tcode{pop_heap}
25.8.7.3: make.heap - \tcode{make_heap}
25.8.7.4: sort.heap - \tcode{sort_heap}
25.8.7.5: is.heap - \tcode{is_heap}
25.8.8: alg.min.max - Minimum and maximum
25.8.9: alg.clamp - Bounded value
25.8.10: alg.lex.comparison - Lexicographical comparison
25.8.11: alg.three.way - Three-way comparison algorithms
25.8.12: alg.permutation.generators - Permutation generators
25.9: numeric.ops.overview - Header \tcode{<numeric>} synopsis
25.10: numeric.ops - Generalized numeric operations
25.10.1: numerics.defns - Definitions
25.10.2: accumulate - Accumulate
25.10.3: reduce - Reduce
25.10.4: inner.product - Inner product
25.10.5: transform.reduce - Transform reduce
25.10.6: partial.sum - Partial sum
25.10.7: exclusive.scan - Exclusive scan
25.10.8: inclusive.scan - Inclusive scan
25.10.9: transform.exclusive.scan - Transform exclusive scan
25.10.10: transform.inclusive.scan - Transform inclusive scan
25.10.11: adjacent.difference - Adjacent difference
25.10.12: numeric.iota - Iota
25.10.13: numeric.ops.gcd - Greatest common divisor
25.10.14: numeric.ops.lcm - Least common multiple
25.10.15: numeric.ops.midpoint - Midpoint
25.11: specialized.algorithms - Specialized \tcode{<memory>} algorithms
25.11.1: special.mem.concepts - Special memory concepts
25.11.2: uninitialized.construct.default - \tcode{uninitialized_default_construct}
25.11.3: uninitialized.construct.value - \tcode{uninitialized_value_construct}
25.11.4: uninitialized.copy - \tcode{uninitialized_copy}
25.11.5: uninitialized.move - \tcode{uninitialized_move}
25.11.6: uninitialized.fill - \tcode{uninitialized_fill}
25.11.7: specialized.construct - \tcode{construct_at}
25.11.8: specialized.destroy - \tcode{destroy}
25.12: alg.c.library - C library algorithms
26: numerics - Numerics library
26.1: numerics.general - General
26.2: numeric.requirements - Numeric type requirements
26.3: cfenv - The floating-point environment
26.3.1: cfenv.syn - Header \tcode{<cfenv>} synopsis
26.4: complex.numbers - Complex numbers
26.4.1: complex.syn - Header \tcode{<complex>} synopsis
26.4.2: complex - Class template \tcode{complex}
26.4.3: complex.special - Specializations
26.4.4: complex.members - Member functions
26.4.5: complex.member.ops - Member operators
26.4.6: complex.ops - Non-member operations
26.4.7: complex.value.ops - Value operations
26.4.8: complex.transcendentals - Transcendentals
26.4.9: cmplx.over - Additional overloads
26.4.10: complex.literals - Suffixes for complex number literals
26.5: bit - Bit manipulation
26.5.1: bit.general - General
26.5.2: bit.syn - Header \tcode{<bit>} synopsis
26.5.3: bit.cast - Function template \tcode{bit_cast}
26.5.4: bit.pow.two - Integral powers of 2
26.5.5: bit.rotate - Rotating
26.5.6: bit.count - Counting
26.5.7: bit.endian - Endian
26.6: rand - Random number generation
26.6.1: rand.synopsis - Header \tcode{<random>} synopsis
26.6.2: rand.req - Requirements
26.6.2.1: rand.req.genl - General requirements
26.6.2.2: rand.req.seedseq - Seed sequence requirements
26.6.2.3: rand.req.urng - Uniform random bit generator requirements
26.6.2.4: rand.req.eng - Random number engine requirements
26.6.2.5: rand.req.adapt - Random number engine adaptor requirements
26.6.2.6: rand.req.dist - Random number distribution requirements
26.6.3: rand.eng - Random number engine class templates
26.6.3.1: rand.eng.lcong - Class template \tcode{linear_congruential_engine}
26.6.3.2: rand.eng.mers - Class template \tcode{mersenne_twister_engine}
26.6.3.3: rand.eng.sub - Class template \tcode{subtract_with_carry_engine}
26.6.4: rand.adapt - Random number engine adaptor class templates
26.6.4.1: rand.adapt.general - In general
26.6.4.2: rand.adapt.disc - Class template \tcode{discard_block_engine}
26.6.4.3: rand.adapt.ibits - Class template \tcode{independent_bits_engine}
26.6.4.4: rand.adapt.shuf - Class template \tcode{shuffle_order_engine}
26.6.5: rand.predef - Engines and engine adaptors with predefined parameters
26.6.6: rand.device - Class \tcode{random_device}
26.6.7: rand.util - Utilities
26.6.7.1: rand.util.seedseq - Class \tcode{seed_seq}
26.6.7.2: rand.util.canonical - Function template \tcode{generate_canonical}
26.6.8: rand.dist - Random number distribution class templates
26.6.8.1: rand.dist.general - In general
26.6.8.2: rand.dist.uni - Uniform distributions
26.6.8.2.1: rand.dist.uni.int - Class template \tcode{uniform_int_distribution}
26.6.8.2.2: rand.dist.uni.real - Class template \tcode{uniform_real_distribution}
26.6.8.3: rand.dist.bern - Bernoulli distributions
26.6.8.3.1: rand.dist.bern.bernoulli - Class \tcode{bernoulli_distribution}
26.6.8.3.2: rand.dist.bern.bin - Class template \tcode{binomial_distribution}
26.6.8.3.3: rand.dist.bern.geo - Class template \tcode{geometric_distribution}
26.6.8.3.4: rand.dist.bern.negbin - Class template \tcode{negative_binomial_distribution}
26.6.8.4: rand.dist.pois - Poisson distributions
26.6.8.4.1: rand.dist.pois.poisson - Class template \tcode{poisson_distribution}
26.6.8.4.2: rand.dist.pois.exp - Class template \tcode{exponential_distribution}
26.6.8.4.3: rand.dist.pois.gamma - Class template \tcode{gamma_distribution}
26.6.8.4.4: rand.dist.pois.weibull - Class template \tcode{weibull_distribution}
26.6.8.4.5: rand.dist.pois.extreme - Class template \tcode{extreme_value_distribution}
26.6.8.5: rand.dist.norm - Normal distributions
26.6.8.5.1: rand.dist.norm.normal - Class template \tcode{normal_distribution}
26.6.8.5.2: rand.dist.norm.lognormal - Class template \tcode{lognormal_distribution}
26.6.8.5.3: rand.dist.norm.chisq - Class template \tcode{chi_squared_distribution}
26.6.8.5.4: rand.dist.norm.cauchy - Class template \tcode{cauchy_distribution}
26.6.8.5.5: rand.dist.norm.f - Class template \tcode{fisher_f_distribution}
26.6.8.5.6: rand.dist.norm.t - Class template \tcode{student_t_distribution}
26.6.8.6: rand.dist.samp - Sampling distributions
26.6.8.6.1: rand.dist.samp.discrete - Class template \tcode{discrete_distribution}
26.6.8.6.2: rand.dist.samp.pconst - Class template \tcode{piecewise_constant_distribution}
26.6.8.6.3: rand.dist.samp.plinear - Class template \tcode{piecewise_linear_distribution}
26.6.9: c.math.rand - Low-quality random number generation
26.7: numarray - Numeric arrays
26.7.1: valarray.syn - Header \tcode{<valarray>} synopsis
26.7.2: template.valarray - Class template \tcode{valarray}
26.7.2.1: template.valarray.overview - Overview
26.7.2.2: valarray.cons - Constructors
26.7.2.3: valarray.assign - Assignment
26.7.2.4: valarray.access - Element access
26.7.2.5: valarray.sub - Subset operations
26.7.2.6: valarray.unary - Unary operators
26.7.2.7: valarray.cassign - Compound assignment
26.7.2.8: valarray.members - Member functions
26.7.3: valarray.nonmembers - \tcode{valarray} non-member operations
26.7.3.1: valarray.binary - Binary operators
26.7.3.2: valarray.comparison - Logical operators
26.7.3.3: valarray.transcend - Transcendentals
26.7.3.4: valarray.special - Specialized algorithms
26.7.4: class.slice - Class \tcode{slice}
26.7.4.1: class.slice.overview - Overview
26.7.4.2: cons.slice - Constructors
26.7.4.3: slice.access - Access functions
26.7.4.4: slice.ops - Operators
26.7.5: template.slice.array - Class template \tcode{slice_array}
26.7.5.1: template.slice.array.overview - Overview
26.7.5.2: slice.arr.assign - Assignment
26.7.5.3: slice.arr.comp.assign - Compound assignment
26.7.5.4: slice.arr.fill - Fill function
26.7.6: class.gslice - The \tcode{gslice} class
26.7.6.1: class.gslice.overview - Overview
26.7.6.2: gslice.cons - Constructors
26.7.6.3: gslice.access - Access functions
26.7.7: template.gslice.array - Class template \tcode{gslice_array}
26.7.7.1: template.gslice.array.overview - Overview
26.7.7.2: gslice.array.assign - Assignment
26.7.7.3: gslice.array.comp.assign - Compound assignment
26.7.7.4: gslice.array.fill - Fill function
26.7.8: template.mask.array - Class template \tcode{mask_array}
26.7.8.1: template.mask.array.overview - Overview
26.7.8.2: mask.array.assign - Assignment
26.7.8.3: mask.array.comp.assign - Compound assignment
26.7.8.4: mask.array.fill - Fill function
26.7.9: template.indirect.array - Class template \tcode{indirect_array}
26.7.9.1: template.indirect.array.overview - Overview
26.7.9.2: indirect.array.assign - Assignment
26.7.9.3: indirect.array.comp.assign - Compound assignment
26.7.9.4: indirect.array.fill - Fill function
26.7.10: valarray.range - \tcode{valarray} range access
26.8: c.math - Mathematical functions for floating-point types
26.8.1: cmath.syn - Header \tcode{<cmath>} synopsis
26.8.2: c.math.abs - Absolute values
26.8.3: c.math.hypot3 - Three-dimensional hypotenuse
26.8.4: c.math.lerp - Linear interpolation
26.8.5: c.math.fpclass - Classification / comparison functions
26.8.6: sf.cmath - Mathematical special functions
26.8.6.1: sf.cmath.assoc.laguerre - Associated Laguerre polynomials
26.8.6.2: sf.cmath.assoc.legendre - Associated Legendre functions
26.8.6.3: sf.cmath.beta - Beta function
26.8.6.4: sf.cmath.comp.ellint.1 - Complete elliptic integral of the first kind
26.8.6.5: sf.cmath.comp.ellint.2 - Complete elliptic integral of the second kind
26.8.6.6: sf.cmath.comp.ellint.3 - Complete elliptic integral of the third kind
26.8.6.7: sf.cmath.cyl.bessel.i - Regular modified cylindrical Bessel functions
26.8.6.8: sf.cmath.cyl.bessel.j - Cylindrical Bessel functions of the first kind
26.8.6.9: sf.cmath.cyl.bessel.k - Irregular modified cylindrical Bessel functions
26.8.6.10: sf.cmath.cyl.neumann - Cylindrical Neumann functions
26.8.6.11: sf.cmath.ellint.1 - Incomplete elliptic integral of the first kind
26.8.6.12: sf.cmath.ellint.2 - Incomplete elliptic integral of the second kind
26.8.6.13: sf.cmath.ellint.3 - Incomplete elliptic integral of the third kind
26.8.6.14: sf.cmath.expint - Exponential integral
26.8.6.15: sf.cmath.hermite - Hermite polynomials
26.8.6.16: sf.cmath.laguerre - Laguerre polynomials
26.8.6.17: sf.cmath.legendre - Legendre polynomials
26.8.6.18: sf.cmath.riemann.zeta - Riemann zeta function
26.8.6.19: sf.cmath.sph.bessel - Spherical Bessel functions of the first kind
26.8.6.20: sf.cmath.sph.legendre - Spherical associated Legendre functions
26.8.6.21: sf.cmath.sph.neumann - Spherical Neumann functions
26.9: numbers - Numbers
26.9.1: numbers.syn - Header \tcode{<numbers>} synopsis
26.9.2: math.constants - Mathematical constants
27: time - Time library
27.1: time.general - General
27.2: time.syn - Header \tcode{<chrono>} synopsis
27.3: time.clock.req - \oldconcept{Clock} requirements
27.4: time.traits - Time-related traits
27.4.1: time.traits.is.fp - \tcode{treat_as_floating_point}
27.4.2: time.traits.duration.values - \tcode{duration_values}
27.4.3: time.traits.specializations - Specializations of \tcode{common_type}
27.4.4: time.traits.is.clock - Class template \tcode{is_clock}
27.5: time.duration - Class template \tcode{duration}
27.5.1: time.duration.cons - Constructors
27.5.2: time.duration.observer - Observer
27.5.3: time.duration.arithmetic - Arithmetic
27.5.4: time.duration.special - Special values
27.5.5: time.duration.nonmember - Non-member arithmetic
27.5.6: time.duration.comparisons - Comparisons
27.5.7: time.duration.cast - Conversions
27.5.8: time.duration.literals - Suffixes for duration literals
27.5.9: time.duration.alg - Algorithms
27.5.10: time.duration.io - I/O
27.6: time.point - Class template \tcode{time_point}
27.6.1: time.point.cons - Constructors
27.6.2: time.point.observer - Observer
27.6.3: time.point.arithmetic - Arithmetic
27.6.4: time.point.special - Special values
27.6.5: time.point.nonmember - Non-member arithmetic
27.6.6: time.point.comparisons - Comparisons
27.6.7: time.point.cast - Conversions
27.7: time.clock - Clocks
27.7.1: time.clock.system - Class \tcode{system_clock}
27.7.1.1: time.clock.system.overview - Overview
27.7.1.2: time.clock.system.members - Members
27.7.1.3: time.clock.system.nonmembers - Non-member functions
27.7.2: time.clock.utc - Class \tcode{utc_clock}
27.7.2.1: time.clock.utc.overview - Overview
27.7.2.2: time.clock.utc.members - Member functions
27.7.2.3: time.clock.utc.nonmembers - Non-member functions
27.7.3: time.clock.tai - Class \tcode{tai_clock}
27.7.3.1: time.clock.tai.overview - Overview
27.7.3.2: time.clock.tai.members - Member functions
27.7.3.3: time.clock.tai.nonmembers - Non-member functions
27.7.4: time.clock.gps - Class \tcode{gps_clock}
27.7.4.1: time.clock.gps.overview - Overview
27.7.4.2: time.clock.gps.members - Member functions
27.7.4.3: time.clock.gps.nonmembers - Non-member functions
27.7.5: time.clock.file - Type \tcode{file_clock}
27.7.5.1: time.clock.file.overview - Overview
27.7.5.2: time.clock.file.members - Member functions
27.7.5.3: time.clock.file.nonmembers - Non-member functions
27.7.6: time.clock.steady - Class \tcode{steady_clock}
27.7.7: time.clock.hires - Class \tcode{high_resolution_clock}
27.7.8: time.clock.local - Local time
27.7.9: time.clock.cast - \tcode{time_point} conversions
27.7.9.1: time.clock.conv - Class template \tcode{clock_time_conversion}
27.7.9.2: time.clock.cast.id - Identity conversions
27.7.9.3: time.clock.cast.sys.utc - Conversions between \tcode{system_clock} and \tcode{utc_clock}
27.7.9.4: time.clock.cast.sys - Conversions between \tcode{system_clock} and other clocks
27.7.9.5: time.clock.cast.utc - Conversions between \tcode{utc_clock} and other clocks
27.7.9.6: time.clock.cast.fn - Function template \tcode{clock_cast}
27.8: time.cal - The civil calendar
27.8.1: time.cal.general - In general
27.8.2: time.cal.last - Class \tcode{last_spec}
27.8.3: time.cal.day - Class \tcode{day}
27.8.3.1: time.cal.day.overview - Overview
27.8.3.2: time.cal.day.members - Member functions
27.8.3.3: time.cal.day.nonmembers - Non-member functions
27.8.4: time.cal.month - Class \tcode{month}
27.8.4.1: time.cal.month.overview - Overview
27.8.4.2: time.cal.month.members - Member functions
27.8.4.3: time.cal.month.nonmembers - Non-member functions
27.8.5: time.cal.year - Class \tcode{year}
27.8.5.1: time.cal.year.overview - Overview
27.8.5.2: time.cal.year.members - Member functions
27.8.5.3: time.cal.year.nonmembers - Non-member functions
27.8.6: time.cal.wd - Class \tcode{weekday}
27.8.6.1: time.cal.wd.overview - Overview
27.8.6.2: time.cal.wd.members - Member functions
27.8.6.3: time.cal.wd.nonmembers - Non-member functions
27.8.7: time.cal.wdidx - Class \tcode{weekday_indexed}
27.8.7.1: time.cal.wdidx.overview - Overview
27.8.7.2: time.cal.wdidx.members - Member functions
27.8.7.3: time.cal.wdidx.nonmembers - Non-member functions
27.8.8: time.cal.wdlast - Class \tcode{weekday_last}
27.8.8.1: time.cal.wdlast.overview - Overview
27.8.8.2: time.cal.wdlast.members - Member functions
27.8.8.3: time.cal.wdlast.nonmembers - Non-member functions
27.8.9: time.cal.md - Class \tcode{month_day}
27.8.9.1: time.cal.md.overview - Overview
27.8.9.2: time.cal.md.members - Member functions
27.8.9.3: time.cal.md.nonmembers - Non-member functions
27.8.10: time.cal.mdlast - Class \tcode{month_day_last}
27.8.11: time.cal.mwd - Class \tcode{month_weekday}
27.8.11.1: time.cal.mwd.overview - Overview
27.8.11.2: time.cal.mwd.members - Member functions
27.8.11.3: time.cal.mwd.nonmembers - Non-member functions
27.8.12: time.cal.mwdlast - Class \tcode{month_weekday_last}
27.8.12.1: time.cal.mwdlast.overview - Overview
27.8.12.2: time.cal.mwdlast.members - Member functions
27.8.12.3: time.cal.mwdlast.nonmembers - Non-member functions
27.8.13: time.cal.ym - Class \tcode{year_month}
27.8.13.1: time.cal.ym.overview - Overview
27.8.13.2: time.cal.ym.members - Member functions
27.8.13.3: time.cal.ym.nonmembers - Non-member functions
27.8.14: time.cal.ymd - Class \tcode{year_month_day}
27.8.14.1: time.cal.ymd.overview - Overview
27.8.14.2: time.cal.ymd.members - Member functions
27.8.14.3: time.cal.ymd.nonmembers - Non-member functions
27.8.15: time.cal.ymdlast - Class \tcode{year_month_day_last}
27.8.15.1: time.cal.ymdlast.overview - Overview
27.8.15.2: time.cal.ymdlast.members - Member functions
27.8.15.3: time.cal.ymdlast.nonmembers - Non-member functions
27.8.16: time.cal.ymwd - Class \tcode{year_month_weekday}
27.8.16.1: time.cal.ymwd.overview - Overview
27.8.16.2: time.cal.ymwd.members - Member functions
27.8.16.3: time.cal.ymwd.nonmembers - Non-member functions
27.8.17: time.cal.ymwdlast - Class \tcode{year_month_weekday_last}
27.8.17.1: time.cal.ymwdlast.overview - Overview
27.8.17.2: time.cal.ymwdlast.members - Member functions
27.8.17.3: time.cal.ymwdlast.nonmembers - Non-member functions
27.8.18: time.cal.operators - Conventional syntax operators
27.9: time.hms - Class template \tcode{hh_mm_ss}
27.9.1: time.hms.overview - Overview
27.9.2: time.hms.members - Members
27.9.3: time.hms.nonmembers - Non-members
27.10: time.12 - 12/24 hours functions
27.11: time.zone - Time zones
27.11.1: time.zone.general - In general
27.11.2: time.zone.db - Time zone database
27.11.2.1: time.zone.db.tzdb - Class \tcode{tzdb}
27.11.2.2: time.zone.db.list - Class \tcode{tzdb_list}
27.11.2.3: time.zone.db.access - Time zone database access
27.11.2.4: time.zone.db.remote - Remote time zone database support
27.11.3: time.zone.exception - Exception classes
27.11.3.1: time.zone.exception.nonexist - Class \tcode{nonexistent_local_time}
27.11.3.2: time.zone.exception.ambig - Class \tcode{ambiguous_local_time}
27.11.4: time.zone.info - Information classes
27.11.4.1: time.zone.info.sys - Class \tcode{sys_info}
27.11.4.2: time.zone.info.local - Class \tcode{local_info}
27.11.5: time.zone.timezone - Class \tcode{time_zone}
27.11.5.1: time.zone.overview - Overview
27.11.5.2: time.zone.members - Member functions
27.11.5.3: time.zone.nonmembers - Non-member functions
27.11.6: time.zone.zonedtraits - Class template \tcode{zoned_traits}
27.11.7: time.zone.zonedtime - Class template \tcode{zoned_time}
27.11.7.1: time.zone.zonedtime.overview - Overview
27.11.7.2: time.zone.zonedtime.ctor - Constructors
27.11.7.3: time.zone.zonedtime.members - Member functions
27.11.7.4: time.zone.zonedtime.nonmembers - Non-member functions
27.11.8: time.zone.leap - Class \tcode{leap_second}
27.11.8.1: time.zone.leap.overview - Overview
27.11.8.2: time.zone.leap.members - Member functions
27.11.8.3: time.zone.leap.nonmembers - Non-member functions
27.11.9: time.zone.link - Class \tcode{time_zone_link}
27.11.9.1: time.zone.link.overview - Overview
27.11.9.2: time.zone.link.members - Member functions
27.11.9.3: time.zone.link.nonmembers - Non-member functions
27.12: time.format - Formatting
27.13: time.parse - Parsing
27.14: ctime.syn - Header \tcode{<ctime>} synopsis
28: localization - Localization library
28.1: localization.general - General
28.2: locale.syn - Header \tcode{<locale>} synopsis
28.3: locales - Locales
28.3.1: locale - Class \tcode{locale}
28.3.1.1: locale.types - Types
28.3.1.1.1: locale.category - Type \tcode{locale::category}
28.3.1.1.2: locale.facet - Class \tcode{locale::facet}
28.3.1.1.3: locale.id - Class \tcode{locale::id}
28.3.1.2: locale.cons - Constructors and destructor
28.3.1.3: locale.members - Members
28.3.1.4: locale.operators - Operators
28.3.1.5: locale.statics - Static members
28.3.2: locale.global.templates - \tcode{locale} globals
28.3.3: locale.convenience - Convenience interfaces
28.3.3.1: classification - Character classification
28.3.3.2: conversions - Conversions
28.3.3.2.1: conversions.character - Character conversions
28.4: locale.categories - Standard \tcode{locale} categories
28.4.1: category.ctype - The \tcode{ctype} category
28.4.1.1: locale.ctype - Class template \tcode{ctype}
28.4.1.1.1: locale.ctype.members - \tcode{ctype} members
28.4.1.1.2: locale.ctype.virtuals - \tcode{ctype} virtual functions
28.4.1.2: locale.ctype.byname - Class template \tcode{ctype_byname}
28.4.1.3: facet.ctype.special - \tcode{ctype<char>} specialization
28.4.1.3.1: facet.ctype.char.dtor - Destructor
28.4.1.3.2: facet.ctype.char.members - Members
28.4.1.3.3: facet.ctype.char.statics - Static members
28.4.1.3.4: facet.ctype.char.virtuals - Virtual functions
28.4.1.4: locale.codecvt - Class template \tcode{codecvt}
28.4.1.4.1: locale.codecvt.members - Members
28.4.1.4.2: locale.codecvt.virtuals - Virtual functions
28.4.1.5: locale.codecvt.byname - Class template \tcode{codecvt_byname}
28.4.2: category.numeric - The numeric category
28.4.2.1: locale.num.get - Class template \tcode{num_get}
28.4.2.1.1: facet.num.get.members - Members
28.4.2.1.2: facet.num.get.virtuals - Virtual functions
28.4.2.2: locale.nm.put - Class template \tcode{num_put}
28.4.2.2.1: facet.num.put.members - Members
28.4.2.2.2: facet.num.put.virtuals - Virtual functions
28.4.3: facet.numpunct - The numeric punctuation facet
28.4.3.1: locale.numpunct - Class template \tcode{numpunct}
28.4.3.1.1: facet.numpunct.members - Members
28.4.3.1.2: facet.numpunct.virtuals - Virtual functions
28.4.3.2: locale.numpunct.byname - Class template \tcode{numpunct_byname}
28.4.4: category.collate - The collate category
28.4.4.1: locale.collate - Class template \tcode{collate}
28.4.4.1.1: locale.collate.members - Members
28.4.4.1.2: locale.collate.virtuals - Virtual functions
28.4.4.2: locale.collate.byname - Class template \tcode{collate_byname}
28.4.5: category.time - The time category
28.4.5.1: locale.time.get - Class template \tcode{time_get}
28.4.5.1.1: locale.time.get.members - Members
28.4.5.1.2: locale.time.get.virtuals - Virtual functions
28.4.5.2: locale.time.get.byname - Class template \tcode{time_get_byname}
28.4.5.3: locale.time.put - Class template \tcode{time_put}
28.4.5.3.1: locale.time.put.members - Members
28.4.5.3.2: locale.time.put.virtuals - Virtual functions
28.4.5.4: locale.time.put.byname - Class template \tcode{time_put_byname}
28.4.6: category.monetary - The monetary category
28.4.6.1: locale.money.get - Class template \tcode{money_get}
28.4.6.1.1: locale.money.get.members - Members
28.4.6.1.2: locale.money.get.virtuals - Virtual functions
28.4.6.2: locale.money.put - Class template \tcode{money_put}
28.4.6.2.1: locale.money.put.members - Members
28.4.6.2.2: locale.money.put.virtuals - Virtual functions
28.4.6.3: locale.moneypunct - Class template \tcode{moneypunct}
28.4.6.3.1: locale.moneypunct.members - Members
28.4.6.3.2: locale.moneypunct.virtuals - Virtual functions
28.4.6.4: locale.moneypunct.byname - Class template \tcode{moneypunct_byname}
28.4.7: category.messages - The message retrieval category
28.4.7.1: locale.messages - Class template \tcode{messages}
28.4.7.1.1: locale.messages.members - Members
28.4.7.1.2: locale.messages.virtuals - Virtual functions
28.4.7.2: locale.messages.byname - Class template \tcode{messages_byname}
28.5: c.locales - C library locales
28.5.1: clocale.syn - Header \tcode{<clocale>} synopsis
29: input.output - Input/output library
29.1: input.output.general - General
29.2: iostreams.requirements - Iostreams requirements
29.2.1: iostream.limits.imbue - Imbue limitations
29.2.2: iostreams.limits.pos - Positioning type limitations
29.2.3: iostreams.threadsafety - Thread safety
29.3: iostream.forward - Forward declarations
29.3.1: iosfwd.syn - Header \tcode{<iosfwd>} synopsis
29.3.2: iostream.forward.overview - Overview
29.4: iostream.objects - Standard iostream objects
29.4.1: iostream.syn - Header \tcode{<iostream>} synopsis
29.4.2: iostream.objects.overview - Overview
29.4.3: narrow.stream.objects - Narrow stream objects
29.4.4: wide.stream.objects - Wide stream objects
29.5: iostreams.base - Iostreams base classes
29.5.1: ios.syn - Header \tcode{<ios>} synopsis
29.5.2: stream.types - Types
29.5.3: ios.base - Class \tcode{ios_base}
29.5.3.1: ios.types - Types
29.5.3.1.1: ios.failure - Class \tcode{ios_base::failure}
29.5.3.1.2: ios.fmtflags - Type \tcode{ios_base::fmtflags}
29.5.3.1.3: ios.iostate - Type \tcode{ios_base::iostate}
29.5.3.1.4: ios.openmode - Type \tcode{ios_base::openmode}
29.5.3.1.5: ios.seekdir - Type \tcode{ios_base::seekdir}
29.5.3.1.6: ios.init - Class \tcode{ios_base::Init}
29.5.3.2: fmtflags.state - State functions
29.5.3.3: ios.base.locales - Functions
29.5.3.4: ios.members.static - Static members
29.5.3.5: ios.base.storage - Storage functions
29.5.3.6: ios.base.callback - Callbacks
29.5.3.7: ios.base.cons - Constructors and destructor
29.5.4: fpos - Class template \tcode{fpos}
29.5.4.1: fpos.members - Members
29.5.4.2: fpos.operations - Requirements
29.5.5: ios - Class template \tcode{basic_ios}
29.5.5.1: ios.overview - Overview
29.5.5.2: basic.ios.cons - Constructors
29.5.5.3: basic.ios.members - Member functions
29.5.5.4: iostate.flags - Flags functions
29.5.6: std.ios.manip - \tcode{ios_base} manipulators
29.5.6.1: fmtflags.manip - \tcode{fmtflags} manipulators
29.5.6.2: adjustfield.manip - \tcode{adjustfield} manipulators
29.5.6.3: basefield.manip - \tcode{basefield} manipulators
29.5.6.4: floatfield.manip - \tcode{floatfield} manipulators
29.5.7: error.reporting - Error reporting
29.6: stream.buffers - Stream buffers
29.6.1: streambuf.syn - Header \tcode{<streambuf>} synopsis
29.6.2: streambuf.reqts - Stream buffer requirements
29.6.3: streambuf - Class template \tcode{basic_streambuf}
29.6.3.1: streambuf.cons - Constructors
29.6.3.2: streambuf.members - Public member functions
29.6.3.2.1: streambuf.locales - Locales
29.6.3.2.2: streambuf.buffer - Buffer management and positioning
29.6.3.2.3: streambuf.pub.get - Get area
29.6.3.2.4: streambuf.pub.pback - Putback
29.6.3.2.5: streambuf.pub.put - Put area
29.6.3.3: streambuf.protected - Protected member functions
29.6.3.3.1: streambuf.assign - Assignment
29.6.3.3.2: streambuf.get.area - Get area access
29.6.3.3.3: streambuf.put.area - Put area access
29.6.3.4: streambuf.virtuals - Virtual functions
29.6.3.4.1: streambuf.virt.locales - Locales
29.6.3.4.2: streambuf.virt.buffer - Buffer management and positioning
29.6.3.4.3: streambuf.virt.get - Get area
29.6.3.4.4: streambuf.virt.pback - Putback
29.6.3.4.5: streambuf.virt.put - Put area
29.7: iostream.format - Formatting and manipulators
29.7.1: istream.syn - Header \tcode{<istream>} synopsis
29.7.2: ostream.syn - Header \tcode{<ostream>} synopsis
29.7.3: iomanip.syn - Header \tcode{<iomanip>} synopsis
29.7.4: input.streams - Input streams
29.7.4.1: istream - Class template \tcode{basic_istream}
29.7.4.1.1: istream.cons - Constructors
29.7.4.1.2: istream.assign - Assignment and swap
29.7.4.1.3: istream.sentry - Class \tcode{basic_istream::sentry}
29.7.4.2: istream.formatted - Formatted input functions
29.7.4.2.1: istream.formatted.reqmts - Common requirements
29.7.4.2.2: istream.formatted.arithmetic - Arithmetic extractors
29.7.4.2.3: istream.extractors - \tcode{basic_istream::operator>>}
29.7.4.3: istream.unformatted - Unformatted input functions
29.7.4.4: istream.manip - Standard \tcode{basic_istream} manipulators
29.7.4.5: istream.rvalue - Rvalue stream extraction
29.7.4.6: iostreamclass - Class template \tcode{basic_iostream}
29.7.4.6.1: iostream.cons - Constructors
29.7.4.6.2: iostream.dest - Destructor
29.7.4.6.3: iostream.assign - Assignment and swap
29.7.5: output.streams - Output streams
29.7.5.1: ostream - Class template \tcode{basic_ostream}
29.7.5.1.1: ostream.cons - Constructors
29.7.5.1.2: ostream.assign - Assignment and swap
29.7.5.1.3: ostream.sentry - Class \tcode{basic_ostream::sentry}
29.7.5.1.4: ostream.seeks - Seek members
29.7.5.2: ostream.formatted - Formatted output functions
29.7.5.2.1: ostream.formatted.reqmts - Common requirements
29.7.5.2.2: ostream.inserters.arithmetic - Arithmetic inserters
29.7.5.2.3: ostream.inserters - \tcode{basic_ostream::operator<<}
29.7.5.2.4: ostream.inserters.character - Character inserter function templates
29.7.5.3: ostream.unformatted - Unformatted output functions
29.7.5.4: ostream.manip - Standard manipulators
29.7.5.5: ostream.rvalue - Rvalue stream insertion
29.7.6: std.manip - Standard manipulators
29.7.7: ext.manip - Extended manipulators
29.7.8: quoted.manip - Quoted manipulators
29.8: string.streams - String-based streams
29.8.1: sstream.syn - Header \tcode{<sstream>} synopsis
29.8.2: stringbuf - Class template \tcode{basic_stringbuf}
29.8.2.1: stringbuf.cons - Constructors
29.8.2.2: stringbuf.assign - Assignment and swap
29.8.2.3: stringbuf.members - Member functions
29.8.2.4: stringbuf.virtuals - Overridden virtual functions
29.8.3: istringstream - Class template \tcode{basic_istringstream}
29.8.3.1: istringstream.cons - Constructors
29.8.3.2: istringstream.assign - Assignment and swap
29.8.3.3: istringstream.members - Member functions
29.8.4: ostringstream - Class template \tcode{basic_ostringstream}
29.8.4.1: ostringstream.cons - Constructors
29.8.4.2: ostringstream.assign - Assignment and swap
29.8.4.3: ostringstream.members - Member functions
29.8.5: stringstream - Class template \tcode{basic_stringstream}
29.8.5.1: stringstream.cons - Constructors
29.8.5.2: stringstream.assign - Assignment and swap
29.8.5.3: stringstream.members - Member functions
29.9: file.streams - File-based streams
29.9.1: fstream.syn - Header \tcode{<fstream>} synopsis
29.9.2: filebuf - Class template \tcode{basic_filebuf}
29.9.2.1: filebuf.cons - Constructors
29.9.2.2: filebuf.assign - Assignment and swap
29.9.2.3: filebuf.members - Member functions
29.9.2.4: filebuf.virtuals - Overridden virtual functions
29.9.3: ifstream - Class template \tcode{basic_ifstream}
29.9.3.1: ifstream.cons - Constructors
29.9.3.2: ifstream.assign - Assignment and swap
29.9.3.3: ifstream.members - Member functions
29.9.4: ofstream - Class template \tcode{basic_ofstream}
29.9.4.1: ofstream.cons - Constructors
29.9.4.2: ofstream.assign - Assignment and swap
29.9.4.3: ofstream.members - Member functions
29.9.5: fstream - Class template \tcode{basic_fstream}
29.9.5.1: fstream.cons - Constructors
29.9.5.2: fstream.assign - Assignment and swap
29.9.5.3: fstream.members - Member functions
29.10: syncstream - Synchronized output streams
29.10.1: syncstream.syn - Header \tcode{<syncstream>} synopsis
29.10.2: syncstream.syncbuf - Class template \tcode{basic_syncbuf}
29.10.2.1: syncstream.syncbuf.overview - Overview
29.10.2.2: syncstream.syncbuf.cons - Construction and destruction
29.10.2.3: syncstream.syncbuf.assign - Assignment and swap
29.10.2.4: syncstream.syncbuf.members - Member functions
29.10.2.5: syncstream.syncbuf.virtuals - Overridden virtual functions
29.10.2.6: syncstream.syncbuf.special - Specialized algorithms
29.10.3: syncstream.osyncstream - Class template \tcode{basic_osyncstream}
29.10.3.1: syncstream.osyncstream.overview - Overview
29.10.3.2: syncstream.osyncstream.cons - Construction and destruction
29.10.3.3: syncstream.osyncstream.members - Member functions
29.11: filesystems - File systems
29.11.1: fs.general - General
29.11.2: fs.conformance - Conformance
29.11.2.1: fs.conform.9945 - POSIX conformance
29.11.2.2: fs.conform.os - Operating system dependent behavior conformance
29.11.2.3: fs.race.behavior - File system race behavior
29.11.3: fs.norm.ref - Normative references
29.11.4: fs.req - Requirements
29.11.4.1: fs.req.namespace - Namespaces and headers
29.11.5: fs.filesystem.syn - Header \tcode{<filesystem>} synopsis
29.11.6: fs.err.report - Error reporting
29.11.7: fs.class.path - Class \tcode{path}
29.11.7.1: fs.path.generic - Generic pathname format
29.11.7.2: fs.path.cvt - Conversions
29.11.7.2.1: fs.path.fmt.cvt - Argument format conversions
29.11.7.2.2: fs.path.type.cvt - Type and encoding conversions
29.11.7.3: fs.path.req - Requirements
29.11.7.4: fs.path.member - Members
29.11.7.4.1: fs.path.construct - Constructors
29.11.7.4.2: fs.path.assign - Assignments
29.11.7.4.3: fs.path.append - Appends
29.11.7.4.4: fs.path.concat - Concatenation
29.11.7.4.5: fs.path.modifiers - Modifiers
29.11.7.4.6: fs.path.native.obs - Native format observers
29.11.7.4.7: fs.path.generic.obs - Generic format observers
29.11.7.4.8: fs.path.compare - Compare
29.11.7.4.9: fs.path.decompose - Decomposition
29.11.7.4.10: fs.path.query - Query
29.11.7.4.11: fs.path.gen - Generation
29.11.7.5: fs.path.itr - Iterators
29.11.7.6: fs.path.io - Inserter and extractor
29.11.7.7: fs.path.nonmember - Non-member functions
29.11.8: fs.class.filesystem.error - Class \tcode{filesystem_error}
29.11.8.1: fs.filesystem.error.members - Members
29.11.9: fs.enum - Enumerations
29.11.9.1: fs.enum.path.format - Enum \tcode{path::format}
29.11.9.2: fs.enum.file.type - Enum class \tcode{file_type}
29.11.9.3: fs.enum.copy.opts - Enum class \tcode{copy_options}
29.11.9.4: fs.enum.perms - Enum class \tcode{perms}
29.11.9.5: fs.enum.perm.opts - Enum class \tcode{perm_options}
29.11.9.6: fs.enum.dir.opts - Enum class \tcode{directory_options}
29.11.10: fs.class.file.status - Class \tcode{file_status}
29.11.10.1: fs.file.status.cons - Constructors
29.11.10.2: fs.file.status.obs - Observers
29.11.10.3: fs.file.status.mods - Modifiers
29.11.11: fs.class.directory.entry - Class \tcode{directory_entry}
29.11.11.1: fs.dir.entry.cons - Constructors
29.11.11.2: fs.dir.entry.mods - Modifiers
29.11.11.3: fs.dir.entry.obs - Observers
29.11.12: fs.class.directory.iterator - Class \tcode{directory_iterator}
29.11.12.1: fs.dir.itr.members - Members
29.11.12.2: fs.dir.itr.nonmembers - Non-member functions
29.11.13: fs.class.rec.dir.itr - Class \tcode{recursive_directory_iterator}
29.11.13.1: fs.rec.dir.itr.members - Members
29.11.13.2: fs.rec.dir.itr.nonmembers - Non-member functions
29.11.14: fs.op.funcs - Filesystem operation functions
29.11.14.1: fs.op.absolute - Absolute
29.11.14.2: fs.op.canonical - Canonical
29.11.14.3: fs.op.copy - Copy
29.11.14.4: fs.op.copy.file - Copy file
29.11.14.5: fs.op.copy.symlink - Copy symlink
29.11.14.6: fs.op.create.directories - Create directories
29.11.14.7: fs.op.create.directory - Create directory
29.11.14.8: fs.op.create.dir.symlk - Create directory symlink
29.11.14.9: fs.op.create.hard.lk - Create hard link
29.11.14.10: fs.op.create.symlink - Create symlink
29.11.14.11: fs.op.current.path - Current path
29.11.14.12: fs.op.equivalent - Equivalent
29.11.14.13: fs.op.exists - Exists
29.11.14.14: fs.op.file.size - File size
29.11.14.15: fs.op.hard.lk.ct - Hard link count
29.11.14.16: fs.op.is.block.file - Is block file
29.11.14.17: fs.op.is.char.file - Is character file
29.11.14.18: fs.op.is.directory - Is directory
29.11.14.19: fs.op.is.empty - Is empty
29.11.14.20: fs.op.is.fifo - Is fifo
29.11.14.21: fs.op.is.other - Is other
29.11.14.22: fs.op.is.regular.file - Is regular file
29.11.14.23: fs.op.is.socket - Is socket
29.11.14.24: fs.op.is.symlink - Is symlink
29.11.14.25: fs.op.last.write.time - Last write time
29.11.14.26: fs.op.permissions - Permissions
29.11.14.27: fs.op.proximate - Proximate
29.11.14.28: fs.op.read.symlink - Read symlink
29.11.14.29: fs.op.relative - Relative
29.11.14.30: fs.op.remove - Remove
29.11.14.31: fs.op.remove.all - Remove all
29.11.14.32: fs.op.rename - Rename
29.11.14.33: fs.op.resize.file - Resize file
29.11.14.34: fs.op.space - Space
29.11.14.35: fs.op.status - Status
29.11.14.36: fs.op.status.known - Status known
29.11.14.37: fs.op.symlink.status - Symlink status
29.11.14.38: fs.op.temp.dir.path - Temporary directory path
29.11.14.39: fs.op.weakly.canonical - Weakly canonical
29.12: c.files - C library files
29.12.1: cstdio.syn - Header \tcode{<cstdio>} synopsis
29.12.2: cinttypes.syn - Header \tcode{<cinttypes>} synopsis
30: re - Regular expressions library
30.1: re.general - General
30.2: re.def - Definitions
30.3: re.req - Requirements
30.4: re.syn - Header \tcode{<regex>} synopsis
30.5: re.const - Namespace \tcode{std::regex_constants}
30.5.1: re.synopt - Bitmask type \tcode{syntax_option_type}
30.5.2: re.matchflag - Bitmask type \tcode{match_flag_type}
30.5.3: re.err - Implementation-defined \tcode{error_type}
30.6: re.badexp - Class \tcode{regex_error}
30.7: re.traits - Class template \tcode{regex_traits}
30.8: re.regex - Class template \tcode{basic_regex}
30.8.1: re.regex.construct - Constructors
30.8.2: re.regex.assign - Assignment
30.8.3: re.regex.operations - Constant operations
30.8.4: re.regex.locale - Locale
30.8.5: re.regex.swap - Swap
30.8.6: re.regex.nonmemb - Non-member functions
30.9: re.submatch - Class template \tcode{sub_match}
30.9.1: re.submatch.members - Members
30.9.2: re.submatch.op - Non-member operators
30.10: re.results - Class template \tcode{match_results}
30.10.1: re.results.const - Constructors
30.10.2: re.results.state - State
30.10.3: re.results.size - Size
30.10.4: re.results.acc - Element access
30.10.5: re.results.form - Formatting
30.10.6: re.results.all - Allocator
30.10.7: re.results.swap - Swap
30.10.8: re.results.nonmember - Non-member functions
30.11: re.alg - Regular expression algorithms
30.11.1: re.except - Exceptions
30.11.2: re.alg.match - \tcode{regex_match}
30.11.3: re.alg.search - \tcode{regex_search}
30.11.4: re.alg.replace - \tcode{regex_replace}
30.12: re.iter - Regular expression iterators
30.12.1: re.regiter - Class template \tcode{regex_iterator}
30.12.1.1: re.regiter.cnstr - Constructors
30.12.1.2: re.regiter.comp - Comparisons
30.12.1.3: re.regiter.deref - Indirection
30.12.1.4: re.regiter.incr - Increment
30.12.2: re.tokiter - Class template \tcode{regex_token_iterator}
30.12.2.1: re.tokiter.cnstr - Constructors
30.12.2.2: re.tokiter.comp - Comparisons
30.12.2.3: re.tokiter.deref - Indirection
30.12.2.4: re.tokiter.incr - Increment
30.13: re.grammar - Modified ECMAScript regular expression grammar
31: atomics - Atomic operations library
31.1: atomics.general - General
31.2: atomics.syn - Header \tcode{<atomic>} synopsis
31.3: atomics.alias - Type aliases
31.4: atomics.order - Order and consistency
31.5: atomics.lockfree - Lock-free property
31.6: atomics.wait - Waiting and notifying
31.7: atomics.ref.generic - Class template \tcode{atomic_ref}
31.7.1: atomics.ref.ops - Operations
31.7.2: atomics.ref.int - Specializations for integral types
31.7.3: atomics.ref.float - Specializations for floating-point types
31.7.4: atomics.ref.pointer - Partial specialization for pointers
31.8: atomics.types.generic - Class template \tcode{atomic}
31.8.1: atomics.types.operations - Operations on atomic types
31.8.2: atomics.types.int - Specializations for integers
31.8.3: atomics.types.float - Specializations for floating-point types
31.8.4: atomics.types.pointer - Partial specialization for pointers
31.8.5: atomics.types.memop - Member operators common to integers and pointers to objects
31.8.6: util.smartptr.atomic - Partial specializations for smart pointers
31.8.6.1: util.smartptr.atomic.shared - Partial specialization for \tcode{shared_ptr}
31.8.6.2: util.smartptr.atomic.weak - Partial specialization for \tcode{weak_ptr}
31.9: atomics.nonmembers - Non-member functions
31.10: atomics.flag - Flag type and operations
31.11: atomics.fences - Fences
32: thread - Thread support library
32.1: thread.general - General
32.2: thread.req - Requirements
32.2.1: thread.req.paramname - Template parameter names
32.2.2: thread.req.exception - Exceptions
32.2.3: thread.req.native - Native handles
32.2.4: thread.req.timing - Timing specifications
32.2.5: thread.req.lockable - Requirements for \oldconcept{Lockable} types
32.2.5.1: thread.req.lockable.general - In general
32.2.5.2: thread.req.lockable.basic - \oldconcept{BasicLockable} requirements
32.2.5.3: thread.req.lockable.req - \oldconcept{Lockable} requirements
32.2.5.4: thread.req.lockable.timed - \oldconcept{TimedLockable} requirements
32.3: thread.stoptoken - Stop tokens
32.3.1: thread.stoptoken.intro - Introduction
32.3.2: thread.stoptoken.syn - Header \tcode{<stop_token>} synopsis
32.3.3: stoptoken - Class \tcode{stop_token}
32.3.3.1: stoptoken.cons - Constructors, copy, and assignment
32.3.3.2: stoptoken.mem - Members
32.3.3.3: stoptoken.nonmembers - Non-member functions
32.3.4: stopsource - Class \tcode{stop_source}
32.3.4.1: stopsource.cons - Constructors, copy, and assignment
32.3.4.2: stopsource.mem - Members
32.3.4.3: stopsource.nonmembers - Non-member functions
32.3.5: stopcallback - Class template \tcode{stop_callback}
32.3.5.1: stopcallback.cons - Constructors and destructor
32.4: thread.threads - Threads
32.4.1: thread.syn - Header \tcode{<thread>} synopsis
32.4.2: thread.thread.class - Class \tcode{thread}
32.4.2.1: thread.thread.id - Class \tcode{thread::id}
32.4.2.2: thread.thread.constr - Constructors
32.4.2.3: thread.thread.destr - Destructor
32.4.2.4: thread.thread.assign - Assignment
32.4.2.5: thread.thread.member - Members
32.4.2.6: thread.thread.static - Static members
32.4.2.7: thread.thread.algorithm - Specialized algorithms
32.4.3: thread.jthread.class - Class \tcode{jthread}
32.4.3.1: thread.jthread.cons - Constructors, move, and assignment
32.4.3.2: thread.jthread.mem - Members
32.4.3.3: thread.jthread.stop - Stop token handling
32.4.3.4: thread.jthread.special - Specialized algorithms
32.4.3.5: thread.jthread.static - Static members
32.4.4: thread.thread.this - Namespace \tcode{this_thread}
32.5: thread.mutex - Mutual exclusion
32.5.1: mutex.syn - Header \tcode{<mutex>} synopsis
32.5.2: shared.mutex.syn - Header \tcode{<shared_mutex>} synopsis
32.5.3: thread.mutex.requirements - Mutex requirements
32.5.3.1: thread.mutex.requirements.general - In general
32.5.3.2: thread.mutex.requirements.mutex - Mutex types
32.5.3.2.1: thread.mutex.class - Class \tcode{mutex}
32.5.3.2.2: thread.mutex.recursive - Class \tcode{recursive_mutex}
32.5.3.3: thread.timedmutex.requirements - Timed mutex types
32.5.3.3.1: thread.timedmutex.class - Class \tcode{timed_mutex}
32.5.3.3.2: thread.timedmutex.recursive - Class \tcode{recursive_timed_mutex}
32.5.3.4: thread.sharedmutex.requirements - Shared mutex types
32.5.3.4.1: thread.sharedmutex.class - Class \tcode{shared_mutex}
32.5.3.5: thread.sharedtimedmutex.requirements - Shared timed mutex types
32.5.3.5.1: thread.sharedtimedmutex.class - Class \tcode{shared_timed_mutex}
32.5.4: thread.lock - Locks
32.5.4.1: thread.lock.guard - Class template \tcode{lock_guard}
32.5.4.2: thread.lock.scoped - Class template \tcode{scoped_lock}
32.5.4.3: thread.lock.unique - Class template \tcode{unique_lock}
32.5.4.3.1: thread.lock.unique.cons - Constructors, destructor, and assignment
32.5.4.3.2: thread.lock.unique.locking - Locking
32.5.4.3.3: thread.lock.unique.mod - Modifiers
32.5.4.3.4: thread.lock.unique.obs - Observers
32.5.4.4: thread.lock.shared - Class template \tcode{shared_lock}
32.5.4.4.1: thread.lock.shared.cons - Constructors, destructor, and assignment
32.5.4.4.2: thread.lock.shared.locking - Locking
32.5.4.4.3: thread.lock.shared.mod - Modifiers
32.5.4.4.4: thread.lock.shared.obs - Observers
32.5.5: thread.lock.algorithm - Generic locking algorithms
32.5.6: thread.once - Call once
32.5.6.1: thread.once.onceflag - Struct \tcode{once_flag}
32.5.6.2: thread.once.callonce - Function \tcode{call_once}
32.6: thread.condition - Condition variables
32.6.1: condition.variable.syn - Header \tcode{<condition_variable>} synopsis
32.6.2: thread.condition.nonmember - Non-member functions
32.6.3: thread.condition.condvar - Class \tcode{condition_variable}
32.6.4: thread.condition.condvarany - Class \tcode{condition_variable_any}
32.6.4.1: thread.condvarany.wait - Noninterruptible waits
32.6.4.2: thread.condvarany.intwait - Interruptible waits
32.7: thread.sema - Semaphore
32.7.1: semaphore.syn - Header \tcode{<semaphore>} synopsis
32.7.2: thread.sema.cnt - Class template \tcode{counting_semaphore}
32.8: thread.coord - Coordination types
32.8.1: thread.latch - Latches
32.8.1.1: latch.syn - Header \tcode{<latch>} synopsis
32.8.1.2: thread.latch.class - Class \tcode{latch}
32.8.2: thread.barrier - Barriers
32.8.2.1: barrier.syn - Header \tcode{<barrier>} synopsis
32.8.2.2: thread.barrier.class - Class template \tcode{barrier}
32.9: futures - Futures
32.9.1: futures.overview - Overview
32.9.2: future.syn - Header \tcode{<future>} synopsis
32.9.3: futures.errors - Error handling
32.9.4: futures.future.error - Class \tcode{future_error}
32.9.5: futures.state - Shared state
32.9.6: futures.promise - Class template \tcode{promise}
32.9.7: futures.unique.future - Class template \tcode{future}
32.9.8: futures.shared.future - Class template \tcode{shared_future}
32.9.9: futures.async - Function template \tcode{async}
32.9.10: futures.task - Class template \tcode{packaged_task}
32.9.10.1: futures.task.members - Member functions
32.9.10.2: futures.task.nonmembers - Globals
A: gram - Grammar summary
A.1: gram.key - Keywords
B: implimits - Implementation quantities
C: diff - Compatibility
C.1: diff.cpp17 - \Cpp{} and ISO \CppXVII{}
C.1.1: diff.cpp17.lex - \ref{lex}: lexical conventions
C.1.2: diff.cpp17.basic - \ref{basic}: basics
C.1.3: diff.cpp17.expr - \ref{expr}: expressions
C.1.4: diff.cpp17.dcl.dcl - \ref{dcl.dcl}: declarations
C.1.5: diff.cpp17.class - \ref{class}: classes
C.1.6: diff.cpp17.over - \ref{over}: overloading
C.1.7: diff.cpp17.temp - \ref{temp}: templates
C.1.8: diff.cpp17.except - \ref{except}: exception handling
C.1.9: diff.cpp17.library - \ref{library}: library introduction
C.1.10: diff.cpp17.containers - \ref{containers}: containers library
C.1.11: diff.cpp17.iterators - \ref{iterators}: iterators library
C.1.12: diff.cpp17.alg.reqs - \ref{algorithms}: algorithms library
C.1.13: diff.cpp17.input.output - \ref{input.output}: input/output library
C.1.14: diff.cpp17.depr - \ref{depr}: compatibility features
C.2: diff.cpp14 - \Cpp{} and ISO \CppXIV{}
C.2.1: diff.cpp14.lex - \ref{lex}: lexical conventions
C.2.2: diff.cpp14.expr - \ref{expr}: expressions
C.2.3: diff.cpp14.dcl.dcl - \ref{dcl.dcl}: declarations
C.2.4: diff.cpp14.class - \ref{class}: classes
C.2.5: diff.cpp14.temp - \ref{temp}: templates
C.2.6: diff.cpp14.except - \ref{except}: exception handling
C.2.7: diff.cpp14.library - \ref{library}: library introduction
C.2.8: diff.cpp14.utilities - \ref{utilities}: general utilities library
C.2.9: diff.cpp14.string - \ref{strings}: strings library
C.2.10: diff.cpp14.containers - \ref{containers}: containers library
C.2.11: diff.cpp14.depr - \ref{depr}: compatibility features
C.3: diff.cpp11 - \Cpp{} and ISO \CppXI{}
C.3.1: diff.cpp11.lex - \ref{lex}: lexical conventions
C.3.2: diff.cpp11.basic - \ref{basic}: basics
C.3.3: diff.cpp11.expr - \ref{expr}: expressions
C.3.4: diff.cpp11.dcl.dcl - \ref{dcl.dcl}: declarations
C.3.5: diff.cpp11.library - \ref{library}: library introduction
C.3.6: diff.cpp11.input.output - \ref{input.output}: input/output library
C.4: diff.cpp03 - \Cpp{} and ISO \CppIII{}
C.4.1: diff.cpp03.lex - \ref{lex}: lexical conventions
C.4.2: diff.cpp03.expr - \ref{expr}: expressions
C.4.3: diff.cpp03.dcl.dcl - \ref{dcl.dcl}: declarations
C.4.4: diff.cpp03.class - \ref{class}: classes
C.4.5: diff.cpp03.temp - \ref{temp}: templates
C.4.6: diff.cpp03.library - \ref{library}: library introduction
C.4.7: diff.cpp03.language.support - \ref{support
C.4.8: diff.cpp03.diagnostics - \ref{diagnostics}: diagnostics library
C.4.9: diff.cpp03.utilities - \ref{utilities}: general utilities library
C.4.10: diff.cpp03.strings - \ref{strings}: strings library
C.4.11: diff.cpp03.containers - \ref{containers}: containers library
C.4.12: diff.cpp03.algorithms - \ref{algorithms}: algorithms library
C.4.13: diff.cpp03.numerics - \ref{numerics}: numerics library
C.4.14: diff.cpp03.input.output - \ref{input.output}: input/output library
C.5: diff.iso - \Cpp{} and ISO C
C.5.1: diff.lex - \ref{lex}: lexical conventions
C.5.2: diff.basic - \ref{basic}: basics
C.5.3: diff.expr - \ref{expr}: expressions
C.5.4: diff.stat - \ref{stmt.stmt}: statements
C.5.5: diff.dcl - \ref{dcl.dcl}: declarations
C.5.6: diff.class - \ref{class}: classes
C.5.7: diff.cpp - \ref{cpp}: preprocessing directives
C.6: diff.library - C standard library
C.6.1: diff.mods.to.headers - Modifications to headers
C.6.2: diff.mods.to.definitions - Modifications to definitions
C.6.2.1: diff.char16 - Types \tcode{char16_t} and \tcode{char32_t}
C.6.2.2: diff.wchar.t - Type \tcode{wchar_t}
C.6.2.3: diff.header.assert.h - Header \tcode{<assert.h>}
C.6.2.4: diff.header.iso646.h - Header \tcode{<iso646.h>}
C.6.2.5: diff.header.stdalign.h - Header \tcode{<stdalign.h>}
C.6.2.6: diff.header.stdbool.h - Header \tcode{<stdbool.h>}
C.6.2.7: diff.null - Macro \tcode{NULL}
C.6.3: diff.mods.to.declarations - Modifications to declarations
C.6.4: diff.mods.to.behavior - Modifications to behavior
C.6.4.1: diff.offsetof - Macro \tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
C.6.4.2: diff.malloc - Memory allocation functions
D: depr - Compatibility features
D.1: depr.arith.conv.enum - Arithmetic conversion on enumerations
D.2: depr.capture.this - Implicit capture of \tcode{*this} by reference
D.3: depr.comma.subscript - Comma operator in subscript expressions
D.4: depr.array.comp - Array comparisons
D.5: depr.volatile.type - Deprecated \tcode{volatile} types
D.6: depr.static.constexpr - Redeclaration of \tcode{static constexpr} data members
D.7: depr.local - Non-local use of TU-local entities
D.8: depr.impldec - Implicit declaration of copy functions
D.9: depr.c.headers - C headers
D.9.1: depr.complex.h.syn - Header \tcode{<complex.h>} synopsis
D.9.2: depr.iso646.h.syn - Header \tcode{<iso646.h>} synopsis
D.9.3: depr.stdalign.h.syn - Header \tcode{<stdalign.h>} synopsis
D.9.4: depr.stdbool.h.syn - Header \tcode{<stdbool.h>} synopsis
D.9.5: depr.tgmath.h.syn - Header \tcode{<tgmath.h>} synopsis
D.9.6: depr.c.headers.other - Other C headers
D.10: depr.res.on.required - Requires paragraph
D.11: depr.relops - Relational operators
D.12: depr.str.strstreams - \tcode{char*} streams
D.12.1: depr.strstream.syn - Header \tcode{<strstream>} synopsis
D.12.2: depr.strstreambuf - Class \tcode{strstreambuf}
D.12.2.1: depr.strstreambuf.cons - \tcode{strstreambuf} constructors
D.12.2.2: depr.strstreambuf.members - Member functions
D.12.2.3: depr.strstreambuf.virtuals - \tcode{strstreambuf} overridden virtual functions
D.12.3: depr.istrstream - Class \tcode{istrstream}
D.12.3.1: depr.istrstream.cons - \tcode{istrstream} constructors
D.12.3.2: depr.istrstream.members - Member functions
D.12.4: depr.ostrstream - Class \tcode{ostrstream}
D.12.4.1: depr.ostrstream.cons - \tcode{ostrstream} constructors
D.12.4.2: depr.ostrstream.members - Member functions
D.12.5: depr.strstream - Class \tcode{strstream}
D.12.5.1: depr.strstream.cons - \tcode{strstream} constructors
D.12.5.2: depr.strstream.dest - \tcode{strstream} destructor
D.12.5.3: depr.strstream.oper - \tcode{strstream} operations
D.13: depr.meta.types - Deprecated type traits
D.14: depr.tuple - Tuple
D.15: depr.variant - Variant
D.16: depr.iterator.primitives - Deprecated iterator primitives
D.16.1: depr.iterator.basic - Basic iterator
D.17: depr.move.iter.elem - Deprecated \tcode{move_iterator} access
D.18: depr.util.smartptr.shared.atomic - Deprecated \tcode{shared_ptr} atomic access
D.19: depr.string.capacity - Deprecated \tcode{basic_string} capacity
D.20: depr.locale.stdcvt - Deprecated standard code conversion facets
D.20.1: depr.codecvt.syn - Header \tcode{<codecvt>} synopsis
D.20.2: depr.locale.stdcvt.req - Requirements
D.21: depr.conversions - Deprecated convenience conversion interfaces
D.21.1: depr.conversions.string - Class template \tcode{wstring_convert}
D.21.2: depr.conversions.buffer - Class template \tcode{wbuffer_convert}
D.22: depr.locale.category - Deprecated locale category facets
D.23: depr.fs.path.factory - Deprecated filesystem path factory functions
D.24: depr.atomics - Deprecated atomic operations
D.24.1: depr.atomics.volatile - Volatile access
D.24.2: depr.atomics.nonmembers - Non-member functions
D.24.3: depr.atomics.types.operations - Operations on atomic types
D.24.4: depr.atomics.flag - Flag type and operations
