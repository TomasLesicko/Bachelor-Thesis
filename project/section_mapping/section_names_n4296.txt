1: intro - General
1.1: intro.scope - Scope
1.2: intro.refs - Normative references
1.3: intro.defs - Terms and definitions
1.4: intro.compliance - Implementation compliance
1.5: intro.structure - Structure of this International Standard
1.6: syntax - Syntax notation
1.7: intro.memory - The \Cpp memory model
1.8: intro.object - The \Cpp object model
1.9: intro.execution - Program execution
1.10: intro.multithread - Multi-threaded executions and data races
1.11: intro.ack - Acknowledgments
2: lex - Lexical conventions
2.1: lex.separate - Separate translation
2.2: lex.phases - Phases of translation
2.3: lex.charset - Character sets
2.4: lex.pptoken - Preprocessing tokens
2.5: lex.digraph - Alternative tokens
2.6: lex.token - Tokens
2.7: lex.comment - Comments
2.8: lex.header - Header names
2.9: lex.ppnumber - Preprocessing numbers
2.10: lex.name - Identifiers
2.11: lex.key - Keywords
2.12: lex.operators - Operators and punctuators
2.13: lex.literal - Literals
2.13.1: lex.literal.kinds - Kinds of literals
2.13.2: lex.icon - Integer literals
2.13.3: lex.ccon - Character literals
2.13.4: lex.fcon - Floating literals
2.13.5: lex.string - String literals
2.13.6: lex.bool - Boolean literals
2.13.7: lex.nullptr - Pointer literals
2.13.8: lex.ext - User-defined literals
3: basic - Basic concepts
3.1: basic.def - Declarations and definitions
3.2: basic.def.odr - One definition rule
3.3: basic.scope - Scope
3.3.1: basic.scope.declarative - Declarative regions and scopes
3.3.2: basic.scope.pdecl - Point of declaration
3.3.3: basic.scope.block - Block scope
3.3.4: basic.scope.proto - Function prototype scope
3.3.5: basic.funscope - Function scope
3.3.6: basic.scope.namespace - Namespace scope
3.3.7: basic.scope.class - Class scope
3.3.8: basic.scope.enum - Enumeration scope
3.3.9: basic.scope.temp - Template parameter scope
3.3.10: basic.scope.hiding - Name hiding
3.4: basic.lookup - Name lookup
3.4.1: basic.lookup.unqual - Unqualified name lookup
3.4.2: basic.lookup.argdep - Argument-dependent name lookup
3.4.3: basic.lookup.qual - Qualified name lookup
3.4.3.1: class.qual - Class members
3.4.3.2: namespace.qual - Namespace members
3.4.4: basic.lookup.elab - Elaborated type specifiers
3.4.5: basic.lookup.classref - Class member access
3.4.6: basic.lookup.udir - Using-directives and namespace aliases
3.5: basic.link - Program and linkage
3.6: basic.start - Start and termination
3.6.1: basic.start.main - Main function
3.6.2: basic.start.init - Initialization of non-local variables
3.6.3: basic.start.term - Termination
3.7: basic.stc - Storage duration
3.7.1: basic.stc.static - Static storage duration
3.7.2: basic.stc.thread - Thread storage duration
3.7.3: basic.stc.auto - Automatic storage duration
3.7.4: basic.stc.dynamic - Dynamic storage duration
3.7.4.1: basic.stc.dynamic.allocation - Allocation functions
3.7.4.2: basic.stc.dynamic.deallocation - Deallocation functions
3.7.4.3: basic.stc.dynamic.safety - Safely-derived pointers
3.7.5: basic.stc.inherit - Duration of subobjects
3.8: basic.life - Object lifetime
3.9: basic.types - Types
3.9.1: basic.fundamental - Fundamental types
3.9.2: basic.compound - Compound types
3.9.3: basic.type.qualifier - CV-qualifiers
3.10: basic.lval - Lvalues and rvalues
3.11: basic.align - Alignment
4: conv - Standard conversions
4.1: conv.lval - Lvalue-to-rvalue conversion
4.2: conv.array - Array-to-pointer conversion
4.3: conv.func - Function-to-pointer conversion
4.4: conv.qual - Qualification conversions
4.5: conv.prom - Integral promotions
4.6: conv.fpprom - Floating point promotion
4.7: conv.integral - Integral conversions
4.8: conv.double - Floating point conversions
4.9: conv.fpint - Floating-integral conversions
4.10: conv.ptr - Pointer conversions
4.11: conv.mem - Pointer to member conversions
4.12: conv.bool - Boolean conversions
4.13: conv.rank - Integer conversion rank
5: expr - Expressions
5.1: expr.prim - Primary expressions
5.1.1: expr.prim.general - General
5.1.2: expr.prim.lambda - Lambda expressions
5.1.3: expr.prim.fold - Fold expressions
5.2: expr.post - Postfix expressions
5.2.1: expr.sub - Subscripting
5.2.2: expr.call - Function call
5.2.3: expr.type.conv - Explicit type conversion (functional notation)
5.2.4: expr.pseudo - Pseudo destructor call
5.2.5: expr.ref - Class member access
5.2.6: expr.post.incr - Increment and decrement
5.2.7: expr.dynamic.cast - Dynamic cast
5.2.8: expr.typeid - Type identification
5.2.9: expr.static.cast - Static cast
5.2.10: expr.reinterpret.cast - Reinterpret cast
5.2.11: expr.const.cast - Const cast
5.3: expr.unary - Unary expressions
5.3.1: expr.unary.op - Unary operators
5.3.2: expr.pre.incr - Increment and decrement
5.3.3: expr.sizeof - Sizeof
5.3.4: expr.new - New
5.3.5: expr.delete - Delete
5.3.6: expr.alignof - Alignof
5.3.7: expr.unary.noexcept - \tcode{noexcept} operator
5.4: expr.cast - Explicit type conversion (cast notation)
5.5: expr.mptr.oper - Pointer-to-member operators
5.6: expr.mul - Multiplicative operators
5.7: expr.add - Additive operators
5.8: expr.shift - Shift operators
5.9: expr.rel - Relational operators
5.10: expr.eq - Equality operators
5.11: expr.bit.and - Bitwise AND operator
5.12: expr.xor - Bitwise exclusive OR operator
5.13: expr.or - Bitwise inclusive OR operator
5.14: expr.log.and - Logical AND operator
5.15: expr.log.or - Logical OR operator
5.16: expr.cond - Conditional operator
5.17: expr.throw - Throwing an exception
5.18: expr.ass - Assignment and compound assignment operators
5.19: expr.comma - Comma operator
5.20: expr.const - Constant expressions
6: stmt.stmt - Statements
6.1: stmt.label - Labeled statement
6.2: stmt.expr - Expression statement
6.3: stmt.block - Compound statement or block
6.4: stmt.select - Selection statements
6.4.1: stmt.if - The \tcode{if} statement
6.4.2: stmt.switch - The \tcode{switch} statement
6.5: stmt.iter - Iteration statements
6.5.1: stmt.while - The \tcode{while} statement
6.5.2: stmt.do - The \tcode{do} statement
6.5.3: stmt.for - The \tcode{for} statement
6.5.4: stmt.ranged - The range-based \tcode{for} statement
6.6: stmt.jump - Jump statements
6.6.1: stmt.break - The \tcode{break} statement
6.6.2: stmt.cont - The \tcode{continue} statement
6.6.3: stmt.return - The \tcode{return} statement
6.6.4: stmt.goto - The \tcode{goto} statement
6.7: stmt.dcl - Declaration statement
6.8: stmt.ambig - Ambiguity resolution
7: dcl.dcl - Declarations
7.1: dcl.spec - Specifiers
7.1.1: dcl.stc - Storage class specifiers
7.1.2: dcl.fct.spec - Function specifiers
7.1.3: dcl.typedef - The \tcode{typedef} specifier
7.1.4: dcl.friend - The \tcode{friend} specifier
7.1.5: dcl.constexpr - The \tcode{constexpr} specifier
7.1.6: dcl.type - Type specifiers
7.1.6.1: dcl.type.cv - The \grammarterm{cv-qualifiers}
7.1.6.2: dcl.type.simple - Simple type specifiers
7.1.6.3: dcl.type.elab - Elaborated type specifiers
7.1.6.4: dcl.spec.auto - \tcode{auto} specifier
7.2: dcl.enum - Enumeration declarations
7.3: basic.namespace - Namespaces
7.3.1: namespace.def - Namespace definition
7.3.1.1: namespace.unnamed - Unnamed namespaces
7.3.1.2: namespace.memdef - Namespace member definitions
7.3.2: namespace.alias - Namespace alias
7.3.3: namespace.udecl - The \tcode{using} declaration
7.3.4: namespace.udir - Using directive
7.4: dcl.asm - The \tcode{asm} declaration
7.5: dcl.link - Linkage specifications
7.6: dcl.attr - Attributes
7.6.1: dcl.attr.grammar - Attribute syntax and semantics
7.6.2: dcl.align - Alignment specifier
7.6.3: dcl.attr.noreturn - Noreturn attribute
7.6.4: dcl.attr.depend - Carries dependency attribute
7.6.5: dcl.attr.deprecated - Deprecated attribute
8: dcl.decl - Declarators
8.1: dcl.name - Type names
8.2: dcl.ambig.res - Ambiguity resolution
8.3: dcl.meaning - Meaning of declarators
8.3.1: dcl.ptr - Pointers
8.3.2: dcl.ref - References
8.3.3: dcl.mptr - Pointers to members
8.3.4: dcl.array - Arrays
8.3.5: dcl.fct - Functions
8.3.6: dcl.fct.default - Default arguments
8.4: dcl.fct.def - Function definitions
8.4.1: dcl.fct.def.general - In general
8.4.2: dcl.fct.def.default - Explicitly-defaulted functions
8.4.3: dcl.fct.def.delete - Deleted definitions
8.5: dcl.init - Initializers
8.5.1: dcl.init.aggr - Aggregates
8.5.2: dcl.init.string - Character arrays
8.5.3: dcl.init.ref - References
8.5.4: dcl.init.list - List-initialization
9: class - Classes
9.1: class.name - Class names
9.2: class.mem - Class members
9.3: class.mfct - Member functions
9.3.1: class.mfct.non-static - Nonstatic member functions
9.3.2: class.this - The \tcode{this} pointer
9.4: class.static - Static members
9.4.1: class.static.mfct - Static member functions
9.4.2: class.static.data - Static data members
9.5: class.union - Unions
9.6: class.bit - Bit-fields
9.7: class.nest - Nested class declarations
9.8: class.local - Local class declarations
9.9: class.nested.type - Nested type names
10: class.derived - Derived classes
10.1: class.mi - Multiple base classes
10.2: class.member.lookup - Member name lookup
10.3: class.virtual - Virtual functions
10.4: class.abstract - Abstract classes
11: class.access - Member access control
11.1: class.access.spec - Access specifiers
11.2: class.access.base - Accessibility of base classes and base class members
11.3: class.friend - Friends
11.4: class.protected - Protected member access
11.5: class.access.virt - Access to virtual functions
11.6: class.paths - Multiple access
11.7: class.access.nest - Nested classes
12: special - Special member functions
12.1: class.ctor - Constructors
12.2: class.temporary - Temporary objects
12.3: class.conv - Conversions
12.3.1: class.conv.ctor - Conversion by constructor
12.3.2: class.conv.fct - Conversion functions
12.4: class.dtor - Destructors
12.5: class.free - Free store
12.6: class.init - Initialization
12.6.1: class.expl.init - Explicit initialization
12.6.2: class.base.init - Initializing bases and members
12.7: class.cdtor - Construction and destruction
12.8: class.copy - Copying and moving class objects
12.9: class.inhctor - Inheriting constructors
13: over - Overloading
13.1: over.load - Overloadable declarations
13.2: over.dcl - Declaration matching
13.3: over.match - Overload resolution
13.3.1: over.match.funcs - Candidate functions and argument lists
13.3.1.1: over.match.call - Function call syntax
13.3.1.1.1: over.call.func - Call to named function
13.3.1.1.2: over.call.object - Call to object of class type
13.3.1.2: over.match.oper - Operators in expressions
13.3.1.3: over.match.ctor - Initialization by constructor
13.3.1.4: over.match.copy - Copy-initialization of class by user-defined conversion
13.3.1.5: over.match.conv - Initialization by conversion function
13.3.1.6: over.match.ref - Initialization by conversion function for direct reference binding
13.3.1.7: over.match.list - Initialization by list-initialization
13.3.2: over.match.viable - Viable functions
13.3.3: over.match.best - Best viable function
13.3.3.1: over.best.ics - Implicit conversion sequences
13.3.3.1.1: over.ics.scs - Standard conversion sequences
13.3.3.1.2: over.ics.user - User-defined conversion sequences
13.3.3.1.3: over.ics.ellipsis - Ellipsis conversion sequences
13.3.3.1.4: over.ics.ref - Reference binding
13.3.3.1.5: over.ics.list - List-initialization sequence
13.3.3.2: over.ics.rank - Ranking implicit conversion sequences
13.4: over.over - Address of overloaded function
13.5: over.oper - Overloaded operators
13.5.1: over.unary - Unary operators
13.5.2: over.binary - Binary operators
13.5.3: over.ass - Assignment
13.5.4: over.call - Function call
13.5.5: over.sub - Subscripting
13.5.6: over.ref - Class member access
13.5.7: over.inc - Increment and decrement
13.5.8: over.literal - User-defined literals
13.6: over.built - Built-in operators
14: temp - Templates
14.1: temp.param - Template parameters
14.2: temp.names - Names of template specializations
14.3: temp.arg - Template arguments
14.3.1: temp.arg.type - Template type arguments
14.3.2: temp.arg.nontype - Template non-type arguments
14.3.3: temp.arg.template - Template template arguments
14.4: temp.type - Type equivalence
14.5: temp.decls - Template declarations
14.5.1: temp.class - Class templates
14.5.1.1: temp.mem.func - Member functions of class templates
14.5.1.2: temp.mem.class - Member classes of class templates
14.5.1.3: temp.static - Static data members of class templates
14.5.1.4: temp.mem.enum - Enumeration members of class templates
14.5.2: temp.mem - Member templates
14.5.3: temp.variadic - Variadic templates
14.5.4: temp.friend - Friends
14.5.5: temp.class.spec - Class template partial specializations
14.5.5.1: temp.class.spec.match - Matching of class template partial specializations
14.5.5.2: temp.class.order - Partial ordering of class template specializations
14.5.5.3: temp.class.spec.mfunc - Members of class template specializations
14.5.6: temp.fct - Function templates
14.5.6.1: temp.over.link - Function template overloading
14.5.6.2: temp.func.order - Partial ordering of function templates
14.5.7: temp.alias - Alias templates
14.6: temp.res - Name resolution
14.6.1: temp.local - Locally declared names
14.6.2: temp.dep - Dependent names
14.6.2.1: temp.dep.type - Dependent types
14.6.2.2: temp.dep.expr - Type-dependent expressions
14.6.2.3: temp.dep.constexpr - Value-dependent expressions
14.6.2.4: temp.dep.temp - Dependent template arguments
14.6.3: temp.nondep - Non-dependent names
14.6.4: temp.dep.res - Dependent name resolution
14.6.4.1: temp.point - Point of instantiation
14.6.4.2: temp.dep.candidate - Candidate functions
14.6.5: temp.inject - Friend names declared within a class template
14.7: temp.spec - Template instantiation and specialization
14.7.1: temp.inst - Implicit instantiation
14.7.2: temp.explicit - Explicit instantiation
14.7.3: temp.expl.spec - Explicit specialization
14.8: temp.fct.spec - Function template specializations
14.8.1: temp.arg.explicit - Explicit template argument specification
14.8.2: temp.deduct - Template argument deduction
14.8.2.1: temp.deduct.call - Deducing template arguments from a function call
14.8.2.2: temp.deduct.funcaddr - Deducing template arguments taking the address of a function template
14.8.2.3: temp.deduct.conv - Deducing conversion function template arguments
14.8.2.4: temp.deduct.partial - Deducing template arguments during partial ordering
14.8.2.5: temp.deduct.type - Deducing template arguments from a type
14.8.2.6: temp.deduct.decl - Deducing template arguments from a function declaration
14.8.3: temp.over - Overload resolution
15: except - Exception handling
15.1: except.throw - Throwing an exception
15.2: except.ctor - Constructors and destructors
15.3: except.handle - Handling an exception
15.4: except.spec - Exception specifications
15.5: except.special - Special functions
15.5.1: except.terminate - The \tcode{std::terminate()} function
15.5.2: except.unexpected - The \tcode{std::unexpected()} function
15.5.3: except.uncaught - The \tcode{std::uncaught_exceptions()} function
16: cpp - Preprocessing directives
16.1: cpp.cond - Conditional inclusion
16.2: cpp.include - Source file inclusion
16.3: cpp.replace - Macro replacement
16.3.1: cpp.subst - Argument substitution
16.3.2: cpp.stringize - The \tcode{\#} operator
16.3.3: cpp.concat - The \tcode{\#\#} operator
16.3.4: cpp.rescan - Rescanning and further replacement
16.3.5: cpp.scope - Scope of macro definitions
16.4: cpp.line - Line control
16.5: cpp.error - Error directive
16.6: cpp.pragma - Pragma directive
16.7: cpp.null - Null directive
16.8: cpp.predefined - Predefined macro names
16.9: cpp.pragma.op - Pragma operator
17: library - Library introduction
17.1: library.general - General
17.2: library.c - The C standard library
17.3: definitions - Definitions
17.4: defns.additional - Additional definitions
17.5: description - Method of description (Informative)
17.5.1: structure - Structure of each clause
17.5.1.1: structure.elements - Elements
17.5.1.2: structure.summary - Summary
17.5.1.3: structure.requirements - Requirements
17.5.1.4: structure.specifications - Detailed specifications
17.5.1.5: structure.see.also - C library
17.5.2: conventions - Other conventions
17.5.2.1: type.descriptions - Type descriptions
17.5.2.1.1: type.descriptions.general - General
17.5.2.1.2: enumerated.types - Enumerated types
17.5.2.1.3: bitmask.types - Bitmask types
17.5.2.1.4: character.seq - Character sequences
17.5.2.1.4.1: byte.strings - Byte strings
17.5.2.1.4.2: multibyte.strings - Multibyte strings
17.5.2.2: functions.within.classes - Functions within classes
17.5.2.3: objects.within.classes - Private members
17.6: requirements - Library-wide requirements
17.6.1: organization - Library contents and organization
17.6.1.1: contents - Library contents
17.6.1.2: headers - Headers
17.6.1.3: compliance - Freestanding implementations
17.6.2: using - Using the library
17.6.2.1: using.overview - Overview
17.6.2.2: using.headers - Headers
17.6.2.3: using.linkage - Linkage
17.6.3: utility.requirements - Requirements on types and expressions
17.6.3.1: utility.arg.requirements - Template argument requirements
17.6.3.2: swappable.requirements - \tcode{Swappable} requirements
17.6.3.3: nullablepointer.requirements - \tcode{NullablePointer} requirements
17.6.3.4: hash.requirements - Hash requirements
17.6.3.5: allocator.requirements - Allocator requirements
17.6.4: constraints - Constraints on programs
17.6.4.1: constraints.overview - Overview
17.6.4.2: namespace.constraints - Namespace use
17.6.4.2.1: namespace.std - Namespace \tcode{std}
17.6.4.2.2: namespace.posix - Namespace \tcode{posix}
17.6.4.3: reserved.names - Reserved names
17.6.4.3.1: macro.names - Macro names
17.6.4.3.2: extern.names - External linkage
17.6.4.3.3: extern.types - Types
17.6.4.3.4: usrlit.suffix - User-defined literal suffixes
17.6.4.4: alt.headers - Headers
17.6.4.5: derived.classes - Derived classes
17.6.4.6: replacement.functions - Replacement functions
17.6.4.7: handler.functions - Handler functions
17.6.4.8: res.on.functions - Other functions
17.6.4.9: res.on.arguments - Function arguments
17.6.4.10: res.on.objects - Shared objects and the library
17.6.4.11: res.on.required - Requires paragraph
17.6.5: conforming - Conforming implementations
17.6.5.1: conforming.overview - Overview
17.6.5.2: res.on.headers - Headers
17.6.5.3: res.on.macro.definitions - Restrictions on macro definitions
17.6.5.4: global.functions - Global and non-member functions
17.6.5.5: member.functions - Member functions
17.6.5.6: constexpr.functions - \tcode{constexpr} functions and constructors
17.6.5.7: algorithm.stable - Requirements for stable algorithms
17.6.5.8: reentrancy - Reentrancy
17.6.5.9: res.on.data.races - Data race avoidance
17.6.5.10: protection.within.classes - Protection within classes
17.6.5.11: derivation - Derived classes
17.6.5.12: res.on.exception.handling - Restrictions on exception handling
17.6.5.13: res.on.pointer.storage - Restrictions on storage of pointers
17.6.5.14: value.error.codes - Value of error codes
17.6.5.15: lib.types.movedfrom - Moved-from state of library types
18: language.support - Language support library
18.1: support.general - General
18.2: support.types - Types
18.3: support.limits - Implementation properties
18.3.1: support.limits.general - In general
18.3.2: limits - Numeric limits
18.3.2.1: limits.numeric - Class template \tcode{numeric_limits}
18.3.2.2: limits.syn - Header \tcode{<limits>} synopsis
18.3.2.3: numeric.limits - Class template \tcode{numeric_limits}
18.3.2.4: numeric.limits.members - \tcode{numeric_limits} members
18.3.2.5: round.style - Type \tcode{float_round_style}
18.3.2.6: denorm.style - Type \tcode{float_denorm_style}
18.3.2.7: numeric.special - \tcode{numeric_limits} specializations
18.3.3: c.limits - C library
18.4: cstdint - Integer types
18.4.1: cstdint.syn - Header \tcode{<cstdint>} synopsis
18.5: support.start.term - Start and termination
18.6: support.dynamic - Dynamic memory management
18.6.1: new.delete - Storage allocation and deallocation
18.6.1.1: new.delete.single - Single-object forms
18.6.1.2: new.delete.array - Array forms
18.6.1.3: new.delete.placement - Placement forms
18.6.1.4: new.delete.dataraces - Data races
18.6.2: alloc.errors - Storage allocation errors
18.6.2.1: bad.alloc - Class \tcode{bad_alloc}
18.6.2.2: new.badlength - Class \tcode{bad_array_new_length}
18.6.2.3: new.handler - Type \tcode{new_handler}
18.6.2.4: set.new.handler - \tcode{set_new_handler}
18.6.2.5: get.new.handler - \tcode{get_new_handler}
18.7: support.rtti - Type identification
18.7.1: type.info - Class \tcode{type_info}
18.7.2: bad.cast - Class \tcode{bad_cast}
18.7.3: bad.typeid - Class \tcode{bad_typeid}
18.8: support.exception - Exception handling
18.8.1: exception - Class \tcode{exception}
18.8.2: bad.exception - Class \tcode{bad_exception}
18.8.3: exception.terminate - Abnormal termination
18.8.3.1: terminate.handler - Type \tcode{terminate_handler}
18.8.3.2: set.terminate - \tcode{set_terminate}
18.8.3.3: get.terminate - \tcode{get_terminate}
18.8.3.4: terminate - \tcode{terminate}
18.8.4: uncaught.exceptions - \tcode{uncaught_exceptions}
18.8.5: propagation - Exception propagation
18.8.6: except.nested - \tcode{nested_exception}
18.9: support.initlist - Initializer lists
18.9.1: support.initlist.cons - Initializer list constructors
18.9.2: support.initlist.access - Initializer list access
18.9.3: support.initlist.range - Initializer list range access
18.10: support.runtime - Other runtime support
19: diagnostics - Diagnostics library
19.1: diagnostics.general - General
19.2: std.exceptions - Exception classes
19.2.1: logic.error - Class \tcode{logic_error}
19.2.2: domain.error - Class \tcode{domain_error}
19.2.3: invalid.argument - Class \tcode{invalid_argument}
19.2.4: length.error - Class \tcode{length_error}
19.2.5: out.of.range - Class \tcode{out_of_range}
19.2.6: runtime.error - Class \tcode{runtime_error}
19.2.7: range.error - Class \tcode{range_error}
19.2.8: overflow.error - Class \tcode{overflow_error}
19.2.9: underflow.error - Class \tcode{underflow_error}
19.3: assertions - Assertions
19.4: errno - Error numbers
19.5: syserr - System error support
19.5.1: syserr.errcat - Class \tcode{error_category}
19.5.1.1: syserr.errcat.overview - Class \tcode{error_category} overview
19.5.1.2: syserr.errcat.virtuals - Class \tcode{error_category} virtual members
19.5.1.3: syserr.errcat.nonvirtuals - Class \tcode{error_category} non-virtual members
19.5.1.4: syserr.errcat.derived - Program defined classes derived from \tcode{error_category}
19.5.1.5: syserr.errcat.objects - Error category objects
19.5.2: syserr.errcode - Class \tcode{error_code}
19.5.2.1: syserr.errcode.overview - Class \tcode{error_code} overview
19.5.2.2: syserr.errcode.constructors - Class \tcode{error_code} constructors
19.5.2.3: syserr.errcode.modifiers - Class \tcode{error_code} modifiers
19.5.2.4: syserr.errcode.observers - Class \tcode{error_code} observers
19.5.2.5: syserr.errcode.nonmembers - Class \tcode{error_code} non-member functions
19.5.3: syserr.errcondition - Class \tcode{error_condition}
19.5.3.1: syserr.errcondition.overview - Class \tcode{error_condition} overview
19.5.3.2: syserr.errcondition.constructors - Class \tcode{error_condition} constructors
19.5.3.3: syserr.errcondition.modifiers - Class \tcode{error_condition} modifiers
19.5.3.4: syserr.errcondition.observers - Class \tcode{error_condition} observers
19.5.3.5: syserr.errcondition.nonmembers - Class \tcode{error_condition} non-member functions
19.5.4: syserr.compare - Comparison operators
19.5.5: syserr.hash - System error hash support
19.5.6: syserr.syserr - Class \tcode{system_error}
19.5.6.1: syserr.syserr.overview - Class \tcode{system_error} overview
19.5.6.2: syserr.syserr.members - Class \tcode{system_error} members
20: utilities - General utilities library
20.1: utilities.general - General
20.2: utility - Utility components
20.2.1: operators - Operators
20.2.2: utility.swap - swap
20.2.3: utility.exchange - exchange
20.2.4: forward - forward/move helpers
20.2.5: declval - Function template \tcode{declval}
20.3: pairs - Pairs
20.3.1: pairs.general - In general
20.3.2: pairs.pair - Class template \tcode{pair}
20.3.3: pairs.spec - Specialized algorithms
20.3.4: pair.astuple - Tuple-like access to pair
20.3.5: pair.piecewise - Piecewise construction
20.4: tuple - Tuples
20.4.1: tuple.general - In general
20.4.2: tuple.tuple - Class template \tcode{tuple}
20.4.2.1: tuple.cnstr - Construction
20.4.2.2: tuple.assign - Assignment
20.4.2.3: tuple.swap - \tcode{swap}
20.4.2.4: tuple.creation - Tuple creation functions
20.4.2.5: tuple.helper - Tuple helper classes
20.4.2.6: tuple.elem - Element access
20.4.2.7: tuple.rel - Relational operators
20.4.2.8: tuple.traits - Tuple traits
20.4.2.9: tuple.special - Tuple specialized algorithms
20.5: intseq - Compile-time integer sequences
20.5.1: intseq.general - In general
20.5.2: intseq.intseq - Class template \tcode{integer_sequence}
20.5.3: intseq.make - Alias template \tcode{make_integer_sequence}
20.6: template.bitset - Class template \tcode{bitset}
20.6.1: bitset.cons - \tcode{bitset} constructors
20.6.2: bitset.members - \tcode{bitset} members
20.6.3: bitset.hash - \tcode{bitset} hash support
20.6.4: bitset.operators - \tcode{bitset} operators
20.7: memory - Memory
20.7.1: memory.general - In general
20.7.2: memory.syn - Header \tcode{<memory>} synopsis
20.7.3: pointer.traits - Pointer traits
20.7.3.1: pointer.traits.types - Pointer traits member types
20.7.3.2: pointer.traits.functions - Pointer traits member functions
20.7.4: util.dynamic.safety - Pointer safety
20.7.5: ptr.align - Align
20.7.6: allocator.tag - Allocator argument tag
20.7.7: allocator.uses - \tcode{uses_allocator}
20.7.7.1: allocator.uses.trait - \tcode{uses_allocator} trait
20.7.7.2: allocator.uses.construction - uses-allocator construction
20.7.8: allocator.traits - Allocator traits
20.7.8.1: allocator.traits.types - Allocator traits member types
20.7.8.2: allocator.traits.members - Allocator traits static member functions
20.7.9: default.allocator - The default allocator
20.7.9.1: allocator.members - \tcode{allocator} members
20.7.9.2: allocator.globals - \tcode{allocator} globals
20.7.10: storage.iterator - Raw storage iterator
20.7.11: temporary.buffer - Temporary buffers
20.7.12: specialized.algorithms - Specialized algorithms
20.7.12.1: specialized.addressof - \tcode{addressof}
20.7.12.2: uninitialized.copy - \tcode{uninitialized_copy}
20.7.12.3: uninitialized.fill - \tcode{uninitialized_fill}
20.7.12.4: uninitialized.fill.n - \tcode{uninitialized_fill_n}
20.7.13: c.malloc - C library
20.8: smartptr - Smart pointers
20.8.1: unique.ptr - Class template \tcode{unique_ptr}
20.8.1.1: unique.ptr.dltr - Default deleters
20.8.1.1.1: unique.ptr.dltr.general - In general
20.8.1.1.2: unique.ptr.dltr.dflt - \tcode{default_delete}
20.8.1.1.3: unique.ptr.dltr.dflt1 - \tcode{default_delete<T[]>}
20.8.1.2: unique.ptr.single - \tcode{unique_ptr} for single objects
20.8.1.2.1: unique.ptr.single.ctor - \tcode{unique_ptr} constructors
20.8.1.2.2: unique.ptr.single.dtor - \tcode{unique_ptr} destructor
20.8.1.2.3: unique.ptr.single.asgn - \tcode{unique_ptr} assignment
20.8.1.2.4: unique.ptr.single.observers - \tcode{unique_ptr} observers
20.8.1.2.5: unique.ptr.single.modifiers - \tcode{unique_ptr} modifiers
20.8.1.3: unique.ptr.runtime - \tcode{unique_ptr} for array objects with a runtime length
20.8.1.3.1: unique.ptr.runtime.ctor - \tcode{unique_ptr} constructors
20.8.1.3.2: unique.ptr.runtime.asgn - \tcode{unique_ptr} assignment
20.8.1.3.3: unique.ptr.runtime.observers - \tcode{unique_ptr} observers
20.8.1.3.4: unique.ptr.runtime.modifiers - \tcode{unique_ptr} modifiers
20.8.1.4: unique.ptr.create - \tcode{unique_ptr} creation
20.8.1.5: unique.ptr.special - \tcode{unique_ptr} specialized algorithms
20.8.2: util.smartptr - Shared-ownership pointers
20.8.2.1: util.smartptr.weakptr - Class \tcode{bad_weak_ptr}
20.8.2.2: util.smartptr.shared - Class template \tcode{shared_ptr}
20.8.2.2.1: util.smartptr.shared.const - \tcode{shared_ptr} constructors
20.8.2.2.2: util.smartptr.shared.dest - \tcode{shared_ptr} destructor
20.8.2.2.3: util.smartptr.shared.assign - \tcode{shared_ptr} assignment
20.8.2.2.4: util.smartptr.shared.mod - \tcode{shared_ptr} modifiers
20.8.2.2.5: util.smartptr.shared.obs - \tcode{shared_ptr} observers
20.8.2.2.6: util.smartptr.shared.create - \tcode{shared_ptr} creation
20.8.2.2.7: util.smartptr.shared.cmp - \tcode{shared_ptr} comparison
20.8.2.2.8: util.smartptr.shared.spec - \tcode{shared_ptr} specialized algorithms
20.8.2.2.9: util.smartptr.shared.cast - \tcode{shared_ptr} casts
20.8.2.2.10: util.smartptr.getdeleter - get_deleter
20.8.2.2.11: util.smartptr.shared.io - \tcode{shared_ptr} I/O
20.8.2.3: util.smartptr.weak - Class template \tcode{weak_ptr}
20.8.2.3.1: util.smartptr.weak.const - \tcode{weak_ptr} constructors
20.8.2.3.2: util.smartptr.weak.dest - \tcode{weak_ptr} destructor
20.8.2.3.3: util.smartptr.weak.assign - \tcode{weak_ptr} assignment
20.8.2.3.4: util.smartptr.weak.mod - \tcode{weak_ptr} modifiers
20.8.2.3.5: util.smartptr.weak.obs - \tcode{weak_ptr} observers
20.8.2.3.6: util.smartptr.weak.spec - \tcode{weak_ptr} specialized algorithms
20.8.2.4: util.smartptr.ownerless - Class template \tcode{owner_less}
20.8.2.5: util.smartptr.enab - Class template \tcode{enable_shared_from_this}
20.8.2.6: util.smartptr.shared.atomic - \tcode{shared_ptr} atomic access
20.8.2.7: util.smartptr.hash - Smart pointer hash support
20.9: function.objects - Function objects
20.9.1: func.def - Definitions
20.9.2: func.require - Requirements
20.9.3: func.invoke - Function template \tcode{invoke}
20.9.4: refwrap - Class template \tcode{reference_wrapper}
20.9.4.1: refwrap.const - \tcode{reference_wrapper} construct/copy/destroy
20.9.4.2: refwrap.assign - \tcode{reference_wrapper} assignment
20.9.4.3: refwrap.access - \tcode{reference_wrapper} access
20.9.4.4: refwrap.invoke - reference_wrapper invocation
20.9.4.5: refwrap.helpers - reference_wrapper helper functions
20.9.5: arithmetic.operations - Arithmetic operations
20.9.6: comparisons - Comparisons
20.9.7: logical.operations - Logical operations
20.9.8: bitwise.operations - Bitwise operations
20.9.9: negators - Negators
20.9.10: func.bind - Function object binders
20.9.10.1: func.bind.isbind - Class template \tcode{is_bind_expression}
20.9.10.2: func.bind.isplace - Class template \tcode{is_placeholder}
20.9.10.3: func.bind.bind - Function template \tcode{bind}
20.9.10.4: func.bind.place - Placeholders
20.9.11: func.memfn - Function template \tcode{mem_fn}
20.9.12: func.wrap - Polymorphic function wrappers
20.9.12.1: func.wrap.badcall - Class \tcode{bad_function_call}
20.9.12.1.1: func.wrap.badcall.const - \tcode{bad_function_call} constructor
20.9.12.2: func.wrap.func - Class template \tcode{function}
20.9.12.2.1: func.wrap.func.con - \tcode{function} construct/copy/destroy
20.9.12.2.2: func.wrap.func.mod - \tcode{function} modifiers
20.9.12.2.3: func.wrap.func.cap - \tcode{function} capacity
20.9.12.2.4: func.wrap.func.inv - \tcode{function} invocation
20.9.12.2.5: func.wrap.func.targ - function target access
20.9.12.2.6: func.wrap.func.nullptr - null pointer comparison operators
20.9.12.2.7: func.wrap.func.alg - specialized algorithms
20.9.13: unord.hash - Class template \tcode{hash}
20.10: meta - Metaprogramming and type traits
20.10.1: meta.rqmts - Requirements
20.10.2: meta.type.synop - Header \tcode{<type_traits>} synopsis
20.10.3: meta.help - Helper classes
20.10.4: meta.unary - Unary type traits
20.10.4.1: meta.unary.cat - Primary type categories
20.10.4.2: meta.unary.comp - Composite type traits
20.10.4.3: meta.unary.prop - Type properties
20.10.5: meta.unary.prop.query - Type property queries
20.10.6: meta.rel - Relationships between types
20.10.7: meta.trans - Transformations between types
20.10.7.1: meta.trans.cv - Const-volatile modifications
20.10.7.2: meta.trans.ref - Reference modifications
20.10.7.3: meta.trans.sign - Sign modifications
20.10.7.4: meta.trans.arr - Array modifications
20.10.7.5: meta.trans.ptr - Pointer modifications
20.10.7.6: meta.trans.other - Other transformations
20.11: ratio - Compile-time rational arithmetic
20.11.1: ratio.general - In general
20.11.2: ratio.syn - Header \tcode{<ratio>} synopsis
20.11.3: ratio.ratio - Class template \tcode{ratio}
20.11.4: ratio.arithmetic - Arithmetic on \tcode{ratio}{s}
20.11.5: ratio.comparison - Comparison of \tcode{ratio}{s}
20.11.6: ratio.si - SI types for \tcode{ratio}
20.12: time - Time utilities
20.12.1: time.general - In general
20.12.2: time.syn - Header \tcode{<chrono>} synopsis
20.12.3: time.clock.req - Clock requirements
20.12.4: time.traits - Time-related traits
20.12.4.1: time.traits.is_fp - \tcode{treat_as_floating_point}
20.12.4.2: time.traits.duration_values - \tcode{duration_values}
20.12.4.3: time.traits.specializations - Specializations of \tcode{common_type}
20.12.5: time.duration - Class template \tcode{duration}
20.12.5.1: time.duration.cons - \tcode{duration} constructors
20.12.5.2: time.duration.observer - \tcode{duration} observer
20.12.5.3: time.duration.arithmetic - \tcode{duration} arithmetic
20.12.5.4: time.duration.special - \tcode{duration} special values
20.12.5.5: time.duration.nonmember - \tcode{duration} non-member arithmetic
20.12.5.6: time.duration.comparisons - \tcode{duration} comparisons
20.12.5.7: time.duration.cast - \tcode{duration_cast}
20.12.5.8: time.duration.literals - Suffixes for duration literals
20.12.6: time.point - Class template \tcode{time_point}
20.12.6.1: time.point.cons - \tcode{time_point} constructors
20.12.6.2: time.point.observer - \tcode{time_point} observer
20.12.6.3: time.point.arithmetic - \tcode{time_point} arithmetic
20.12.6.4: time.point.special - \tcode{time_point} special values
20.12.6.5: time.point.nonmember - \tcode{time_point} non-member arithmetic
20.12.6.6: time.point.comparisons - \tcode{time_point} comparisons
20.12.6.7: time.point.cast - \tcode{time_point_cast}
20.12.7: time.clock - Clocks
20.12.7.1: time.clock.system - Class \tcode{system_clock}
20.12.7.2: time.clock.steady - Class \tcode{steady_clock}
20.12.7.3: time.clock.hires - Class \tcode{high_resolution_clock}
20.12.8: date.time - Date and time {functions}
20.13: allocator.adaptor - Class template \tcode{scoped_allocator_adaptor}
20.13.1: allocator.adaptor.syn - Header \tcode{<scoped_allocator>} synopsis
20.13.2: allocator.adaptor.types - Scoped allocator adaptor member types
20.13.3: allocator.adaptor.cnstr - Scoped allocator adaptor constructors
20.13.4: allocator.adaptor.members - Scoped allocator adaptor members
20.13.5: scoped.adaptor.operators - Scoped allocator operators
20.14: type.index - Class \tcode{type_index}
20.14.1: type.index.synopsis - Header \tcode{<typeindex>} synopsis
20.14.2: type.index.overview - \tcode{type_index} overview
20.14.3: type.index.members - \tcode{type_index} members
20.14.4: type.index.hash - Hash support
21: strings - Strings library
21.1: strings.general - General
21.2: char.traits - Character traits
21.2.1: char.traits.require - Character traits requirements
21.2.2: char.traits.typedefs - traits typedefs
21.2.3: char.traits.specializations - \tcode{char_traits} specializations
21.2.3.1: char.traits.specializations.char - \tcode{struct char_traits<char>}
21.2.3.2: char.traits.specializations.char16_t - \tcode{struct char_traits<char16_t>}
21.2.3.3: char.traits.specializations.char32_t - \tcode{struct char_traits<char32_t>}
21.2.3.4: char.traits.specializations.wchar.t - \tcode{struct char_traits<wchar_t>}
21.3: string.classes - String classes
21.4: basic.string - Class template \tcode{basic_string}
21.4.1: string.require - \tcode{basic_string} general requirements
21.4.2: string.cons - \tcode{basic_string} constructors and assignment operators
21.4.3: string.iterators - \tcode{basic_string} iterator support
21.4.4: string.capacity - \tcode{basic_string} capacity
21.4.5: string.access - \tcode{basic_string} element access
21.4.6: string.modifiers - \tcode{basic_string} modifiers
21.4.6.1: string::op+= - \tcode{basic_string::operator+=}
21.4.6.2: string::append - \tcode{basic_string::append}
21.4.6.3: string::assign - \tcode{basic_string::assign}
21.4.6.4: string::insert - \tcode{basic_string::insert}
21.4.6.5: string::erase - \tcode{basic_string::erase}
21.4.6.6: string::replace - \tcode{basic_string::replace}
21.4.6.7: string::copy - \tcode{basic_string::copy}
21.4.6.8: string::swap - \tcode{basic_string::swap}
21.4.7: string.ops - \tcode{basic_string} string operations
21.4.7.1: string.accessors - \tcode{basic_string} accessors
21.4.7.2: string::find - \tcode{basic_string::find}
21.4.7.3: string::rfind - \tcode{basic_string::rfind}
21.4.7.4: string::find.first.of - \tcode{basic_string::find_first_of}
21.4.7.5: string::find.last.of - \tcode{basic_string::find_last_of}
21.4.7.6: string::find.first.not.of - \tcode{basic_string::find_first_not_of}
21.4.7.7: string::find.last.not.of - \tcode{basic_string::find_last_not_of}
21.4.7.8: string::substr - \tcode{basic_string::substr}
21.4.7.9: string::compare - \tcode{basic_string::compare}
21.4.8: string.nonmembers - \tcode{basic_string} non-member functions
21.4.8.1: string::op+ - \tcode{operator+}
21.4.8.2: string::operator== - \tcode{operator==}
21.4.8.3: string::op!= - \tcode{operator!=}
21.4.8.4: string::op< - \tcode{operator<}
21.4.8.5: string::op> - \tcode{operator>}
21.4.8.6: string::op<= - \tcode{operator<=}
21.4.8.7: string::op>= - \tcode{operator>=}
21.4.8.8: string.special - \tcode{swap}
21.4.8.9: string.io - Inserters and extractors
21.5: string.conversions - Numeric conversions
21.6: basic.string.hash - Hash support
21.7: basic.string.literals - Suffix for \tcode{basic_string} literals
21.8: c.strings - Null-terminated sequence utilities
22: localization - Localization library
22.1: localization.general - General
22.2: locale.syn - Header \tcode{<locale>} synopsis
22.3: locales - Locales
22.3.1: locale - Class \tcode{locale}
22.3.1.1: locale.types - \tcode{locale} types
22.3.1.1.1: locale.category - Type \tcode{locale::category}
22.3.1.1.2: locale.facet - Class \tcode{locale::facet}
22.3.1.1.3: locale.id - Class \tcode{locale::id}
22.3.1.2: locale.cons - \tcode{locale} constructors and destructor
22.3.1.3: locale.members - \tcode{locale} members
22.3.1.4: locale.operators - \tcode{locale} operators
22.3.1.5: locale.statics - \tcode{locale} static members
22.3.2: locale.global.templates - \tcode{locale} globals
22.3.3: locale.convenience - Convenience interfaces
22.3.3.1: classification - Character classification
22.3.3.2: conversions - Conversions
22.3.3.2.1: conversions.character - Character conversions
22.3.3.2.2: conversions.string - \tcode{string} conversions
22.3.3.2.3: conversions.buffer - Buffer conversions
22.4: locale.categories - Standard \tcode{locale} categories
22.4.1: category.ctype - The \tcode{ctype} category
22.4.1.1: locale.ctype - Class template \tcode{ctype}
22.4.1.1.1: locale.ctype.members - \tcode{ctype} members
22.4.1.1.2: locale.ctype.virtuals - \tcode{ctype} virtual functions
22.4.1.2: locale.ctype.byname - Class template \tcode{ctype_byname}
22.4.1.3: facet.ctype.special - \tcode{ctype} specializations
22.4.1.3.1: facet.ctype.char.dtor - \tcode{ctype<char>} destructor
22.4.1.3.2: facet.ctype.char.members - \tcode{ctype<char>} members
22.4.1.3.3: facet.ctype.char.statics - \tcode{ctype<char>} static members
22.4.1.3.4: facet.ctype.char.virtuals - \tcode{ctype<char>} virtual functions
22.4.1.4: locale.codecvt - Class template \tcode{codecvt}
22.4.1.4.1: locale.codecvt.members - \tcode{codecvt} members
22.4.1.4.2: locale.codecvt.virtuals - \tcode{codecvt} virtual functions
22.4.1.5: locale.codecvt.byname - Class template \tcode{codecvt_byname}
22.4.2: category.numeric - The numeric category
22.4.2.1: locale.num.get - Class template \tcode{num_get}
22.4.2.1.1: facet.num.get.members - \tcode{num_get} members
22.4.2.1.2: facet.num.get.virtuals - \tcode{num_get} virtual functions
22.4.2.2: locale.nm.put - Class template \tcode{num_put}
22.4.2.2.1: facet.num.put.members - \tcode{num_put} members
22.4.2.2.2: facet.num.put.virtuals - \tcode{num_put} virtual functions
22.4.3: facet.numpunct - The numeric punctuation facet
22.4.3.1: locale.numpunct - Class template \tcode{numpunct}
22.4.3.1.1: facet.numpunct.members - \tcode{numpunct} members
22.4.3.1.2: facet.numpunct.virtuals - \tcode{numpunct} virtual functions
22.4.3.2: locale.numpunct.byname - Class template \tcode{numpunct_byname}
22.4.4: category.collate - The collate category
22.4.4.1: locale.collate - Class template \tcode{collate}
22.4.4.1.1: locale.collate.members - \tcode{collate} members
22.4.4.1.2: locale.collate.virtuals - \tcode{collate} virtual functions
22.4.4.2: locale.collate.byname - Class template \tcode{collate_byname}
22.4.5: category.time - The time category
22.4.5.1: locale.time.get - Class template \tcode{time_get}
22.4.5.1.1: locale.time.get.members - \tcode{time_get} members
22.4.5.1.2: locale.time.get.virtuals - \tcode{time_get} virtual functions
22.4.5.2: locale.time.get.byname - Class template \tcode{time_get_byname}
22.4.5.3: locale.time.put - Class template \tcode{time_put}
22.4.5.3.1: locale.time.put.members - \tcode{time_put} members
22.4.5.3.2: locale.time.put.virtuals - \tcode{time_put} virtual functions
22.4.5.4: locale.time.put.byname - Class template \tcode{time_put_byname}
22.4.6: category.monetary - The monetary category
22.4.6.1: locale.money.get - Class template \tcode{money_get}
22.4.6.1.1: locale.money.get.members - \tcode{money_get} members
22.4.6.1.2: locale.money.get.virtuals - \tcode{money_get} virtual functions
22.4.6.2: locale.money.put - Class template \tcode{money_put}
22.4.6.2.1: locale.money.put.members - \tcode{money_put} members
22.4.6.2.2: locale.money.put.virtuals - \tcode{money_put} virtual functions
22.4.6.3: locale.moneypunct - Class template \tcode{moneypunct}
22.4.6.3.1: locale.moneypunct.members - \tcode{moneypunct} members
22.4.6.3.2: locale.moneypunct.virtuals - \tcode{moneypunct} virtual functions
22.4.6.4: locale.moneypunct.byname - Class template \tcode{moneypunct_byname}
22.4.7: category.messages - The message retrieval category
22.4.7.1: locale.messages - Class template \tcode{messages}
22.4.7.1.1: locale.messages.members - \tcode{messages} members
22.4.7.1.2: locale.messages.virtuals - \tcode{messages} virtual functions
22.4.7.2: locale.messages.byname - Class template \tcode{messages_byname}
22.4.8: facets.examples - Program-defined facets
22.5: locale.stdcvt - Standard code conversion facets
22.6: c.locales - C library locales
23: containers - Containers library
23.1: containers.general - General
23.2: container.requirements - Container requirements
23.2.1: container.requirements.general - General container requirements
23.2.2: container.requirements.dataraces - Container data races
23.2.3: sequence.reqmts - Sequence containers
23.2.4: associative.reqmts - Associative containers
23.2.4.1: associative.reqmts.except - Exception safety guarantees
23.2.5: unord.req - Unordered associative containers
23.2.5.1: unord.req.except - Exception safety guarantees
23.3: sequences - Sequence containers
23.3.1: sequences.general - In general
23.3.2: array - Class template \tcode{array}
23.3.2.1: array.overview - Class template \tcode{array} overview
23.3.2.2: array.cons - \tcode{array} constructors, copy, and assignment
23.3.2.3: array.special - \tcode{array} specialized algorithms
23.3.2.4: array.size - \tcode{array::size}
23.3.2.5: array.data - \tcode{array::data}
23.3.2.6: array.fill - \tcode{array::fill}
23.3.2.7: array.swap - \tcode{array::swap}
23.3.2.8: array.zero - Zero sized arrays
23.3.2.9: array.tuple - Tuple interface to class template \tcode{array}
23.3.3: deque - Class template \tcode{deque}
23.3.3.1: deque.overview - Class template \tcode{deque} overview
23.3.3.2: deque.cons - \tcode{deque} constructors, copy, and assignment
23.3.3.3: deque.capacity - \tcode{deque} capacity
23.3.3.4: deque.modifiers - \tcode{deque} modifiers
23.3.3.5: deque.special - \tcode{deque} specialized algorithms
23.3.4: forwardlist - Class template \tcode{forward_list}
23.3.4.1: forwardlist.overview - Class template \tcode{forward_list} overview
23.3.4.2: forwardlist.cons - \tcode{forward_list} constructors, copy, assignment
23.3.4.3: forwardlist.iter - \tcode{forward_list} iterators
23.3.4.4: forwardlist.access - \tcode{forward_list} element access
23.3.4.5: forwardlist.modifiers - \tcode{forward_list} modifiers
23.3.4.6: forwardlist.ops - \tcode{forward_list} operations
23.3.4.7: forwardlist.spec - \tcode{forward_list} specialized algorithms
23.3.5: list - Class template \tcode{list}
23.3.5.1: list.overview - Class template \tcode{list} overview
23.3.5.2: list.cons - \tcode{list} constructors, copy, and assignment
23.3.5.3: list.capacity - \tcode{list} capacity
23.3.5.4: list.modifiers - \tcode{list} modifiers
23.3.5.5: list.ops - \tcode{list} operations
23.3.5.6: list.special - \tcode{list} specialized algorithms
23.3.6: vector - Class template \tcode{vector}
23.3.6.1: vector.overview - Class template \tcode{vector} overview
23.3.6.2: vector.cons - \tcode{vector} constructors, copy, and assignment
23.3.6.3: vector.capacity - \tcode{vector} capacity
23.3.6.4: vector.data - \tcode{vector} data
23.3.6.5: vector.modifiers - \tcode{vector} modifiers
23.3.6.6: vector.special - \tcode{vector} specialized algorithms
23.3.7: vector.bool - Class \tcode{vector<bool>}
23.4: associative - Associative containers
23.4.1: associative.general - In general
23.4.2: associative.map.syn - Header \tcode{<map>} synopsis
23.4.3: associative.set.syn - Header \tcode{<set>} synopsis
23.4.4: map - Class template \tcode{map}
23.4.4.1: map.overview - Class template \tcode{map} overview
23.4.4.2: map.cons - \tcode{map} constructors, copy, and assignment
23.4.4.3: map.access - \tcode{map} element access
23.4.4.4: map.modifiers - \tcode{map} modifiers
23.4.4.5: map.special - \tcode{map} specialized algorithms
23.4.5: multimap - Class template \tcode{multimap}
23.4.5.1: multimap.overview - Class template \tcode{multimap} overview
23.4.5.2: multimap.cons - \tcode{multimap} constructors
23.4.5.3: multimap.modifiers - \tcode{multimap} modifiers
23.4.5.4: multimap.special - \tcode{multimap} specialized algorithms
23.4.6: set - Class template \tcode{set}
23.4.6.1: set.overview - Class template \tcode{set} overview
23.4.6.2: set.cons - \tcode{set} constructors, copy, and assignment
23.4.6.3: set.special - \tcode{set} specialized algorithms
23.4.7: multiset - Class template \tcode{multiset}
23.4.7.1: multiset.overview - Class template \tcode{multiset} overview
23.4.7.2: multiset.cons - \tcode{multiset} constructors
23.4.7.3: multiset.special - \tcode{multiset} specialized algorithms
23.5: unord - Unordered associative containers
23.5.1: unord.general - In general
23.5.2: unord.map.syn - Header \tcode{<unordered_map>} synopsis
23.5.3: unord.set.syn - Header \tcode{<unordered_set>} synopsis
23.5.4: unord.map - Class template \tcode{unordered_map}
23.5.4.1: unord.map.overview - Class template \tcode{unordered_map} overview
23.5.4.2: unord.map.cnstr - \tcode{unordered_map} constructors
23.5.4.3: unord.map.elem - \tcode{unordered_map} element access
23.5.4.4: unord.map.modifiers - \tcode{unordered_map} modifiers
23.5.4.5: unord.map.swap - \tcode{unordered_map} swap
23.5.5: unord.multimap - Class template \tcode{unordered_multimap}
23.5.5.1: unord.multimap.overview - Class template \tcode{unordered_multimap} overview
23.5.5.2: unord.multimap.cnstr - \tcode{unordered_multimap} constructors
23.5.5.3: unord.multimap.modifiers - \tcode{unordered_multimap} modifiers
23.5.5.4: unord.multimap.swap - \tcode{unordered_multimap} swap
23.5.6: unord.set - Class template \tcode{unordered_set}
23.5.6.1: unord.set.overview - Class template \tcode{unordered_set} overview
23.5.6.2: unord.set.cnstr - \tcode{unordered_set} constructors
23.5.6.3: unord.set.swap - \tcode{unordered_set} swap
23.5.7: unord.multiset - Class template \tcode{unordered_multiset}
23.5.7.1: unord.multiset.overview - Class template \tcode{unordered_multiset} overview
23.5.7.2: unord.multiset.cnstr - \tcode{unordered_multiset} constructors
23.5.7.3: unord.multiset.swap - \tcode{unordered_multiset} swap
23.6: container.adaptors - Container adaptors
23.6.1: container.adaptors.general - In general
23.6.2: queue.syn - Header \tcode{<queue>} synopsis
23.6.3: queue - Class template \tcode{queue}
23.6.3.1: queue.defn - \tcode{queue} definition
23.6.3.2: queue.cons - \tcode{queue} constructors
23.6.3.3: queue.cons.alloc - \tcode{queue} constructors with allocators
23.6.3.4: queue.ops - \tcode{queue} operators
23.6.3.5: queue.special - \tcode{queue} specialized algorithms
23.6.4: priority.queue - Class template \tcode{priority_queue}
23.6.4.1: priqueue.cons - \tcode{priority_queue} constructors
23.6.4.2: priqueue.cons.alloc - \tcode{priority_queue} constructors with allocators
23.6.4.3: priqueue.members - \tcode{priority_queue} members
23.6.4.4: priqueue.special - \tcode{priority_queue} specialized algorithms
23.6.5: stack - Class template \tcode{stack}
23.6.5.1: stack.syn - Header \tcode{<stack>} synopsis
23.6.5.2: stack.defn - \tcode{stack} definition
23.6.5.3: stack.cons - \tcode{stack} constructors
23.6.5.4: stack.cons.alloc - \tcode{stack} constructors with allocators
23.6.5.5: stack.ops - \tcode{stack} operators
23.6.5.6: stack.special - \tcode{stack} specialized algorithms
24: iterators - Iterators library
24.1: iterators.general - General
24.2: iterator.requirements - Iterator requirements
24.2.1: iterator.requirements.general - In general
24.2.2: iterator.iterators - Iterator
24.2.3: input.iterators - Input iterators
24.2.4: output.iterators - Output iterators
24.2.5: forward.iterators - Forward iterators
24.2.6: bidirectional.iterators - Bidirectional iterators
24.2.7: random.access.iterators - Random access iterators
24.3: iterator.synopsis - Header \tcode{<iterator>}\ synopsis
24.4: iterator.primitives - Iterator primitives
24.4.1: iterator.traits - Iterator traits
24.4.2: iterator.basic - Basic iterator
24.4.3: std.iterator.tags - Standard iterator tags
24.4.4: iterator.operations - Iterator operations
24.5: predef.iterators - Iterator adaptors
24.5.1: reverse.iterators - Reverse iterators
24.5.1.1: reverse.iterator - Class template \tcode{reverse_iterator}
24.5.1.2: reverse.iter.requirements - \tcode{reverse_iterator} requirements
24.5.1.3: reverse.iter.ops - \tcode{reverse_iterator} operations
24.5.1.3.1: reverse.iter.cons - \tcode{reverse_iterator} constructor
24.5.1.3.2: reverse.iter.op= - \tcode{reverse_iterator::operator=}
24.5.1.3.3: reverse.iter.conv - Conversion
24.5.1.3.4: reverse.iter.op.star - \tcode{operator*}
24.5.1.3.5: reverse.iter.opref - \tcode{operator->}
24.5.1.3.6: reverse.iter.op++ - \tcode{operator++}
24.5.1.3.7: reverse.iter.op\dcr - \tcode{operator\dcr}
24.5.1.3.8: reverse.iter.op+ - \tcode{operator+}
24.5.1.3.9: reverse.iter.op+= - \tcode{operator+=}
24.5.1.3.10: reverse.iter.op- - \tcode{operator-}
24.5.1.3.11: reverse.iter.op-= - \tcode{operator-=}
24.5.1.3.12: reverse.iter.opindex - \tcode{operator[]}
24.5.1.3.13: reverse.iter.op== - \tcode{operator==}
24.5.1.3.14: reverse.iter.op< - \tcode{operator<}
24.5.1.3.15: reverse.iter.op!= - \tcode{operator!=}
24.5.1.3.16: reverse.iter.op> - \tcode{operator>}
24.5.1.3.17: reverse.iter.op>= - \tcode{operator>=}
24.5.1.3.18: reverse.iter.op<= - \tcode{operator<=}
24.5.1.3.19: reverse.iter.opdiff - \tcode{operator-}
24.5.1.3.20: reverse.iter.opsum - \tcode{operator+}
24.5.1.3.21: reverse.iter.make - Non-member function \tcode{make_reverse_iterator()}
24.5.2: insert.iterators - Insert iterators
24.5.2.1: back.insert.iterator - Class template \tcode{back_insert_iterator}
24.5.2.2: back.insert.iter.ops - \tcode{back_insert_iterator} operations
24.5.2.2.1: back.insert.iter.cons - \tcode{back_insert_iterator} constructor
24.5.2.2.2: back.insert.iter.op= - \tcode{back_insert_iterator::operator=}
24.5.2.2.3: back.insert.iter.op* - \tcode{back_insert_iterator::operator*}
24.5.2.2.4: back.insert.iter.op++ - \tcode{back_insert_iterator::operator++}
24.5.2.2.5: back.inserter -  \tcode{back_inserter}
24.5.2.3: front.insert.iterator - Class template \tcode{front_insert_iterator}
24.5.2.4: front.insert.iter.ops - \tcode{front_insert_iterator} operations
24.5.2.4.1: front.insert.iter.cons - \tcode{front_insert_iterator} constructor
24.5.2.4.2: front.insert.iter.op= - \tcode{front_insert_iterator::operator=}
24.5.2.4.3: front.insert.iter.op* - \tcode{front_insert_iterator::operator*}
24.5.2.4.4: front.insert.iter.op++ - \tcode{front_insert_iterator::operator++}
24.5.2.4.5: front.inserter - \tcode{front_inserter}
24.5.2.5: insert.iterator - Class template \tcode{insert_iterator}
24.5.2.6: insert.iter.ops - \tcode{insert_iterator} operations
24.5.2.6.1: insert.iter.cons - \tcode{insert_iterator} constructor
24.5.2.6.2: insert.iter.op= - \tcode{insert_iterator::operator=}
24.5.2.6.3: insert.iter.op* - \tcode{insert_iterator::operator*}
24.5.2.6.4: insert.iter.op++ - \tcode{insert_iterator::operator++}
24.5.2.6.5: inserter - \tcode{inserter}
24.5.3: move.iterators - Move iterators
24.5.3.1: move.iterator - Class template \tcode{move_iterator}
24.5.3.2: move.iter.requirements - \tcode{move_iterator} requirements
24.5.3.3: move.iter.ops - \tcode{move_iterator} operations
24.5.3.3.1: move.iter.op.const - \tcode{move_iterator} constructors
24.5.3.3.2: move.iter.op= - \tcode{move_iterator::operator=}
24.5.3.3.3: move.iter.op.conv - \tcode{move_iterator} conversion
24.5.3.3.4: move.iter.op.star - \tcode{move_iterator::operator*}
24.5.3.3.5: move.iter.op.ref - \tcode{move_iterator::operator->}
24.5.3.3.6: move.iter.op.incr - \tcode{move_iterator::operator++}
24.5.3.3.7: move.iter.op.decr - \tcode{move_iterator::operator-{-}}
24.5.3.3.8: move.iter.op.+ - \tcode{move_iterator::operator+}
24.5.3.3.9: move.iter.op.+= - \tcode{move_iterator::operator+=}
24.5.3.3.10: move.iter.op.- - \tcode{move_iterator::operator-}
24.5.3.3.11: move.iter.op.-= - \tcode{move_iterator::operator-=}
24.5.3.3.12: move.iter.op.index - \tcode{move_iterator::operator[]}
24.5.3.3.13: move.iter.op.comp - \tcode{move_iterator} comparisons
24.5.3.3.14: move.iter.nonmember - \tcode{move_iterator} non-member functions
24.6: stream.iterators - Stream iterators
24.6.1: istream.iterator - Class template \tcode{istream_iterator}
24.6.1.1: istream.iterator.cons - \tcode{istream_iterator} constructors and destructor
24.6.1.2: istream.iterator.ops - \tcode{istream_iterator} operations
24.6.2: ostream.iterator - Class template \tcode{ostream_iterator}
24.6.2.1: ostream.iterator.cons.des - \tcode{ostream_iterator} constructors and destructor
24.6.2.2: ostream.iterator.ops - \tcode{ostream_iterator} operations
24.6.3: istreambuf.iterator - Class template \tcode{istreambuf_iterator}
24.6.3.1: istreambuf.iterator::proxy - Class template \tcode{istreambuf_iterator::proxy}
24.6.3.2: istreambuf.iterator.cons - \tcode{istreambuf_iterator} constructors
24.6.3.3: istreambuf.iterator::op* - \tcode{istreambuf_iterator::operator*}
24.6.3.4: istreambuf.iterator::op++ - \tcode{istreambuf_iterator::operator++}
24.6.3.5: istreambuf.iterator::equal - \tcode{istreambuf_iterator::equal}
24.6.3.6: istreambuf.iterator::op== - \tcode{operator==}
24.6.3.7: istreambuf.iterator::op!= - \tcode{operator!=}
24.6.4: ostreambuf.iterator - Class template \tcode{ostreambuf_iterator}
24.6.4.1: ostreambuf.iter.cons - \tcode{ostreambuf_iterator} constructors
24.6.4.2: ostreambuf.iter.ops - \tcode{ostreambuf_iterator} operations
24.7: iterator.range - Range access
24.8: iterator.container - Container access
25: algorithms - Algorithms library
25.1: algorithms.general - General
25.2: alg.nonmodifying - Non-modifying sequence operations
25.2.1: alg.all_of - All of
25.2.2: alg.any_of - Any of
25.2.3: alg.none_of - None of
25.2.4: alg.foreach - For each
25.2.5: alg.find - Find
25.2.6: alg.find.end - Find end
25.2.7: alg.find.first.of - Find first
25.2.8: alg.adjacent.find - Adjacent find
25.2.9: alg.count - Count
25.2.10: mismatch - Mismatch
25.2.11: alg.equal - Equal
25.2.12: alg.is_permutation - Is permutation
25.2.13: alg.search - Search
25.3: alg.modifying.operations - Mutating sequence operations
25.3.1: alg.copy - Copy
25.3.2: alg.move - Move
25.3.3: alg.swap - swap
25.3.4: alg.transform - Transform
25.3.5: alg.replace - Replace
25.3.6: alg.fill - Fill
25.3.7: alg.generate - Generate
25.3.8: alg.remove - Remove
25.3.9: alg.unique - Unique
25.3.10: alg.reverse - Reverse
25.3.11: alg.rotate - Rotate
25.3.12: alg.random.shuffle - Shuffle
25.3.13: alg.partitions - Partitions
25.4: alg.sorting - Sorting and related operations
25.4.1: alg.sort - Sorting
25.4.1.1: sort - \tcode{sort}
25.4.1.2: stable.sort - \tcode{stable_sort}
25.4.1.3: partial.sort - \tcode{partial_sort}
25.4.1.4: partial.sort.copy - \tcode{partial_sort_copy}
25.4.1.5: is.sorted - \tcode{is_sorted}
25.4.2: alg.nth.element - Nth element
25.4.3: alg.binary.search - Binary search
25.4.3.1: lower.bound - \tcode{lower_bound}
25.4.3.2: upper.bound - \tcode{upper_bound}
25.4.3.3: equal.range - \tcode{equal_range}
25.4.3.4: binary.search - \tcode{binary_search}
25.4.4: alg.merge - Merge
25.4.5: alg.set.operations - Set operations on sorted structures
25.4.5.1: includes - \tcode{includes}
25.4.5.2: set.union - \tcode{set_union}
25.4.5.3: set.intersection - \tcode{set_intersection}
25.4.5.4: set.difference - \tcode{set_difference}
25.4.5.5: set.symmetric.difference - \tcode{set_symmetric_difference}
25.4.6: alg.heap.operations - Heap operations
25.4.6.1: push.heap - \tcode{push_heap}
25.4.6.2: pop.heap - \tcode{pop_heap}
25.4.6.3: make.heap - \tcode{make_heap}
25.4.6.4: sort.heap - \tcode{sort_heap}
25.4.6.5: is.heap - \tcode{is_heap}
25.4.7: alg.min.max - Minimum and maximum
25.4.8: alg.lex.comparison - Lexicographical comparison
25.4.9: alg.permutation.generators - Permutation generators
25.5: alg.c.library - C library algorithms
26: numerics - Numerics library
26.1: numerics.general - General
26.2: numeric.requirements - Numeric type requirements
26.3: cfenv - The floating-point environment
26.3.1: cfenv.syn - Header \tcode{<cfenv>} synopsis
26.4: complex.numbers - Complex numbers
26.4.1: complex.syn - Header \tcode{<complex>} synopsis
26.4.2: complex - Class template \tcode{complex}
26.4.3: complex.special - \tcode{complex} specializations
26.4.4: complex.members - \tcode{complex} member functions
26.4.5: complex.member.ops - \tcode{complex} member operators
26.4.6: complex.ops - \tcode{complex} non-member operations
26.4.7: complex.value.ops - \tcode{complex} value operations
26.4.8: complex.transcendentals - \tcode{complex} transcendentals
26.4.9: cmplx.over - Additional overloads
26.4.10: complex.literals - Suffixes for complex number literals
26.4.11: ccmplx - Header \tcode{<ccomplex>}
26.5: rand - Random number generation
26.5.1: rand.req - Requirements
26.5.1.1: rand.req.genl - General requirements
26.5.1.2: rand.req.seedseq - Seed sequence requirements
26.5.1.3: rand.req.urng - Uniform random number generator requirements
26.5.1.4: rand.req.eng - Random number engine requirements
26.5.1.5: rand.req.adapt - Random number engine adaptor requirements
26.5.1.6: rand.req.dist - Random number distribution requirements
26.5.2: rand.synopsis - Header \tcode{<random>} synopsis
26.5.3: rand.eng - Random number engine class templates
26.5.3.1: rand.eng.lcong - Class template \tcode{linear_congruential_engine}
26.5.3.2: rand.eng.mers - Class template \tcode{mersenne_twister_engine}
26.5.3.3: rand.eng.sub - Class template \tcode{subtract_with_carry_engine}
26.5.4: rand.adapt - Random number engine adaptor class templates
26.5.4.1: rand.adapt.general - In general
26.5.4.2: rand.adapt.disc - Class template \tcode{discard_block_engine}
26.5.4.3: rand.adapt.ibits - Class template \tcode{independent_bits_engine}
26.5.4.4: rand.adapt.shuf - Class template \tcode{shuffle_order_engine}
26.5.5: rand.predef - Engines and engine adaptors with predefined parameters
26.5.6: rand.device - Class \tcode{random_device}
26.5.7: rand.util - Utilities
26.5.7.1: rand.util.seedseq - Class \tcode{seed_seq}
26.5.7.2: rand.util.canonical - Function template \tcode{generate_canonical}
26.5.8: rand.dist - Random number distribution class templates
26.5.8.1: rand.dist.general - In general
26.5.8.2: rand.dist.uni - Uniform distributions
26.5.8.2.1: rand.dist.uni.int - Class template \tcode{uniform_int_distribution}
26.5.8.2.2: rand.dist.uni.real - Class template \tcode{uniform_real_distribution}
26.5.8.3: rand.dist.bern - Bernoulli distributions
26.5.8.3.1: rand.dist.bern.bernoulli - Class \tcode{bernoulli_distribution}
26.5.8.3.2: rand.dist.bern.bin - Class template \tcode{binomial_distribution}
26.5.8.3.3: rand.dist.bern.geo - Class template \tcode{geometric_distribution}
26.5.8.3.4: rand.dist.bern.negbin - Class template \tcode{negative_binomial_distribution}
26.5.8.4: rand.dist.pois - Poisson distributions
26.5.8.4.1: rand.dist.pois.poisson - Class template \tcode{poisson_distribution}
26.5.8.4.2: rand.dist.pois.exp - Class template \tcode{exponential_distribution}
26.5.8.4.3: rand.dist.pois.gamma - Class template \tcode{gamma_distribution}
26.5.8.4.4: rand.dist.pois.weibull - Class template \tcode{weibull_distribution}
26.5.8.4.5: rand.dist.pois.extreme - Class template \tcode{extreme_value_distribution}
26.5.8.5: rand.dist.norm - Normal distributions
26.5.8.5.1: rand.dist.norm.normal - Class template \tcode{normal_distribution}
26.5.8.5.2: rand.dist.norm.lognormal - Class template \tcode{lognormal_distribution}
26.5.8.5.3: rand.dist.norm.chisq - Class template \tcode{chi_squared_distribution}
26.5.8.5.4: rand.dist.norm.cauchy - Class template \tcode{cauchy_distribution}
26.5.8.5.5: rand.dist.norm.f - Class template \tcode{fisher_f_distribution}
26.5.8.5.6: rand.dist.norm.t - Class template \tcode{student_t_distribution}
26.5.8.6: rand.dist.samp - Sampling distributions
26.5.8.6.1: rand.dist.samp.discrete - Class template \tcode{discrete_distribution}
26.5.8.6.2: rand.dist.samp.pconst - Class template \tcode{piecewise_constant_distribution}
26.5.8.6.3: rand.dist.samp.plinear - Class template \tcode{piecewise_linear_distribution}
26.6: numarray - Numeric arrays
26.6.1: valarray.syn - Header \tcode{<valarray>} synopsis
26.6.2: template.valarray - Class template \tcode{valarray}
26.6.2.1: template.valarray.overview - Class template \tcode{valarray} overview
26.6.2.2: valarray.cons - \tcode{valarray} constructors
26.6.2.3: valarray.assign - \tcode{valarray} assignment
26.6.2.4: valarray.access - \tcode{valarray} element access
26.6.2.5: valarray.sub - \tcode{valarray} subset operations
26.6.2.6: valarray.unary - \tcode{valarray} unary operators
26.6.2.7: valarray.cassign - \tcode{valarray} computed assignment
26.6.2.8: valarray.members - \tcode{valarray} member functions
26.6.3: valarray.nonmembers - \tcode{valarray} non-member operations
26.6.3.1: valarray.binary - \tcode{valarray} binary operators
26.6.3.2: valarray.comparison - \tcode{valarray} logical operators
26.6.3.3: valarray.transcend - \tcode{valarray} transcendentals
26.6.3.4: valarray.special - \tcode{valarray} specialized algorithms
26.6.4: class.slice - Class \tcode{slice}
26.6.4.1: class.slice.overview - Class \tcode{slice} overview
26.6.4.2: cons.slice - \tcode{slice} constructors
26.6.4.3: slice.access - \tcode{slice} access functions
26.6.5: template.slice.array - Class template \tcode{slice_array}
26.6.5.1: template.slice.array.overview - Class template \tcode{slice_array} overview
26.6.5.2: slice.arr.assign - \tcode{slice_array} assignment
26.6.5.3: slice.arr.comp.assign - \tcode{slice_array} computed assignment
26.6.5.4: slice.arr.fill - \tcode{slice_array} fill function
26.6.6: class.gslice - The \tcode{gslice} class
26.6.6.1: class.gslice.overview - The \tcode{gslice} class overview
26.6.6.2: gslice.cons - \tcode{gslice} constructors
26.6.6.3: gslice.access - \tcode{gslice} access functions
26.6.7: template.gslice.array - Class template \tcode{gslice_array}
26.6.7.1: template.gslice.array.overview - Class template \tcode{gslice_array} overview
26.6.7.2: gslice.array.assign - \tcode{gslice_array} assignment
26.6.7.3: gslice.array.comp.assign - \tcode{gslice_array}
26.6.7.4: gslice.array.fill - \tcode{gslice_array} fill function
26.6.8: template.mask.array - Class template \tcode{mask_array}
26.6.8.1: template.mask.array.overview - Class template \tcode{mask_array} overview
26.6.8.2: mask.array.assign - \tcode{mask_array} assignment
26.6.8.3: mask.array.comp.assign - \tcode{mask_array} computed assignment
26.6.8.4: mask.array.fill - \tcode{mask_array} fill function
26.6.9: template.indirect.array - Class template \tcode{indirect_array}
26.6.9.1: template.indirect.array.overview - Class template \tcode{indirect_array} overview
26.6.9.2: indirect.array.assign - \tcode{indirect_array} assignment
26.6.9.3: indirect.array.comp.assign - \tcode{indirect_array} computed assignment
26.6.9.4: indirect.array.fill - \tcode{indirect_array} fill function
26.6.10: valarray.range - valarray range access
26.7: numeric.ops - Generalized numeric operations
26.7.1: numeric.ops.overview - Header \tcode{<numeric>} synopsis
26.7.2: accumulate - Accumulate
26.7.3: inner.product - Inner product
26.7.4: partial.sum - Partial sum
26.7.5: adjacent.difference - Adjacent difference
26.7.6: numeric.iota - Iota
26.8: c.math - C library
27: input.output - Input/output library
27.1: input.output.general - General
27.2: iostreams.requirements - Iostreams requirements
27.2.1: iostream.limits.imbue - Imbue limitations
27.2.2: iostreams.limits.pos - Positioning type limitations
27.2.3: iostreams.threadsafety - Thread safety
27.3: iostream.forward - Forward declarations
27.4: iostream.objects - Standard iostream objects
27.4.1: iostream.objects.overview - Overview
27.4.2: narrow.stream.objects - Narrow stream objects
27.4.3: wide.stream.objects - Wide stream objects
27.5: iostreams.base - Iostreams base classes
27.5.1: iostreams.base.overview - Overview
27.5.2: stream.types - Types
27.5.3: ios.base - Class \tcode{ios_base}
27.5.3.1: ios.types - Types
27.5.3.1.1: ios::failure - Class \tcode{ios_base::failure}
27.5.3.1.2: ios::fmtflags - Type \tcode{ios_base::fmtflags}
27.5.3.1.3: ios::iostate - Type \tcode{ios_base::iostate}
27.5.3.1.4: ios::openmode - Type \tcode{ios_base::openmode}
27.5.3.1.5: ios::seekdir - Type \tcode{ios_base::seekdir}
27.5.3.1.6: ios::Init - Class \tcode{ios_base::Init}
27.5.3.2: fmtflags.state - \tcode{ios_base} state functions
27.5.3.3: ios.base.locales - \tcode{ios_base} functions
27.5.3.4: ios.members.static - \tcode{ios_base} static members
27.5.3.5: ios.base.storage - \tcode{ios_base} storage functions
27.5.3.6: ios.base.callback - \tcode{ios_base} callbacks
27.5.3.7: ios.base.cons - \tcode{ios_base} constructors/destructor
27.5.4: fpos - Class template \tcode{fpos}
27.5.4.1: fpos.members - \tcode{fpos} members
27.5.4.2: fpos.operations - \tcode{fpos} requirements
27.5.5: ios - Class template \tcode{basic_ios}
27.5.5.1: ios.overview - Overview
27.5.5.2: basic.ios.cons - \tcode{basic_ios} constructors
27.5.5.3: basic.ios.members - Member functions
27.5.5.4: iostate.flags - \tcode{basic_ios} flags functions
27.5.6: std.ios.manip - \tcode{ios_base} manipulators
27.5.6.1: fmtflags.manip - \tcode{fmtflags} manipulators
27.5.6.2: adjustfield.manip - \tcode{adjustfield} manipulators
27.5.6.3: basefield.manip - \tcode{basefield} manipulators
27.5.6.4: floatfield.manip - \tcode{floatfield} manipulators
27.5.6.5: error.reporting - Error reporting
27.6: stream.buffers - Stream buffers
27.6.1: stream.buffers.overview - Overview
27.6.2: streambuf.reqts - Stream buffer requirements
27.6.3: streambuf - Class template \tcode{basic_streambuf<charT,traits>}
27.6.3.1: streambuf.cons - \tcode{basic_streambuf} constructors
27.6.3.2: streambuf.members - \tcode{basic_streambuf} public member functions
27.6.3.2.1: streambuf.locales - Locales
27.6.3.2.2: streambuf.buffer - Buffer management and positioning
27.6.3.2.3: streambuf.pub.get - Get area
27.6.3.2.4: streambuf.pub.pback - Putback
27.6.3.2.5: streambuf.pub.put - Put area
27.6.3.3: streambuf.protected - \tcode{basic_streambuf} protected member functions
27.6.3.3.1: streambuf.assign - Assignment
27.6.3.3.2: streambuf.get.area - Get area access
27.6.3.3.3: streambuf.put.area - Put area access
27.6.3.4: streambuf.virtuals - \tcode{basic_streambuf} virtual functions
27.6.3.4.1: streambuf.virt.locales - Locales
27.6.3.4.2: streambuf.virt.buffer - Buffer management and positioning
27.6.3.4.3: streambuf.virt.get - Get area
27.6.3.4.4: streambuf.virt.pback - Putback
27.6.3.4.5: streambuf.virt.put - Put area
27.7: iostream.format - Formatting and manipulators
27.7.1: iostream.format.overview - Overview
27.7.2: input.streams - Input streams
27.7.2.1: istream - Class template \tcode{basic_istream}
27.7.2.1.1: istream.cons - \tcode{basic_istream} constructors
27.7.2.1.2: istream.assign - Class \tcode{basic_istream} assign and swap
27.7.2.1.3: istream::sentry - Class \tcode{basic_istream::sentry}
27.7.2.2: istream.formatted - Formatted input functions
27.7.2.2.1: istream.formatted.reqmts - Common requirements
27.7.2.2.2: istream.formatted.arithmetic - Arithmetic extractors
27.7.2.2.3: istream::extractors - \tcode{basic_istream::operator\shr}
27.7.2.3: istream.unformatted - Unformatted input functions
27.7.2.4: istream.manip - Standard \tcode{basic_istream} manipulators
27.7.2.5: iostreamclass - Class template \tcode{basic_iostream}
27.7.2.5.1: iostream.cons - \tcode{basic_iostream} constructors
27.7.2.5.2: iostream.dest - \tcode{basic_iostream} destructor
27.7.2.5.3: iostream.assign - \tcode{basic_iostream} assign and swap
27.7.2.6: istream.rvalue - Rvalue stream extraction
27.7.3: output.streams - Output streams
27.7.3.1: ostream - Class template \tcode{basic_ostream}
27.7.3.2: ostream.cons - \tcode{basic_ostream} constructors
27.7.3.3: ostream.assign - Class \tcode{basic_ostream} assign and swap
27.7.3.4: ostream::sentry - Class \tcode{basic_ostream::sentry}
27.7.3.5: ostream.seeks - \tcode{basic_ostream} seek members
27.7.3.6: ostream.formatted - Formatted output functions
27.7.3.6.1: ostream.formatted.reqmts - Common requirements
27.7.3.6.2: ostream.inserters.arithmetic - Arithmetic inserters
27.7.3.6.3: ostream.inserters - \tcode{basic_ostream::operator\shl}
27.7.3.6.4: ostream.inserters.character - Character inserter function templates
27.7.3.7: ostream.unformatted - Unformatted output functions
27.7.3.8: ostream.manip - Standard \tcode{basic_ostream} manipulators
27.7.3.9: ostream.rvalue - Rvalue stream insertion
27.7.4: std.manip - Standard manipulators
27.7.5: ext.manip - Extended manipulators
27.7.6: quoted.manip - Quoted manipulators
27.8: string.streams - String-based streams
27.8.1: string.streams.overview - Overview
27.8.2: stringbuf - Class template \tcode{basic_stringbuf}
27.8.2.1: stringbuf.cons - \tcode{basic_stringbuf}  constructors
27.8.2.2: stringbuf.assign - Assign and swap
27.8.2.3: stringbuf.members - Member functions
27.8.2.4: stringbuf.virtuals - Overridden virtual functions
27.8.3: istringstream - Class template \tcode{basic_istringstream}
27.8.3.1: istringstream.cons - \tcode{basic_istringstream} constructors
27.8.3.2: istringstream.assign - Assign and swap
27.8.3.3: istringstream.members - Member functions
27.8.4: ostringstream - Class template \tcode{basic_ostringstream}
27.8.4.1: ostringstream.cons - \tcode{basic_ostringstream} constructors
27.8.4.2: ostringstream.assign - Assign and swap
27.8.4.3: ostringstream.members - Member functions
27.8.5: stringstream - Class template \tcode{basic_stringstream}
27.8.5.1: stringstream.cons - basic_stringstream constructors
27.8.5.2: stringstream.assign - Assign and swap
27.8.5.3: stringstream.members - Member functions
27.9: file.streams - File-based streams
27.9.1: fstreams - File streams
27.9.1.1: filebuf - Class template \tcode{basic_filebuf}
27.9.1.2: filebuf.cons - \tcode{basic_filebuf} constructors
27.9.1.3: filebuf.assign - Assign and swap
27.9.1.4: filebuf.members - Member functions
27.9.1.5: filebuf.virtuals - Overridden virtual functions
27.9.1.6: ifstream - Class template \tcode{basic_ifstream}
27.9.1.7: ifstream.cons - \tcode{basic_ifstream} constructors
27.9.1.8: ifstream.assign - Assign and swap
27.9.1.9: ifstream.members - Member functions
27.9.1.10: ofstream - Class template \tcode{basic_ofstream}
27.9.1.11: ofstream.cons - \tcode{basic_ofstream} constructors
27.9.1.12: ofstream.assign - Assign and swap
27.9.1.13: ofstream.members - Member functions
27.9.1.14: fstream - Class template \tcode{basic_fstream}
27.9.1.15: fstream.cons - \tcode{basic_fstream} constructors
27.9.1.16: fstream.assign - Assign and swap
27.9.1.17: fstream.members - Member functions
27.9.2: c.files - C library files
28: re - Regular expressions library
28.1: re.general - General
28.2: re.def - Definitions
28.3: re.req - Requirements
28.4: re.syn - Header \tcode{<regex>} synopsis
28.5: re.const - Namespace \tcode{std::regex_constants}
28.5.1: re.synopt - Bitmask type \tcode{syntax_option_type}
28.5.2: re.matchflag - Bitmask type \tcode{regex_constants::match_flag_type}
28.5.3: re.err - Implementation-defined \tcode{error_type}
28.6: re.badexp - Class \tcode{regex_error}
28.7: re.traits - Class template \tcode{regex_traits}
28.8: re.regex - Class template \tcode{basic_regex}
28.8.1: re.regex.const - \tcode{basic_regex} constants
28.8.2: re.regex.construct - \tcode{basic_regex} constructors
28.8.3: re.regex.assign - \tcode{basic_regex} assign
28.8.4: re.regex.operations - \tcode{basic_regex} constant operations
28.8.5: re.regex.locale - \tcode{basic_regex} locale
28.8.6: re.regex.swap - \tcode{basic_regex} swap
28.8.7: re.regex.nonmemb - \tcode{basic_regex} non-member functions
28.8.7.1: re.regex.nmswap - \tcode{basic_regex} non-member swap
28.9: re.submatch - Class template \tcode{sub_match}
28.9.1: re.submatch.members - \tcode{sub_match} members
28.9.2: re.submatch.op - \tcode{sub_match} non-member operators
28.10: re.results - Class template \tcode{match_results}
28.10.1: re.results.const - \tcode{match_results} constructors
28.10.2: re.results.state - \tcode{match_results} state
28.10.3: re.results.size - \tcode{match_results} size
28.10.4: re.results.acc - \tcode{match_results} element access
28.10.5: re.results.form - \tcode{match_results} formatting
28.10.6: re.results.all - \tcode{match_results} allocator
28.10.7: re.results.swap - \tcode{match_results} swap
28.10.8: re.results.nonmember - \tcode{match_results} non-member functions
28.11: re.alg - Regular expression algorithms
28.11.1: re.except - exceptions
28.11.2: re.alg.match - \tcode{regex_match}
28.11.3: re.alg.search - \tcode{regex_search}
28.11.4: re.alg.replace - \tcode{regex_replace}
28.12: re.iter - Regular expression iterators
28.12.1: re.regiter - Class template \tcode{regex_iterator}
28.12.1.1: re.regiter.cnstr - \tcode{regex_iterator} constructors
28.12.1.2: re.regiter.comp - \tcode{regex_iterator} comparisons
28.12.1.3: re.regiter.deref - \tcode{regex_iterator} indirection
28.12.1.4: re.regiter.incr - \tcode{regex_iterator} increment
28.12.2: re.tokiter - Class template \tcode{regex_token_iterator}
28.12.2.1: re.tokiter.cnstr - \tcode{regex_token_iterator} constructors
28.12.2.2: re.tokiter.comp - \tcode{regex_token_iterator} comparisons
28.12.2.3: re.tokiter.deref - \tcode{regex_token_iterator} indirection
28.12.2.4: re.tokiter.incr - \tcode{regex_token_iterator} increment
28.13: re.grammar - Modified ECMAScript regular expression grammar
29: atomics - Atomic operations library
29.1: atomics.general - General
29.2: atomics.syn - Header \tcode{<atomic>} synopsis
29.3: atomics.order - Order and consistency
29.4: atomics.lockfree - Lock-free property
29.5: atomics.types.generic - Atomic types
29.6: atomics.types.operations - Operations on atomic types
29.6.1: atomics.types.operations.general - General operations on atomic types
29.6.2: atomics.types.operations.templ - Templated operations on atomic types
29.6.3: atomics.types.operations.arith - Arithmetic operations on atomic types
29.6.4: atomics.types.operations.pointer - Operations on atomic pointer types
29.6.5: atomics.types.operations.req - Requirements for operations on atomic types
29.7: atomics.flag - Flag type and operations
29.8: atomics.fences - Fences
30: thread - Thread support library
30.1: thread.general - General
30.2: thread.req - Requirements
30.2.1: thread.req.paramname - Template parameter names
30.2.2: thread.req.exception - Exceptions
30.2.3: thread.req.native - Native handles
30.2.4: thread.req.timing - Timing specifications
30.2.5: thread.req.lockable - Requirements for Lockable types
30.2.5.1: thread.req.lockable.general - In general
30.2.5.2: thread.req.lockable.basic - \tcode{BasicLockable} requirements
30.2.5.3: thread.req.lockable.req - \tcode{Lockable} requirements
30.2.5.4: thread.req.lockable.timed - \tcode{TimedLockable} requirements
30.2.6: thread.decaycopy - \tcode{decay_copy}
30.3: thread.threads - Threads
30.3.1: thread.thread.class - Class \tcode{thread}
30.3.1.1: thread.thread.id - Class \tcode{thread::id}
30.3.1.2: thread.thread.constr - \tcode{thread} constructors
30.3.1.3: thread.thread.destr - \tcode{thread} destructor
30.3.1.4: thread.thread.assign - \tcode{thread} assignment
30.3.1.5: thread.thread.member - \tcode{thread} members
30.3.1.6: thread.thread.static - \tcode{thread} static members
30.3.1.7: thread.thread.algorithm - \tcode{thread} specialized algorithms
30.3.2: thread.thread.this - Namespace \tcode{this_thread}
30.4: thread.mutex - Mutual exclusion
30.4.1: thread.mutex.requirements - Mutex requirements
30.4.1.1: thread.mutex.requirements.general - In general
30.4.1.2: thread.mutex.requirements.mutex - Mutex types
30.4.1.2.1: thread.mutex.class - Class \tcode{mutex}
30.4.1.2.2: thread.mutex.recursive - Class \tcode{recursive_mutex}
30.4.1.3: thread.timedmutex.requirements - Timed mutex types
30.4.1.3.1: thread.timedmutex.class - Class \tcode{timed_mutex}
30.4.1.3.2: thread.timedmutex.recursive - Class \tcode{recursive_timed_mutex}
30.4.1.4: thread.sharedtimedmutex.requirements - Shared timed mutex types
30.4.1.4.1: thread.sharedtimedmutex.class - Class \tcode{shared_timed_mutex}
30.4.2: thread.lock - Locks
30.4.2.1: thread.lock.guard - Class template \tcode{lock_guard}
30.4.2.2: thread.lock.unique - Class template \tcode{unique_lock}
30.4.2.2.1: thread.lock.unique.cons - \tcode{unique_lock} constructors, destructor, and assignment
30.4.2.2.2: thread.lock.unique.locking - \tcode{unique_lock} locking
30.4.2.2.3: thread.lock.unique.mod - \tcode{unique_lock} modifiers
30.4.2.2.4: thread.lock.unique.obs - \tcode{unique_lock} observers
30.4.2.3: thread.lock.shared - Class template \tcode{shared_lock}
30.4.2.3.1: thread.lock.shared.cons - \tcode{shared_lock} constructors, destructor, and assignment
30.4.2.3.2: thread.lock.shared.locking - \tcode{shared_lock} locking
30.4.2.3.3: thread.lock.shared.mod - \tcode{shared_lock} modifiers
30.4.2.3.4: thread.lock.shared.obs - \tcode{shared_lock} observers
30.4.3: thread.lock.algorithm - Generic locking algorithms
30.4.4: thread.once - Call once
30.4.4.1: thread.once.onceflag - Struct \tcode{once_flag}
30.4.4.2: thread.once.callonce - Function \tcode{call_once}
30.5: thread.condition - Condition variables
30.5.1: thread.condition.condvar - Class \tcode{condition_variable}
30.5.2: thread.condition.condvarany - Class \tcode{condition_variable_any}
30.6: futures - Futures
30.6.1: futures.overview - Overview
30.6.2: futures.errors - Error handling
30.6.3: futures.future_error - Class \tcode{future_error}
30.6.4: futures.state - Shared state
30.6.5: futures.promise - Class template \tcode{promise}
30.6.6: futures.unique_future - Class template \tcode{future}
30.6.7: futures.shared_future - Class template \tcode{shared_future}
30.6.8: futures.async - Function template \tcode{async}
30.6.9: futures.task - Class template \tcode{packaged_task}
30.6.9.1: futures.task.members - \tcode{packaged_task} member functions
30.6.9.2: futures.task.nonmembers - \tcode{packaged_task} globals
A: gram - Grammar summary
A.1: gram.key - Keywords
A.2: gram.lex - Lexical conventions
A.3: gram.basic - Basic concepts
A.4: gram.expr - Expressions
A.5: gram.stmt - Statements
A.6: gram.dcl - Declarations
A.7: gram.decl - Declarators
A.8: gram.class - Classes
A.9: gram.derived - Derived classes
A.10: gram.special - Special member functions
A.11: gram.over - Overloading
A.12: gram.temp - Templates
A.13: gram.except - Exception handling
A.14: gram.cpp - Preprocessing directives
B: implimits - Implementation quantities
C: diff - Compatibility
C.1: diff.iso - \Cpp and ISO C
C.1.1: diff.lex - Clause~\ref{lex}: lexical conventions
C.1.2: diff.basic - Clause \ref{basic}: basic concepts
C.1.3: diff.conv - Clause \ref{conv}: standard conversions
C.1.4: diff.expr - Clause \ref{expr}: expressions
C.1.5: diff.stat - Clause \ref{stmt.stmt}: statements
C.1.6: diff.dcl - Clause \ref{dcl.dcl}: declarations
C.1.7: diff.decl - Clause \ref{dcl.decl}: declarators
C.1.8: diff.class - Clause \ref{class}: classes
C.1.9: diff.special - Clause \ref{special}: special member functions
C.1.10: diff.cpp - Clause \ref{cpp}: preprocessing directives
C.2: diff.cpp03 - \Cpp and ISO \CppIII
C.2.1: diff.cpp03.lex - Clause \ref{lex}: lexical conventions
C.2.2: diff.cpp03.conv - Clause~\ref{conv}: standard conversions
C.2.3: diff.cpp03.expr - Clause \ref{expr}: expressions
C.2.4: diff.cpp03.dcl.dcl - Clause \ref{dcl.dcl}: declarations
C.2.5: diff.cpp03.dcl.decl - Clause \ref{dcl.decl}: declarators
C.2.6: diff.cpp03.special - Clause \ref{special}: special member functions
C.2.7: diff.cpp03.temp - Clause \ref{temp}: templates
C.2.8: diff.cpp03.library - Clause \ref{library}: library introduction
C.2.9: diff.cpp03.language.support - Clause \ref{language.support
C.2.10: diff.cpp03.diagnostics - Clause \ref{diagnostics}: diagnostics library
C.2.11: diff.cpp03.utilities - Clause \ref{utilities}: general utilities library
C.2.12: diff.cpp03.strings - Clause \ref{strings}: strings library
C.2.13: diff.cpp03.containers - Clause \ref{containers}: containers library
C.2.14: diff.cpp03.algorithms - Clause \ref{algorithms}: algorithms library
C.2.15: diff.cpp03.numerics - Clause \ref{numerics}: numerics library
C.2.16: diff.cpp03.input.output - Clause \ref{input.output}: Input/output library
C.3: diff.cpp11 - \Cpp and ISO \CppXI
C.3.1: diff.cpp11.lex - Clause \ref{lex}: lexical conventions
C.3.2: diff.cpp11.basic - Clause \ref{basic}: basic concepts
C.3.3: diff.cpp11.dcl.dcl - Clause \ref{dcl.dcl}: declarations
C.3.4: diff.cpp11.input.output - Clause \ref{input.output}: input/output library
C.4: diff.cpp14 - \Cpp and ISO \CppXIV
C.4.1: diff.cpp14.lex - Clause \ref{lex}: lexical conventions
C.4.2: diff.cpp14.depr - Annex D: compatibility features
C.5: diff.library - C standard library
C.5.1: diff.mods.to.headers - Modifications to headers
C.5.2: diff.mods.to.definitions - Modifications to definitions
C.5.2.1: diff.char16 - Types \tcode{char16_t} and \tcode{char32_t}
C.5.2.2: diff.wchar.t - Type \tcode{wchar_t}
C.5.2.3: diff.header.iso646.h - Header \tcode{<iso646.h>}
C.5.2.4: diff.null - Macro \tcode{NULL}
C.5.3: diff.mods.to.declarations - Modifications to declarations
C.5.4: diff.mods.to.behavior - Modifications to behavior
C.5.4.1: diff.offsetof - Macro \tcode{offsetof(type, member-designator)}
C.5.4.2: diff.malloc - Memory allocation functions
D: depr - Compatibility features
D.1: depr.incr.bool - Increment operator with \tcode{bool} operand
D.2: depr.register - \tcode{register} keyword
D.3: depr.impldec - Implicit declaration of copy functions
D.4: depr.except.spec - Dynamic exception specifications
D.5: depr.c.headers - C standard library headers
D.6: depr.ios.members - Old iostreams members
D.7: depr.str.strstreams - \tcode{char*} streams
D.7.1: depr.strstreambuf - Class \tcode{strstreambuf}
D.7.1.1: depr.strstreambuf.cons - \tcode{strstreambuf} constructors
D.7.1.2: depr.strstreambuf.members - Member functions
D.7.1.3: depr.strstreambuf.virtuals - \tcode{strstreambuf} overridden virtual functions
D.7.2: depr.istrstream - Class \tcode{istrstream}
D.7.2.1: depr.istrstream.cons - \tcode{istrstream} constructors
D.7.2.2: depr.istrstream.members - Member functions
D.7.3: depr.ostrstream - Class \tcode{ostrstream}
D.7.3.1: depr.ostrstream.cons - \tcode{ostrstream} constructors
D.7.3.2: depr.ostrstream.members - Member functions
D.7.4: depr.strstream - Class \tcode{strstream}
D.7.4.1: depr.strstream.cons - \tcode{strstream} constructors
D.7.4.2: depr.strstream.dest - \tcode{strstream} destructor
D.7.4.3: depr.strstream.oper - \tcode{strstream} operations
D.8: exception.unexpected - Violating \grammarterm{exception-specification}{s}
D.8.1: unexpected.handler - Type \tcode{unexpected_handler}
D.8.2: set.unexpected - \tcode{set_unexpected}
D.8.3: get.unexpected - \tcode{get_unexpected}
D.8.4: unexpected - \tcode{unexpected}
D.9: depr.uncaught - \tcode{uncaught_exception}
E: charname - Universal character names for identifier characters
E.1: charname.allowed - Ranges of characters allowed
E.2: charname.disallowed - Ranges of characters disallowed initially
F: xref - Cross references
