1: intro.scope - Scope
2: intro.refs - Normative references
3: intro.defs - Terms and definitions
4: intro - General principles
4.1: intro.compliance - Implementation compliance
4.1.1: intro.abstract - Abstract machine
4.2: intro.structure - Structure of this document
4.3: syntax - Syntax notation
4.4: intro.ack - Acknowledgments
5: lex - Lexical conventions
5.1: lex.separate - Separate translation
5.2: lex.phases - Phases of translation
5.3: lex.charset - Character sets
5.4: lex.pptoken - Preprocessing tokens
5.5: lex.digraph - Alternative tokens
5.6: lex.token - Tokens
5.7: lex.comment - Comments
5.8: lex.header - Header names
5.9: lex.ppnumber - Preprocessing numbers
5.10: lex.name - Identifiers
5.11: lex.key - Keywords
5.12: lex.operators - Operators and punctuators
5.13: lex.literal - Literals
5.13.1: lex.literal.kinds - Kinds of literals
5.13.2: lex.icon - Integer literals
5.13.3: lex.ccon - Character literals
5.13.4: lex.fcon - Floating literals
5.13.5: lex.string - String literals
5.13.6: lex.bool - Boolean literals
5.13.7: lex.nullptr - Pointer literals
5.13.8: lex.ext - User-defined literals
6: basic - Basics
6.1: basic.def - Declarations and definitions
6.2: basic.def.odr - One-definition rule
6.3: basic.scope - Scope
6.3.1: basic.scope.declarative - Declarative regions and scopes
6.3.2: basic.scope.pdecl - Point of declaration
6.3.3: basic.scope.block - Block scope
6.3.4: basic.scope.param - Function parameter scope
6.3.5: basic.funscope - Function scope
6.3.6: basic.scope.namespace - Namespace scope
6.3.7: basic.scope.class - Class scope
6.3.8: basic.scope.enum - Enumeration scope
6.3.9: basic.scope.temp - Template parameter scope
6.3.10: basic.scope.hiding - Name hiding
6.4: basic.lookup - Name lookup
6.4.1: basic.lookup.unqual - Unqualified name lookup
6.4.2: basic.lookup.argdep - Argument-dependent name lookup
6.4.3: basic.lookup.qual - Qualified name lookup
6.4.3.1: class.qual - Class members
6.4.3.2: namespace.qual - Namespace members
6.4.4: basic.lookup.elab - Elaborated type specifiers
6.4.5: basic.lookup.classref - Class member access
6.4.6: basic.lookup.udir - Using-directives and namespace aliases
6.5: basic.link - Program and linkage
6.6: basic.memobj - Memory and objects
6.6.1: intro.memory - Memory model
6.6.2: intro.object - Object model
6.6.3: basic.life - Object lifetime
6.6.4: basic.stc - Storage duration
6.6.4.1: basic.stc.static - Static storage duration
6.6.4.2: basic.stc.thread - Thread storage duration
6.6.4.3: basic.stc.auto - Automatic storage duration
6.6.4.4: basic.stc.dynamic - Dynamic storage duration
6.6.4.4.1: basic.stc.dynamic.allocation - Allocation functions
6.6.4.4.2: basic.stc.dynamic.deallocation - Deallocation functions
6.6.4.4.3: basic.stc.dynamic.safety - Safely-derived pointers
6.6.4.5: basic.stc.inherit - Duration of subobjects
6.6.5: basic.align - Alignment
6.6.6: class.temporary - Temporary objects
6.7: basic.types - Types
6.7.1: basic.fundamental - Fundamental types
6.7.2: basic.compound - Compound types
6.7.3: basic.type.qualifier - CV-qualifiers
6.7.4: conv.rank - Integer conversion rank
6.8: basic.exec - Program execution
6.8.1: intro.execution - Sequential execution
6.8.2: intro.multithread - Multi-threaded executions and data races
6.8.2.1: intro.races - Data races
6.8.2.2: intro.progress - Forward progress
6.8.3: basic.start - Start and termination
6.8.3.1: basic.start.main - \tcode{main} function
6.8.3.2: basic.start.static - Static initialization
6.8.3.3: basic.start.dynamic - Dynamic initialization of non-local variables
6.8.3.4: basic.start.term - Termination
7: expr - Expressions
7.1: expr.pre - Preamble
7.2: expr.prop - Properties of expressions
7.2.1: basic.lval - Value category
7.2.2: expr.type - Type
7.2.3: expr.context - Context dependence
7.3: conv - Standard conversions
7.3.1: conv.lval - Lvalue-to-rvalue conversion
7.3.2: conv.array - Array-to-pointer conversion
7.3.3: conv.func - Function-to-pointer conversion
7.3.4: conv.rval - Temporary materialization conversion
7.3.5: conv.qual - Qualification conversions
7.3.6: conv.prom - Integral promotions
7.3.7: conv.fpprom - Floating-point promotion
7.3.8: conv.integral - Integral conversions
7.3.9: conv.double - Floating-point conversions
7.3.10: conv.fpint - Floating-integral conversions
7.3.11: conv.ptr - Pointer conversions
7.3.12: conv.mem - Pointer-to-member conversions
7.3.13: conv.fctptr - Function pointer conversions
7.3.14: conv.bool - Boolean conversions
7.4: expr.arith.conv - Usual arithmetic conversions
7.5: expr.prim - Primary expressions
7.5.1: expr.prim.literal - Literals
7.5.2: expr.prim.this - This
7.5.3: expr.prim.paren - Parentheses
7.5.4: expr.prim.id - Names
7.5.4.1: expr.prim.id.unqual - Unqualified names
7.5.4.2: expr.prim.id.qual - Qualified names
7.5.5: expr.prim.lambda - Lambda expressions
7.5.5.1: expr.prim.lambda.closure - Closure types
7.5.5.2: expr.prim.lambda.capture - Captures
7.5.6: expr.prim.fold - Fold expressions
7.5.7: expr.prim.req - Requires expressions
7.5.7.1: expr.prim.req.simple - Simple requirements
7.5.7.2: expr.prim.req.type - Type requirements
7.5.7.3: expr.prim.req.compound - Compound requirements
7.5.7.4: expr.prim.req.nested - Nested requirements
7.6: expr.compound - Compound expressions
7.6.1: expr.post - Postfix expressions
7.6.1.1: expr.sub - Subscripting
7.6.1.2: expr.call - Function call
7.6.1.3: expr.type.conv - Explicit type conversion (functional notation)
7.6.1.4: expr.pseudo - Pseudo destructor call
7.6.1.5: expr.ref - Class member access
7.6.1.6: expr.post.incr - Increment and decrement
7.6.1.7: expr.dynamic.cast - Dynamic cast
7.6.1.8: expr.typeid - Type identification
7.6.1.9: expr.static.cast - Static cast
7.6.1.10: expr.reinterpret.cast - Reinterpret cast
7.6.1.11: expr.const.cast - Const cast
7.6.2: expr.unary - Unary expressions
7.6.2.1: expr.unary.op - Unary operators
7.6.2.2: expr.pre.incr - Increment and decrement
7.6.2.3: expr.sizeof - Sizeof
7.6.2.4: expr.new - New
7.6.2.5: expr.delete - Delete
7.6.2.6: expr.alignof - Alignof
7.6.2.7: expr.unary.noexcept - \tcode{noexcept} operator
7.6.3: expr.cast - Explicit type conversion (cast notation)
7.6.4: expr.mptr.oper - Pointer-to-member operators
7.6.5: expr.mul - Multiplicative operators
7.6.6: expr.add - Additive operators
7.6.7: expr.shift - Shift operators
7.6.8: expr.spaceship - Three-way comparison operator
7.6.9: expr.rel - Relational operators
7.6.10: expr.eq - Equality operators
7.6.11: expr.bit.and - Bitwise AND operator
7.6.12: expr.xor - Bitwise exclusive OR operator
7.6.13: expr.or - Bitwise inclusive OR operator
7.6.14: expr.log.and - Logical AND operator
7.6.15: expr.log.or - Logical OR operator
7.6.16: expr.cond - Conditional operator
7.6.17: expr.throw - Throwing an exception
7.6.18: expr.ass - Assignment and compound assignment operators
7.6.19: expr.comma - Comma operator
7.7: expr.const - Constant expressions
8: stmt.stmt - Statements
8.1: stmt.label - Labeled statement
8.2: stmt.expr - Expression statement
8.3: stmt.block - Compound statement or block
8.4: stmt.select - Selection statements
8.4.1: stmt.if - The \tcode{if} statement
8.4.2: stmt.switch - The \tcode{switch} statement
8.5: stmt.iter - Iteration statements
8.5.1: stmt.while - The \tcode{while} statement
8.5.2: stmt.do - The \tcode{do} statement
8.5.3: stmt.for - The \tcode{for} statement
8.5.4: stmt.ranged - The range-based \tcode{for} statement
8.6: stmt.jump - Jump statements
8.6.1: stmt.break - The \tcode{break} statement
8.6.2: stmt.cont - The \tcode{continue} statement
8.6.3: stmt.return - The \tcode{return} statement
8.6.4: stmt.goto - The \tcode{goto} statement
8.7: stmt.dcl - Declaration statement
8.8: stmt.ambig - Ambiguity resolution
9: dcl.dcl - Declarations
9.1: dcl.spec - Specifiers
9.1.1: dcl.stc - Storage class specifiers
9.1.2: dcl.fct.spec - Function specifiers
9.1.3: dcl.typedef - The \tcode{typedef} specifier
9.1.4: dcl.friend - The \tcode{friend} specifier
9.1.5: dcl.constexpr - The \tcode{constexpr} specifier
9.1.6: dcl.inline - The \tcode{inline} specifier
9.1.7: dcl.type - Type specifiers
9.1.7.1: dcl.type.cv - The \fakegrammarterm{cv-qualifier}{s}
9.1.7.2: dcl.type.simple - Simple type specifiers
9.1.7.3: dcl.type.elab - Elaborated type specifiers
9.1.7.4: dcl.spec.auto - The \tcode{auto} specifier
9.1.7.4.1: dcl.type.auto.deduct - Placeholder type deduction
9.1.7.5: dcl.type.class.deduct - Deduced class template specialization types
9.2: dcl.decl - Declarators
9.2.1: dcl.name - Type names
9.2.2: dcl.ambig.res - Ambiguity resolution
9.2.3: dcl.meaning - Meaning of declarators
9.2.3.1: dcl.ptr - Pointers
9.2.3.2: dcl.ref - References
9.2.3.3: dcl.mptr - Pointers to members
9.2.3.4: dcl.array - Arrays
9.2.3.5: dcl.fct - Functions
9.2.3.6: dcl.fct.default - Default arguments
9.3: dcl.init - Initializers
9.3.1: dcl.init.aggr - Aggregates
9.3.2: dcl.init.string - Character arrays
9.3.3: dcl.init.ref - References
9.3.4: dcl.init.list - List-initialization
9.4: dcl.fct.def - Function definitions
9.4.1: dcl.fct.def.general - In general
9.4.2: dcl.fct.def.default - Explicitly-defaulted functions
9.4.3: dcl.fct.def.delete - Deleted definitions
9.5: dcl.struct.bind - Structured binding declarations
9.6: dcl.enum - Enumeration declarations
9.7: basic.namespace - Namespaces
9.7.1: namespace.def - Namespace definition
9.7.1.1: namespace.unnamed - Unnamed namespaces
9.7.1.2: namespace.memdef - Namespace member definitions
9.7.2: namespace.alias - Namespace alias
9.7.3: namespace.udir - Using directive
9.8: namespace.udecl - The \tcode{using} declaration
9.9: dcl.asm - The \tcode{asm} declaration
9.10: dcl.link - Linkage specifications
9.11: dcl.attr - Attributes
9.11.1: dcl.attr.grammar - Attribute syntax and semantics
9.11.2: dcl.align - Alignment specifier
9.11.3: dcl.attr.depend - Carries dependency attribute
9.11.4: dcl.attr.contract - Contract attributes
9.11.4.1: dcl.attr.contract.syn - Syntax
9.11.4.2: dcl.attr.contract.cond - Contract conditions
9.11.4.3: dcl.attr.contract.check - Checking contracts
9.11.5: dcl.attr.deprecated - Deprecated attribute
9.11.6: dcl.attr.fallthrough - Fallthrough attribute
9.11.7: dcl.attr.likelihood - Likelihood attributes
9.11.8: dcl.attr.unused - Maybe unused attribute
9.11.9: dcl.attr.nodiscard - Nodiscard attribute
9.11.10: dcl.attr.noreturn - Noreturn attribute
9.11.11: dcl.attr.nouniqueaddr - No unique address attribute
10: class - Classes
10.1: class.prop - Properties of classes
10.2: class.name - Class names
10.3: class.mem - Class members
10.3.1: class.mfct - Member functions
10.3.2: class.mfct.non-static - Non-static member functions
10.3.2.1: class.this - The \tcode{this} pointer
10.3.3: special - Special member functions
10.3.4: class.ctor - Constructors
10.3.4.1: class.default.ctor - Default constructors
10.3.4.2: class.copy.ctor - Copy/move constructors
10.3.5: class.copy.assign - Copy/move assignment operator
10.3.6: class.dtor - Destructors
10.3.7: class.conv - Conversions
10.3.7.1: class.conv.ctor - Conversion by constructor
10.3.7.2: class.conv.fct - Conversion functions
10.3.8: class.static - Static members
10.3.8.1: class.static.mfct - Static member functions
10.3.8.2: class.static.data - Static data members
10.3.9: class.bit - Bit-fields
10.3.10: class.nest - Nested class declarations
10.3.11: class.nested.type - Nested type names
10.4: class.union - Unions
10.4.1: class.union.anon - Anonymous unions
10.5: class.local - Local class declarations
10.6: class.derived - Derived classes
10.6.1: class.mi - Multiple base classes
10.6.2: class.virtual - Virtual functions
10.6.3: class.abstract - Abstract classes
10.7: class.member.lookup - Member name lookup
10.8: class.access - Member access control
10.8.1: class.access.spec - Access specifiers
10.8.2: class.access.base - Accessibility of base classes and base class members
10.8.3: class.friend - Friends
10.8.4: class.protected - Protected member access
10.8.5: class.access.virt - Access to virtual functions
10.8.6: class.paths - Multiple access
10.8.7: class.access.nest - Nested classes
10.9: class.init - Initialization
10.9.1: class.expl.init - Explicit initialization
10.9.2: class.base.init - Initializing bases and members
10.9.3: class.inhctor.init - Initialization by inherited constructor
10.9.4: class.cdtor - Construction and destruction
10.9.5: class.copy.elision - Copy/move elision
10.10: class.compare - Comparisons
10.10.1: class.compare.default - Defaulted comparison operator functions
10.10.2: class.spaceship - Three-way comparison
10.10.3: class.rel.eq - Other comparison operators
10.11: class.free - Free store
11: over - Overloading
11.1: over.load - Overloadable declarations
11.2: over.dcl - Declaration matching
11.3: over.match - Overload resolution
11.3.1: over.match.funcs - Candidate functions and argument lists
11.3.1.1: over.match.call - Function call syntax
11.3.1.1.1: over.call.func - Call to named function
11.3.1.1.2: over.call.object - Call to object of class type
11.3.1.2: over.match.oper - Operators in expressions
11.3.1.3: over.match.ctor - Initialization by constructor
11.3.1.4: over.match.copy - Copy-initialization of class by user-defined conversion
11.3.1.5: over.match.conv - Initialization by conversion function
11.3.1.6: over.match.ref - Initialization by conversion function for direct reference binding
11.3.1.7: over.match.list - Initialization by list-initialization
11.3.1.8: over.match.class.deduct - Class template argument deduction
11.3.2: over.match.viable - Viable functions
11.3.3: over.match.best - Best viable function
11.3.3.1: over.best.ics - Implicit conversion sequences
11.3.3.1.1: over.ics.scs - Standard conversion sequences
11.3.3.1.2: over.ics.user - User-defined conversion sequences
11.3.3.1.3: over.ics.ellipsis - Ellipsis conversion sequences
11.3.3.1.4: over.ics.ref - Reference binding
11.3.3.1.5: over.ics.list - List-initialization sequence
11.3.3.2: over.ics.rank - Ranking implicit conversion sequences
11.4: over.over - Address of overloaded function
11.5: over.oper - Overloaded operators
11.5.1: over.unary - Unary operators
11.5.2: over.binary - Binary operators
11.5.3: over.ass - Assignment
11.5.4: over.call - Function call
11.5.5: over.sub - Subscripting
11.5.6: over.ref - Class member access
11.5.7: over.inc - Increment and decrement
11.5.8: over.literal - User-defined literals
11.6: over.built - Built-in operators
12: temp - Templates
12.1: temp.param - Template parameters
12.2: temp.names - Names of template specializations
12.3: temp.arg - Template arguments
12.3.1: temp.arg.type - Template type arguments
12.3.2: temp.arg.nontype - Template non-type arguments
12.3.3: temp.arg.template - Template template arguments
12.4: temp.constr - Template constraints
12.4.1: temp.constr.constr - Constraints
12.4.1.1: temp.constr.op - Logical operations
12.4.1.2: temp.constr.atomic - Atomic constraints
12.4.2: temp.constr.decl - Constrained declarations
12.4.3: temp.constr.normal - Constraint normalization
12.4.4: temp.constr.order - Partial ordering by constraints
12.5: temp.type - Type equivalence
12.6: temp.decls - Template declarations
12.6.1: temp.class - Class templates
12.6.1.1: temp.mem.func - Member functions of class templates
12.6.1.2: temp.mem.class - Member classes of class templates
12.6.1.3: temp.static - Static data members of class templates
12.6.1.4: temp.mem.enum - Enumeration members of class templates
12.6.2: temp.mem - Member templates
12.6.3: temp.variadic - Variadic templates
12.6.4: temp.friend - Friends
12.6.5: temp.class.spec - Class template partial specializations
12.6.5.1: temp.class.spec.match - Matching of class template partial specializations
12.6.5.2: temp.class.order - Partial ordering of class template specializations
12.6.5.3: temp.class.spec.mfunc - Members of class template specializations
12.6.6: temp.fct - Function templates
12.6.6.1: temp.over.link - Function template overloading
12.6.6.2: temp.func.order - Partial ordering of function templates
12.6.7: temp.alias - Alias templates
12.6.8: temp.concept - Concept definitions
12.7: temp.res - Name resolution
12.7.1: temp.local - Locally declared names
12.7.2: temp.dep - Dependent names
12.7.2.1: temp.dep.type - Dependent types
12.7.2.2: temp.dep.expr - Type-dependent expressions
12.7.2.3: temp.dep.constexpr - Value-dependent expressions
12.7.2.4: temp.dep.temp - Dependent template arguments
12.7.3: temp.nondep - Non-dependent names
12.7.4: temp.dep.res - Dependent name resolution
12.7.4.1: temp.point - Point of instantiation
12.7.4.2: temp.dep.candidate - Candidate functions
12.7.5: temp.inject - Friend names declared within a class template
12.8: temp.spec - Template instantiation and specialization
12.8.1: temp.inst - Implicit instantiation
12.8.2: temp.explicit - Explicit instantiation
12.8.3: temp.expl.spec - Explicit specialization
12.9: temp.fct.spec - Function template specializations
12.9.1: temp.arg.explicit - Explicit template argument specification
12.9.2: temp.deduct - Template argument deduction
12.9.2.1: temp.deduct.call - Deducing template arguments from a function call
12.9.2.2: temp.deduct.funcaddr - Deducing template arguments taking the address of a function template
12.9.2.3: temp.deduct.conv - Deducing conversion function template arguments
12.9.2.4: temp.deduct.partial - Deducing template arguments during partial ordering
12.9.2.5: temp.deduct.type - Deducing template arguments from a type
12.9.2.6: temp.deduct.decl - Deducing template arguments from a function declaration
12.9.3: temp.over - Overload resolution
12.10: temp.deduct.guide - Deduction guides
13: except - Exception handling
13.1: except.throw - Throwing an exception
13.2: except.ctor - Constructors and destructors
13.3: except.handle - Handling an exception
13.4: except.spec - Exception specifications
13.5: except.special - Special functions
13.5.1: except.terminate - The \tcode{std::terminate} function
13.5.2: except.uncaught - The \tcode{std::uncaught_exceptions()} function
14: cpp - Preprocessing directives
14.1: cpp.cond - Conditional inclusion
14.2: cpp.include - Source file inclusion
14.3: cpp.replace - Macro replacement
14.3.1: cpp.subst - Argument substitution
14.3.2: cpp.stringize - The \tcode{\#} operator
14.3.3: cpp.concat - The \tcode{\#\#} operator
14.3.4: cpp.rescan - Rescanning and further replacement
14.3.5: cpp.scope - Scope of macro definitions
14.4: cpp.line - Line control
14.5: cpp.error - Error directive
14.6: cpp.pragma - Pragma directive
14.7: cpp.null - Null directive
14.8: cpp.predefined - Predefined macro names
14.9: cpp.pragma.op - Pragma operator
15: library - Library introduction
15.1: library.general - General
15.2: library.c - The C standard library
15.3: definitions - Definitions
15.4: description - Method of description (Informative)
15.4.1: structure - Structure of each clause
15.4.1.1: structure.elements - Elements
15.4.1.2: structure.summary - Summary
15.4.1.3: structure.requirements - Requirements
15.4.1.4: structure.specifications - Detailed specifications
15.4.1.5: structure.see.also - C library
15.4.2: conventions - Other conventions
15.4.2.1: type.descriptions - Type descriptions
15.4.2.1.1: type.descriptions.general - General
15.4.2.1.2: expos.only.types - Exposition-only types
15.4.2.1.3: enumerated.types - Enumerated types
15.4.2.1.4: bitmask.types - Bitmask types
15.4.2.1.5: character.seq - Character sequences
15.4.2.1.5.1: byte.strings - Byte strings
15.4.2.1.5.2: multibyte.strings - Multibyte strings
15.4.2.1.6: customization.point.object - Customization Point Object types
15.4.2.2: functions.within.classes - Functions within classes
15.4.2.3: operators - Operators
15.4.2.4: objects.within.classes - Private members
15.5: requirements - Library-wide requirements
15.5.1: organization - Library contents and organization
15.5.1.1: contents - Library contents
15.5.1.2: headers - Headers
15.5.1.3: compliance - Freestanding implementations
15.5.2: using - Using the library
15.5.2.1: using.overview - Overview
15.5.2.2: using.headers - Headers
15.5.2.3: using.linkage - Linkage
15.5.3: utility.requirements - Requirements on types and expressions
15.5.3.1: utility.arg.requirements - Template argument requirements
15.5.3.2: swappable.requirements - Swappable requirements
15.5.3.3: nullablepointer.requirements - \oldconcept{NullablePointer} requirements
15.5.3.4: hash.requirements - \oldconcept{Hash} requirements
15.5.3.5: allocator.requirements - \oldconcept{Allocator} requirements
15.5.3.5.1: allocator.requirements.completeness - Allocator completeness requirements
15.5.4: constraints - Constraints on programs
15.5.4.1: constraints.overview - Overview
15.5.4.2: namespace.constraints - Namespace use
15.5.4.2.1: namespace.std - Namespace \tcode{std}
15.5.4.2.2: namespace.posix - Namespace \tcode{posix}
15.5.4.2.3: namespace.future - Namespaces for future standardization
15.5.4.3: reserved.names - Reserved names
15.5.4.3.1: zombie.names - Zombie names
15.5.4.3.2: macro.names - Macro names
15.5.4.3.3: extern.names - External linkage
15.5.4.3.4: extern.types - Types
15.5.4.3.5: usrlit.suffix - User-defined literal suffixes
15.5.4.4: alt.headers - Headers
15.5.4.5: derived.classes - Derived classes
15.5.4.6: replacement.functions - Replacement functions
15.5.4.7: handler.functions - Handler functions
15.5.4.8: res.on.functions - Other functions
15.5.4.9: res.on.arguments - Function arguments
15.5.4.10: res.on.objects - Library object access
15.5.4.11: res.on.required - Requires paragraph
15.5.4.12: res.on.requirements - Semantic requirements
15.5.5: conforming - Conforming implementations
15.5.5.1: conforming.overview - Overview
15.5.5.2: res.on.headers - Headers
15.5.5.3: res.on.macro.definitions - Restrictions on macro definitions
15.5.5.4: global.functions - Non-member functions
15.5.5.5: member.functions - Member functions
15.5.5.6: constexpr.functions - Constexpr functions and constructors
15.5.5.7: algorithm.stable - Requirements for stable algorithms
15.5.5.8: reentrancy - Reentrancy
15.5.5.9: res.on.data.races - Data race avoidance
15.5.5.10: protection.within.classes - Protection within classes
15.5.5.11: derivation - Derived classes
15.5.5.12: res.on.exception.handling - Restrictions on exception handling
15.5.5.13: res.on.pointer.storage - Restrictions on storage of pointers
15.5.5.14: value.error.codes - Value of error codes
15.5.5.15: lib.types.movedfrom - Moved-from state of library types
16: language.support - Language support library
16.1: support.general - General
16.2: support.types - Common definitions
16.2.1: cstddef.syn - Header \tcode{<cstddef>} synopsis
16.2.2: cstdlib.syn - Header \tcode{<cstdlib>} synopsis
16.2.3: support.types.nullptr - Null pointers
16.2.4: support.types.layout - Sizes, alignments, and offsets
16.2.5: support.types.byteops - \tcode{byte} type operations
16.3: support.limits - Implementation properties
16.3.1: support.limits.general - General
16.3.2: limits.syn - Header \tcode{<limits>} synopsis
16.3.3: fp.style - Floating-point type properties
16.3.3.1: round.style - Type \tcode{float_round_style}
16.3.3.2: denorm.style - Type \tcode{float_denorm_style}
16.3.4: numeric.limits - Class template \tcode{numeric_limits}
16.3.4.1: numeric.limits.members - \tcode{numeric_limits} members
16.3.4.2: numeric.special - \tcode{numeric_limits} specializations
16.3.5: climits.syn - Header \tcode{<climits>} synopsis
16.3.6: cfloat.syn - Header \tcode{<cfloat>} synopsis
16.4: cstdint - Integer types
16.4.1: cstdint.syn - Header \tcode{<cstdint>} synopsis
16.5: support.start.term - Start and termination
16.6: support.dynamic - Dynamic memory management
16.6.1: new.syn - Header \tcode{<new>} synopsis
16.6.2: new.delete - Storage allocation and deallocation
16.6.2.1: new.delete.single - Single-object forms
16.6.2.2: new.delete.array - Array forms
16.6.2.3: new.delete.placement - Non-allocating forms
16.6.2.4: new.delete.dataraces - Data races
16.6.3: alloc.errors - Storage allocation errors
16.6.3.1: bad.alloc - Class \tcode{bad_alloc}
16.6.3.2: new.badlength - Class \tcode{bad_array_new_length}
16.6.3.3: new.handler - Type \tcode{new_handler}
16.6.3.4: set.new.handler - \tcode{set_new_handler}
16.6.3.5: get.new.handler - \tcode{get_new_handler}
16.6.4: ptr.launder - Pointer optimization barrier
16.6.5: hardware.interference - Hardware interference size
16.7: support.rtti - Type identification
16.7.1: typeinfo.syn - Header \tcode{<typeinfo>} synopsis
16.7.2: type.info - Class \tcode{type_info}
16.7.3: bad.cast - Class \tcode{bad_cast}
16.7.4: bad.typeid - Class \tcode{bad_typeid}
16.8: support.contract - Contract violation handling
16.8.1: contract.syn - Header \tcode{<contract>} synopsis
16.8.2: support.contract.cviol - Class \tcode{contract_violation}
16.9: support.exception - Exception handling
16.9.1: exception.syn - Header \tcode{<exception>} synopsis
16.9.2: exception - Class \tcode{exception}
16.9.3: bad.exception - Class \tcode{bad_exception}
16.9.4: exception.terminate - Abnormal termination
16.9.4.1: terminate.handler - Type \tcode{terminate_handler}
16.9.4.2: set.terminate - \tcode{set_terminate}
16.9.4.3: get.terminate - \tcode{get_terminate}
16.9.4.4: terminate - \tcode{terminate}
16.9.5: uncaught.exceptions - \tcode{uncaught_exceptions}
16.9.6: propagation - Exception propagation
16.9.7: except.nested - \tcode{nested_exception}
16.10: support.initlist - Initializer lists
16.10.1: initializer_list.syn - Header \tcode{<initializer_list>} synopsis
16.10.2: support.initlist.cons - Initializer list constructors
16.10.3: support.initlist.access - Initializer list access
16.10.4: support.initlist.range - Initializer list range access
16.11: cmp - Comparisons
16.11.1: compare.syn - Header \tcode{<compare>} synopsis
16.11.2: cmp.categories - Comparison category types
16.11.2.1: cmp.categories.pre - Preamble
16.11.2.2: cmp.weakeq - Class \tcode{weak_equality}
16.11.2.3: cmp.strongeq - Class \tcode{strong_equality}
16.11.2.4: cmp.partialord - Class \tcode{partial_ordering}
16.11.2.5: cmp.weakord - Class \tcode{weak_ordering}
16.11.2.6: cmp.strongord - Class \tcode{strong_ordering}
16.11.3: cmp.common - Class template \tcode{common_comparison_category}
16.11.4: cmp.alg - Comparison algorithms
16.12: support.runtime - Other runtime support
16.12.1: cstdarg.syn - Header \tcode{<cstdarg>} synopsis
16.12.2: csetjmp.syn - Header \tcode{<csetjmp>} synopsis
16.12.3: csignal.syn - Header \tcode{<csignal>} synopsis
16.12.4: support.signal - Signal handlers
17: concepts - Concepts library
17.1: concepts.general - General
17.2: concepts.equality - Equality preservation
17.3: concepts.syn - Header \tcode{<concepts>} synopsis
17.4: concepts.lang - Language-related concepts
17.4.1: concepts.lang.general - General
17.4.2: concept.same - Concept \libconcept{Same}
17.4.3: concept.derivedfrom - Concept \libconcept{DerivedFrom}
17.4.4: concept.convertibleto - Concept \libconcept{ConvertibleTo}
17.4.5: concept.commonref - Concept \libconcept{CommonReference}
17.4.6: concept.common - Concept \libconcept{Common}
17.4.7: concepts.integral - Integral concepts
17.4.8: concept.assignable - Concept \libconcept{Assignable}
17.4.9: concept.swappable - Concept \libconcept{Swappable}
17.4.10: concept.destructible - Concept \libconcept{Destructible}
17.4.11: concept.constructible - Concept \libconcept{Constructible}
17.4.12: concept.defaultconstructible - Concept \libconcept{DefaultConstructible}
17.4.13: concept.moveconstructible - Concept \libconcept{MoveConstructible}
17.4.14: concept.copyconstructible - Concept \libconcept{CopyConstructible}
17.5: concepts.compare - Comparison concepts
17.5.1: concepts.compare.general - General
17.5.2: concept.boolean - Concept \libconcept{Boolean}
17.5.3: concept.equalitycomparable - Concept \libconcept{EqualityComparable}
17.5.4: concept.stricttotallyordered - Concept \libconcept{StrictTotallyOrdered}
17.6: concepts.object - Object concepts
17.7: concepts.callable - Callable concepts
17.7.1: concepts.callable.general - General
17.7.2: concept.invocable - Concept \libconcept{Invocable}
17.7.3: concept.regularinvocable - Concept \libconcept{RegularInvocable}
17.7.4: concept.predicate - Concept \libconcept{Predicate}
17.7.5: concept.relation - Concept \libconcept{Relation}
17.7.6: concept.strictweakorder - Concept \libconcept{StrictWeakOrder}
18: diagnostics - Diagnostics library
18.1: diagnostics.general - General
18.2: std.exceptions - Exception classes
18.2.1: stdexcept.syn - Header \tcode{<stdexcept>} synopsis
18.2.2: logic.error - Class \tcode{logic_error}
18.2.3: domain.error - Class \tcode{domain_error}
18.2.4: invalid.argument - Class \tcode{invalid_argument}
18.2.5: length.error - Class \tcode{length_error}
18.2.6: out.of.range - Class \tcode{out_of_range}
18.2.7: runtime.error - Class \tcode{runtime_error}
18.2.8: range.error - Class \tcode{range_error}
18.2.9: overflow.error - Class \tcode{overflow_error}
18.2.10: underflow.error - Class \tcode{underflow_error}
18.3: assertions - Assertions
18.3.1: cassert.syn - Header \tcode{<cassert>} synopsis
18.3.2: assertions.assert - The \tcode{assert} macro
18.4: errno - Error numbers
18.4.1: cerrno.syn - Header \tcode{<cerrno>} synopsis
18.5: syserr - System error support
18.5.1: system_error.syn - Header \tcode{<system_error>} synopsis
18.5.2: syserr.errcat - Class \tcode{error_category}
18.5.2.1: syserr.errcat.overview - Overview
18.5.2.2: syserr.errcat.virtuals - Virtual members
18.5.2.3: syserr.errcat.nonvirtuals - Non-virtual members
18.5.2.4: syserr.errcat.derived - Program-defined classes derived from \tcode{error_category}
18.5.2.5: syserr.errcat.objects - Error category objects
18.5.3: syserr.errcode - Class \tcode{error_code}
18.5.3.1: syserr.errcode.overview - Overview
18.5.3.2: syserr.errcode.constructors - Constructors
18.5.3.3: syserr.errcode.modifiers - Modifiers
18.5.3.4: syserr.errcode.observers - Observers
18.5.3.5: syserr.errcode.nonmembers - Non-member functions
18.5.4: syserr.errcondition - Class \tcode{error_condition}
18.5.4.1: syserr.errcondition.overview - Overview
18.5.4.2: syserr.errcondition.constructors - Constructors
18.5.4.3: syserr.errcondition.modifiers - Modifiers
18.5.4.4: syserr.errcondition.observers - Observers
18.5.4.5: syserr.errcondition.nonmembers - Non-member functions
18.5.5: syserr.compare - Comparison functions
18.5.6: syserr.hash - System error hash support
18.5.7: syserr.syserr - Class \tcode{system_error}
18.5.7.1: syserr.syserr.overview - Overview
18.5.7.2: syserr.syserr.members - Members
19: utilities - General utilities library
19.1: utilities.general - General
19.2: utility - Utility components
19.2.1: utility.syn - Header \tcode{<utility>} synopsis
19.2.2: utility.swap - \tcode{swap}
19.2.3: utility.exchange - \tcode{exchange}
19.2.4: forward - Forward/move helpers
19.2.5: utility.as_const - Function template \tcode{as_const}
19.2.6: declval - Function template \tcode{declval}
19.3: intseq - Compile-time integer sequences
19.3.1: intseq.general - In general
19.3.2: intseq.intseq - Class template \tcode{integer_sequence}
19.3.3: intseq.make - Alias template \tcode{make_integer_sequence}
19.4: pairs - Pairs
19.4.1: pairs.general - In general
19.4.2: pairs.pair - Class template \tcode{pair}
19.4.3: pairs.spec - Specialized algorithms
19.4.4: pair.astuple - Tuple-like access to pair
19.4.5: pair.piecewise - Piecewise construction
19.5: tuple - Tuples
19.5.1: tuple.general - In general
19.5.2: tuple.syn - Header \tcode{<tuple>} synopsis
19.5.3: tuple.tuple - Class template \tcode{tuple}
19.5.3.1: tuple.cnstr - Construction
19.5.3.2: tuple.assign - Assignment
19.5.3.3: tuple.swap - \tcode{swap}
19.5.3.4: tuple.creation - Tuple creation functions
19.5.3.5: tuple.apply - Calling a function with a \tcode{tuple} of arguments
19.5.3.6: tuple.helper - Tuple helper classes
19.5.3.7: tuple.elem - Element access
19.5.3.8: tuple.rel - Relational operators
19.5.3.9: tuple.traits - Tuple traits
19.5.3.10: tuple.special - Tuple specialized algorithms
19.6: optional - Optional objects
19.6.1: optional.general - In general
19.6.2: optional.syn - Header \tcode{<optional>} synopsis
19.6.3: optional.optional - Class template \tcode{optional}
19.6.3.1: optional.ctor - Constructors
19.6.3.2: optional.dtor - Destructor
19.6.3.3: optional.assign - Assignment
19.6.3.4: optional.swap - Swap
19.6.3.5: optional.observe - Observers
19.6.3.6: optional.mod - Modifiers
19.6.4: optional.nullopt - No-value state indicator
19.6.5: optional.bad.access - Class \tcode{bad_optional_access}
19.6.6: optional.relops - Relational operators
19.6.7: optional.nullops - Comparison with \tcode{nullopt}
19.6.8: optional.comp_with_t - Comparison with \tcode{T}
19.6.9: optional.specalg - Specialized algorithms
19.6.10: optional.hash - Hash support
19.7: variant - Variants
19.7.1: variant.general - In general
19.7.2: variant.syn - Header \tcode{<variant>} synopsis
19.7.3: variant.variant - Class template \tcode{variant}
19.7.3.1: variant.ctor - Constructors
19.7.3.2: variant.dtor - Destructor
19.7.3.3: variant.assign - Assignment
19.7.3.4: variant.mod - Modifiers
19.7.3.5: variant.status - Value status
19.7.3.6: variant.swap - Swap
19.7.4: variant.helper - \tcode{variant} helper classes
19.7.5: variant.get - Value access
19.7.6: variant.relops - Relational operators
19.7.7: variant.visit - Visitation
19.7.8: variant.monostate - Class \tcode{monostate}
19.7.9: variant.monostate.relops - \tcode{monostate} relational operators
19.7.10: variant.specalg - Specialized algorithms
19.7.11: variant.bad.access - Class \tcode{bad_variant_access}
19.7.12: variant.hash - Hash support
19.8: any - Storage for any type
19.8.1: any.synop - Header \tcode{<any>} synopsis
19.8.2: any.bad_any_cast - Class \tcode{bad_any_cast}
19.8.3: any.class - Class \tcode{any}
19.8.3.1: any.cons - Construction and destruction
19.8.3.2: any.assign - Assignment
19.8.3.3: any.modifiers - Modifiers
19.8.3.4: any.observers - Observers
19.8.4: any.nonmembers - Non-member functions
19.9: bitset - Bitsets
19.9.1: bitset.syn - Header \tcode{<bitset>} synopsis
19.9.2: template.bitset - Class template \tcode{bitset}
19.9.2.1: bitset.cons - \tcode{bitset} constructors
19.9.2.2: bitset.members - \tcode{bitset} members
19.9.3: bitset.hash - \tcode{bitset} hash support
19.9.4: bitset.operators - \tcode{bitset} operators
19.10: memory - Memory
19.10.1: memory.general - In general
19.10.2: memory.syn - Header \tcode{<memory>} synopsis
19.10.3: pointer.traits - Pointer traits
19.10.3.1: pointer.traits.types - Pointer traits member types
19.10.3.2: pointer.traits.functions - Pointer traits member functions
19.10.3.3: pointer.traits.optmem - Pointer traits optional members
19.10.4: pointer.conversion - Pointer conversion
19.10.5: util.dynamic.safety - Pointer safety
19.10.6: ptr.align - Align
19.10.7: allocator.tag - Allocator argument tag
19.10.8: allocator.uses - \tcode{uses_allocator}
19.10.8.1: allocator.uses.trait - \tcode{uses_allocator} trait
19.10.8.2: allocator.uses.construction - Uses-allocator construction
19.10.9: allocator.traits - Allocator traits
19.10.9.1: allocator.traits.types - Allocator traits member types
19.10.9.2: allocator.traits.members - Allocator traits static member functions
19.10.10: default.allocator - The default allocator
19.10.10.1: allocator.members - \tcode{allocator} members
19.10.10.2: allocator.globals - \tcode{allocator} globals
19.10.11: specialized.algorithms - Specialized algorithms
19.10.11.1: specialized.addressof - \tcode{addressof}
19.10.11.2: uninitialized.construct.default - \tcode{uninitialized_default_construct}
19.10.11.3: uninitialized.construct.value - \tcode{uninitialized_value_construct}
19.10.11.4: uninitialized.copy - \tcode{uninitialized_copy}
19.10.11.5: uninitialized.move - \tcode{uninitialized_move}
19.10.11.6: uninitialized.fill - \tcode{uninitialized_fill}
19.10.11.7: specialized.destroy - \tcode{destroy}
19.10.12: c.malloc - C library memory allocation
19.11: smartptr - Smart pointers
19.11.1: unique.ptr - Class template \tcode{unique_ptr}
19.11.1.1: unique.ptr.dltr - Default deleters
19.11.1.1.1: unique.ptr.dltr.general - In general
19.11.1.1.2: unique.ptr.dltr.dflt - \tcode{default_delete}
19.11.1.1.3: unique.ptr.dltr.dflt1 - \tcode{default_delete<T[]>}
19.11.1.2: unique.ptr.single - \tcode{unique_ptr} for single objects
19.11.1.2.1: unique.ptr.single.ctor - Constructors
19.11.1.2.2: unique.ptr.single.dtor - Destructor
19.11.1.2.3: unique.ptr.single.asgn - Assignment
19.11.1.2.4: unique.ptr.single.observers - Observers
19.11.1.2.5: unique.ptr.single.modifiers - Modifiers
19.11.1.3: unique.ptr.runtime - \tcode{unique_ptr} for array objects with a runtime length
19.11.1.3.1: unique.ptr.runtime.ctor - Constructors
19.11.1.3.2: unique.ptr.runtime.asgn - Assignment
19.11.1.3.3: unique.ptr.runtime.observers - Observers
19.11.1.3.4: unique.ptr.runtime.modifiers - Modifiers
19.11.1.4: unique.ptr.create - Creation
19.11.1.5: unique.ptr.special - Specialized algorithms
19.11.1.6: unique.ptr.io - I/O
19.11.2: util.smartptr.weak.bad - Class \tcode{bad_weak_ptr}
19.11.3: util.smartptr.shared - Class template \tcode{shared_ptr}
19.11.3.1: util.smartptr.shared.const - Constructors
19.11.3.2: util.smartptr.shared.dest - Destructor
19.11.3.3: util.smartptr.shared.assign - Assignment
19.11.3.4: util.smartptr.shared.mod - Modifiers
19.11.3.5: util.smartptr.shared.obs - Observers
19.11.3.6: util.smartptr.shared.create - Creation
19.11.3.7: util.smartptr.shared.cmp - Comparison
19.11.3.8: util.smartptr.shared.spec - Specialized algorithms
19.11.3.9: util.smartptr.shared.cast - Casts
19.11.3.10: util.smartptr.getdeleter - \tcode{get_deleter}
19.11.3.11: util.smartptr.shared.io - I/O
19.11.4: util.smartptr.weak - Class template \tcode{weak_ptr}
19.11.4.1: util.smartptr.weak.const - Constructors
19.11.4.2: util.smartptr.weak.dest - Destructor
19.11.4.3: util.smartptr.weak.assign - Assignment
19.11.4.4: util.smartptr.weak.mod - Modifiers
19.11.4.5: util.smartptr.weak.obs - Observers
19.11.4.6: util.smartptr.weak.spec - Specialized algorithms
19.11.5: util.smartptr.ownerless - Class template \tcode{owner_less}
19.11.6: util.smartptr.enab - Class template \tcode{enable_shared_from_this}
19.11.7: util.smartptr.hash - Smart pointer hash support
19.11.8: util.smartptr.atomic - Atomic specializations for smart pointers
19.11.8.1: util.smartptr.atomic.shared - Atomic specialization for \tcode{shared_ptr}
19.11.8.2: util.smartptr.atomic.weak - Atomic specialization for \tcode{weak_ptr}
19.12: mem.res - Memory resources
19.12.1: mem.res.syn - Header \tcode{<memory_resource>} synopsis
19.12.2: mem.res.class - Class \tcode{memory_resource}
19.12.2.1: mem.res.public - \tcode{memory_resource} public member functions
19.12.2.2: mem.res.private - \tcode{memory_resource} private virtual member functions
19.12.2.3: mem.res.eq - \tcode{memory_resource} equality
19.12.3: mem.poly.allocator.class - Class template \tcode{polymorphic_allocator}
19.12.3.1: mem.poly.allocator.ctor - \tcode{polymorphic_allocator} constructors
19.12.3.2: mem.poly.allocator.mem - \tcode{polymorphic_allocator} member functions
19.12.3.3: mem.poly.allocator.eq - \tcode{polymorphic_allocator} equality
19.12.4: mem.res.global - Access to program-wide \tcode{memory_resource} objects
19.12.5: mem.res.pool - Pool resource classes
19.12.5.1: mem.res.pool.overview - Classes \tcode{synchronized_pool_resource} and \tcode{unsynchronized_pool_resource}
19.12.5.2: mem.res.pool.options - \tcode{pool_options} data members
19.12.5.3: mem.res.pool.ctor - Pool resource constructors and destructors
19.12.5.4: mem.res.pool.mem - Pool resource members
19.12.6: mem.res.monotonic.buffer - Class \tcode{monotonic_buffer_resource}
19.12.6.1: mem.res.monotonic.buffer.ctor - \tcode{monotonic_buffer_resource} constructor and destructor
19.12.6.2: mem.res.monotonic.buffer.mem - \tcode{monotonic_buffer_resource} members
19.13: allocator.adaptor - Class template \tcode{scoped_allocator_adaptor}
19.13.1: allocator.adaptor.syn - Header \tcode{<scoped_allocator>} synopsis
19.13.2: allocator.adaptor.types - Scoped allocator adaptor member types
19.13.3: allocator.adaptor.cnstr - Scoped allocator adaptor constructors
19.13.4: allocator.adaptor.members - Scoped allocator adaptor members
19.13.5: scoped.adaptor.operators - Scoped allocator operators
19.14: function.objects - Function objects
19.14.1: functional.syn - Header \tcode{<functional>} synopsis
19.14.2: func.def - Definitions
19.14.3: func.require - Requirements
19.14.4: func.invoke - Function template \tcode{invoke}
19.14.5: refwrap - Class template \tcode{reference_wrapper}
19.14.5.1: refwrap.const - \tcode{reference_wrapper} construct/copy/destroy
19.14.5.2: refwrap.assign - \tcode{reference_wrapper} assignment
19.14.5.3: refwrap.access - \tcode{reference_wrapper} access
19.14.5.4: refwrap.invoke - \tcode{reference_wrapper} invocation
19.14.5.5: refwrap.helpers - \tcode{reference_wrapper} helper functions
19.14.6: arithmetic.operations - Arithmetic operations
19.14.6.1: arithmetic.operations.plus - Class template \tcode{plus}
19.14.6.2: arithmetic.operations.minus - Class template \tcode{minus}
19.14.6.3: arithmetic.operations.multiplies - Class template \tcode{multiplies}
19.14.6.4: arithmetic.operations.divides - Class template \tcode{divides}
19.14.6.5: arithmetic.operations.modulus - Class template \tcode{modulus}
19.14.6.6: arithmetic.operations.negate - Class template \tcode{negate}
19.14.7: comparisons - Comparisons
19.14.7.1: comparisons.equal_to - Class template \tcode{equal_to}
19.14.7.2: comparisons.not_equal_to - Class template \tcode{not_equal_to}
19.14.7.3: comparisons.greater - Class template \tcode{greater}
19.14.7.4: comparisons.less - Class template \tcode{less}
19.14.7.5: comparisons.greater_equal - Class template \tcode{greater_equal}
19.14.7.6: comparisons.less_equal - Class template \tcode{less_equal}
19.14.8: logical.operations - Logical operations
19.14.8.1: logical.operations.and - Class template \tcode{logical_and}
19.14.8.2: logical.operations.or - Class template \tcode{logical_or}
19.14.8.3: logical.operations.not - Class template \tcode{logical_not}
19.14.9: bitwise.operations - Bitwise operations
19.14.9.1: bitwise.operations.and - Class template \tcode{bit_and}
19.14.9.2: bitwise.operations.or - Class template \tcode{bit_or}
19.14.9.3: bitwise.operations.xor - Class template \tcode{bit_xor}
19.14.9.4: bitwise.operations.not - Class template \tcode{bit_not}
19.14.10: func.identity - Class \tcode{identity}
19.14.11: func.not_fn - Function template \tcode{not_fn}
19.14.12: func.bind - Function object binders
19.14.12.1: func.bind.isbind - Class template \tcode{is_bind_expression}
19.14.12.2: func.bind.isplace - Class template \tcode{is_placeholder}
19.14.12.3: func.bind.bind - Function template \tcode{bind}
19.14.12.4: func.bind.place - Placeholders
19.14.13: func.memfn - Function template \tcode{mem_fn}
19.14.14: func.wrap - Polymorphic function wrappers
19.14.14.1: func.wrap.badcall - Class \tcode{bad_function_call}
19.14.14.1.1: func.wrap.badcall.const - \tcode{bad_function_call} constructor
19.14.14.2: func.wrap.func - Class template \tcode{function}
19.14.14.2.1: func.wrap.func.con - \tcode{function} construct/copy/destroy
19.14.14.2.2: func.wrap.func.mod - \tcode{function} modifiers
19.14.14.2.3: func.wrap.func.cap - \tcode{function} capacity
19.14.14.2.4: func.wrap.func.inv - \tcode{function} invocation
19.14.14.2.5: func.wrap.func.targ - \tcode{function} target access
19.14.14.2.6: func.wrap.func.nullptr - null pointer comparison functions
19.14.14.2.7: func.wrap.func.alg - specialized algorithms
19.14.15: func.search - Searchers
19.14.15.1: func.search.default - Class template \tcode{default_searcher}
19.14.15.2: func.search.bm - Class template \tcode{boyer_moore_searcher}
19.14.15.3: func.search.bmh - Class template \tcode{boyer_moore_horspool_searcher}
19.14.16: unord.hash - Class template \tcode{hash}
19.15: meta - Metaprogramming and type traits
19.15.1: meta.rqmts - Requirements
19.15.2: meta.type.synop - Header \tcode{<type_traits>} synopsis
19.15.3: meta.help - Helper classes
19.15.4: meta.unary - Unary type traits
19.15.4.1: meta.unary.cat - Primary type categories
19.15.4.2: meta.unary.comp - Composite type traits
19.15.4.3: meta.unary.prop - Type properties
19.15.5: meta.unary.prop.query - Type property queries
19.15.6: meta.rel - Relationships between types
19.15.7: meta.trans - Transformations between types
19.15.7.1: meta.trans.cv - Const-volatile modifications
19.15.7.2: meta.trans.ref - Reference modifications
19.15.7.3: meta.trans.sign - Sign modifications
19.15.7.4: meta.trans.arr - Array modifications
19.15.7.5: meta.trans.ptr - Pointer modifications
19.15.7.6: meta.trans.other - Other transformations
19.15.8: meta.logical - Logical operator traits
19.15.9: meta.endian - Endian
19.16: ratio - Compile-time rational arithmetic
19.16.1: ratio.general - In general
19.16.2: ratio.syn - Header \tcode{<ratio>} synopsis
19.16.3: ratio.ratio - Class template \tcode{ratio}
19.16.4: ratio.arithmetic - Arithmetic on \tcode{ratio}{s}
19.16.5: ratio.comparison - Comparison of \tcode{ratio}{s}
19.16.6: ratio.si - SI types for \tcode{ratio}
19.17: type.index - Class \tcode{type_index}
19.17.1: type.index.synopsis - Header \tcode{<typeindex>} synopsis
19.17.2: type.index.overview - \tcode{type_index} overview
19.17.3: type.index.members - \tcode{type_index} members
19.17.4: type.index.hash - Hash support
19.18: execpol - Execution policies
19.18.1: execpol.general - In general
19.18.2: execution.syn - Header \tcode{<execution>} synopsis
19.18.3: execpol.type - Execution policy type trait
19.18.4: execpol.seq - Sequenced execution policy
19.18.5: execpol.par - Parallel execution policy
19.18.6: execpol.parunseq - Parallel and unsequenced execution policy
19.18.7: execpol.objects - Execution policy objects
19.19: charconv - Primitive numeric conversions
19.19.1: charconv.syn - Header \tcode{<charconv>} synopsis
19.19.2: charconv.to.chars - Primitive numeric output conversion
19.19.3: charconv.from.chars - Primitive numeric input conversion
20: strings - Strings library
20.1: strings.general - General
20.2: char.traits - Character traits
20.2.1: char.traits.require - Character traits requirements
20.2.2: char.traits.typedefs - Traits typedefs
20.2.3: char.traits.specializations - \tcode{char_traits} specializations
20.2.3.1: char.traits.specializations.char - \tcode{struct char_traits<char>}
20.2.3.2: char.traits.specializations.char16_t - \tcode{struct char_traits<char16_t>}
20.2.3.3: char.traits.specializations.char32_t - \tcode{struct char_traits<char32_t>}
20.2.3.4: char.traits.specializations.wchar.t - \tcode{struct char_traits<wchar_t>}
20.3: string.classes - String classes
20.3.1: string.syn - Header \tcode{<string>} synopsis
20.3.2: basic.string - Class template \tcode{basic_string}
20.3.2.1: string.require - General requirements
20.3.2.2: string.cons - Constructors and assignment operators
20.3.2.3: string.iterators - Iterator support
20.3.2.4: string.capacity - Capacity
20.3.2.5: string.access - Element access
20.3.2.6: string.modifiers - Modifiers
20.3.2.6.1: string.op+= - \tcode{basic_string::operator+=}
20.3.2.6.2: string.append - \tcode{basic_string::append}
20.3.2.6.3: string.assign - \tcode{basic_string::assign}
20.3.2.6.4: string.insert - \tcode{basic_string::insert}
20.3.2.6.5: string.erase - \tcode{basic_string::erase}
20.3.2.6.6: string.replace - \tcode{basic_string::replace}
20.3.2.6.7: string.copy - \tcode{basic_string::copy}
20.3.2.6.8: string.swap - \tcode{basic_string::swap}
20.3.2.7: string.ops - String operations
20.3.2.7.1: string.accessors - Accessors
20.3.2.7.2: string.find - \tcode{basic_string::find}
20.3.2.7.3: string.rfind - \tcode{basic_string::rfind}
20.3.2.7.4: string.find.first.of - \tcode{basic_string::find_first_of}
20.3.2.7.5: string.find.last.of - \tcode{basic_string::find_last_of}
20.3.2.7.6: string.find.first.not.of - \tcode{basic_string::find_first_not_of}
20.3.2.7.7: string.find.last.not.of - \tcode{basic_string::find_last_not_of}
20.3.2.7.8: string.substr - \tcode{basic_string::substr}
20.3.2.7.9: string.compare - \tcode{basic_string::compare}
20.3.2.7.10: string.starts.with - \tcode{basic_string::starts_with}
20.3.2.7.11: string.ends.with - \tcode{basic_string::ends_with}
20.3.3: string.nonmembers - Non-member functions
20.3.3.1: string.op+ - \tcode{operator+}
20.3.3.2: string.operator== - \tcode{operator==}
20.3.3.3: string.op!= - \tcode{operator!=}
20.3.3.4: string.op< - \tcode{operator<}
20.3.3.5: string.op> - \tcode{operator>}
20.3.3.6: string.op<= - \tcode{operator<=}
20.3.3.7: string.op>= - \tcode{operator>=}
20.3.3.8: string.special - \tcode{swap}
20.3.3.9: string.io - Inserters and extractors
20.3.4: string.conversions - Numeric conversions
20.3.5: basic.string.hash - Hash support
20.3.6: basic.string.literals - Suffix for \tcode{basic_string} literals
20.4: string.view - String view classes
20.4.1: string.view.synop - Header \tcode{<string_view>} synopsis
20.4.2: string.view.template - Class template \tcode{basic_string_view}
20.4.2.1: string.view.cons - Construction and assignment
20.4.2.2: string.view.iterators - Iterator support
20.4.2.3: string.view.capacity - Capacity
20.4.2.4: string.view.access - Element access
20.4.2.5: string.view.modifiers - Modifiers
20.4.2.6: string.view.ops - String operations
20.4.2.7: string.view.find - Searching
20.4.3: string.view.comparison - Non-member comparison functions
20.4.4: string.view.io - Inserters and extractors
20.4.5: string.view.hash - Hash support
20.4.6: string.view.literals - Suffix for \tcode{basic_string_view} literals
20.5: c.strings - Null-terminated sequence utilities
20.5.1: cctype.syn - Header \tcode{<cctype>} synopsis
20.5.2: cwctype.syn - Header \tcode{<cwctype>} synopsis
20.5.3: cstring.syn - Header \tcode{<cstring>} synopsis
20.5.4: cwchar.syn - Header \tcode{<cwchar>} synopsis
20.5.5: cuchar.syn - Header \tcode{<cuchar>} synopsis
20.5.6: c.mb.wcs - Multibyte / wide string and character conversion functions
21: containers - Containers library
21.1: containers.general - General
21.2: container.requirements - Container requirements
21.2.1: container.requirements.general - General container requirements
21.2.2: container.requirements.dataraces - Container data races
21.2.3: sequence.reqmts - Sequence containers
21.2.4: container.node - Node handles
21.2.4.1: container.node.overview - Overview
21.2.4.2: container.node.cons - Constructors, copy, and assignment
21.2.4.3: container.node.dtor - Destructor
21.2.4.4: container.node.observers - Observers
21.2.4.5: container.node.modifiers - Modifiers
21.2.5: container.insert.return - Insert return type
21.2.6: associative.reqmts - Associative containers
21.2.6.1: associative.reqmts.except - Exception safety guarantees
21.2.7: unord.req - Unordered associative containers
21.2.7.1: unord.req.except - Exception safety guarantees
21.3: sequences - Sequence containers
21.3.1: sequences.general - In general
21.3.2: array.syn - Header \tcode{<array>} synopsis
21.3.3: deque.syn - Header \tcode{<deque>} synopsis
21.3.4: forward_list.syn - Header \tcode{<forward_list>} synopsis
21.3.5: list.syn - Header \tcode{<list>} synopsis
21.3.6: vector.syn - Header \tcode{<vector>} synopsis
21.3.7: array - Class template \tcode{array}
21.3.7.1: array.overview - Overview
21.3.7.2: array.cons - Constructors, copy, and assignment
21.3.7.3: array.members - Member functions
21.3.7.4: array.special - Specialized algorithms
21.3.7.5: array.zero - Zero-sized arrays
21.3.7.6: array.tuple - Tuple interface
21.3.8: deque - Class template \tcode{deque}
21.3.8.1: deque.overview - Overview
21.3.8.2: deque.cons - Constructors, copy, and assignment
21.3.8.3: deque.capacity - Capacity
21.3.8.4: deque.modifiers - Modifiers
21.3.9: forwardlist - Class template \tcode{forward_list}
21.3.9.1: forwardlist.overview - Overview
21.3.9.2: forwardlist.cons - Constructors, copy, and assignment
21.3.9.3: forwardlist.iter - Iterators
21.3.9.4: forwardlist.access - Element access
21.3.9.5: forwardlist.modifiers - Modifiers
21.3.9.6: forwardlist.ops - Operations
21.3.10: list - Class template \tcode{list}
21.3.10.1: list.overview - Overview
21.3.10.2: list.cons - Constructors, copy, and assignment
21.3.10.3: list.capacity - Capacity
21.3.10.4: list.modifiers - Modifiers
21.3.10.5: list.ops - Operations
21.3.11: vector - Class template \tcode{vector}
21.3.11.1: vector.overview - Overview
21.3.11.2: vector.cons - Constructors, copy, and assignment
21.3.11.3: vector.capacity - Capacity
21.3.11.4: vector.data - Data
21.3.11.5: vector.modifiers - Modifiers
21.3.12: vector.bool - Class \tcode{vector<bool>}
21.4: associative - Associative containers
21.4.1: associative.general - In general
21.4.2: associative.map.syn - Header \tcode{<map>} synopsis
21.4.3: associative.set.syn - Header \tcode{<set>} synopsis
21.4.4: map - Class template \tcode{map}
21.4.4.1: map.overview - Overview
21.4.4.2: map.cons - Constructors, copy, and assignment
21.4.4.3: map.access - Element access
21.4.4.4: map.modifiers - Modifiers
21.4.5: multimap - Class template \tcode{multimap}
21.4.5.1: multimap.overview - Overview
21.4.5.2: multimap.cons - Constructors
21.4.5.3: multimap.modifiers - Modifiers
21.4.6: set - Class template \tcode{set}
21.4.6.1: set.overview - Overview
21.4.6.2: set.cons - Constructors, copy, and assignment
21.4.7: multiset - Class template \tcode{multiset}
21.4.7.1: multiset.overview - Overview
21.4.7.2: multiset.cons - Constructors
21.5: unord - Unordered associative containers
21.5.1: unord.general - In general
21.5.2: unord.map.syn - Header \tcode{<unordered_map>} synopsis
21.5.3: unord.set.syn - Header \tcode{<unordered_set>} synopsis
21.5.4: unord.map - Class template \tcode{unordered_map}
21.5.4.1: unord.map.overview - Overview
21.5.4.2: unord.map.cnstr - Constructors
21.5.4.3: unord.map.elem - Element access
21.5.4.4: unord.map.modifiers - Modifiers
21.5.5: unord.multimap - Class template \tcode{unordered_multimap}
21.5.5.1: unord.multimap.overview - Overview
21.5.5.2: unord.multimap.cnstr - Constructors
21.5.5.3: unord.multimap.modifiers - Modifiers
21.5.6: unord.set - Class template \tcode{unordered_set}
21.5.6.1: unord.set.overview - Overview
21.5.6.2: unord.set.cnstr - Constructors
21.5.7: unord.multiset - Class template \tcode{unordered_multiset}
21.5.7.1: unord.multiset.overview - Overview
21.5.7.2: unord.multiset.cnstr - Constructors
21.6: container.adaptors - Container adaptors
21.6.1: container.adaptors.general - In general
21.6.2: queue.syn - Header \tcode{<queue>} synopsis
21.6.3: stack.syn - Header \tcode{<stack>} synopsis
21.6.4: queue - Class template \tcode{queue}
21.6.4.1: queue.defn - Definition
21.6.4.2: queue.cons - Constructors
21.6.4.3: queue.cons.alloc - Constructors with allocators
21.6.4.4: queue.ops - Operators
21.6.4.5: queue.special - Specialized algorithms
21.6.5: priority.queue - Class template \tcode{priority_queue}
21.6.5.1: priqueue.overview - Overview
21.6.5.2: priqueue.cons - Constructors
21.6.5.3: priqueue.cons.alloc - Constructors with allocators
21.6.5.4: priqueue.members - Members
21.6.5.5: priqueue.special - Specialized algorithms
21.6.6: stack - Class template \tcode{stack}
21.6.6.1: stack.defn - Definition
21.6.6.2: stack.cons - Constructors
21.6.6.3: stack.cons.alloc - Constructors with allocators
21.6.6.4: stack.ops - Operators
21.6.6.5: stack.special - Specialized algorithms
21.7: views - Views
21.7.1: views.general - General
21.7.2: span.syn - Header \tcode{<span>} synopsis
21.7.3: views.span - Class template \tcode{span}
21.7.3.1: span.overview - Overview
21.7.3.2: span.cons - Constructors, copy, and assignment
21.7.3.3: span.sub - Subviews
21.7.3.4: span.obs - Observers
21.7.3.5: span.elem - Element access
21.7.3.6: span.iterators - Iterator support
21.7.3.7: span.comparison - Comparison operators
21.7.3.8: span.objectrep - Views of object representation
22: iterators - Iterators library
22.1: iterators.general - General
22.2: iterator.requirements - Iterator requirements
22.2.1: iterator.requirements.general - In general
22.2.2: iterator.iterators - \oldconcept{Iterator}
22.2.3: input.iterators - Input iterators
22.2.4: output.iterators - Output iterators
22.2.5: forward.iterators - Forward iterators
22.2.6: bidirectional.iterators - Bidirectional iterators
22.2.7: random.access.iterators - Random access iterators
22.3: iterator.synopsis - Header \tcode{<iterator>}\ synopsis
22.4: iterator.primitives - Iterator primitives
22.4.1: iterator.traits - Iterator traits
22.4.2: std.iterator.tags - Standard iterator tags
22.4.3: iterator.operations - Iterator operations
22.5: predef.iterators - Iterator adaptors
22.5.1: reverse.iterators - Reverse iterators
22.5.1.1: reverse.iterator - Class template \tcode{reverse_iterator}
22.5.1.2: reverse.iter.requirements - \tcode{reverse_iterator} requirements
22.5.1.3: reverse.iter.cons - \tcode{reverse_iterator} construction and assignment
22.5.1.4: reverse.iter.conv - Conversion
22.5.1.5: reverse.iter.elem - \tcode{reverse_iterator} element access
22.5.1.6: reverse.iter.nav - \tcode{reverse_iterator} navigation
22.5.1.7: reverse.iter.cmp - \tcode{reverse_iterator} comparisons
22.5.1.8: reverse.iter.nonmember - Non-member functions
22.5.2: insert.iterators - Insert iterators
22.5.2.1: back.insert.iterator - Class template \tcode{back_insert_iterator}
22.5.2.1.1: back.insert.iter.ops - \tcode{back_insert_iterator} operations
22.5.2.1.2: back.inserter -  \tcode{back_inserter}
22.5.2.2: front.insert.iterator - Class template \tcode{front_insert_iterator}
22.5.2.2.1: front.insert.iter.ops - \tcode{front_insert_iterator} operations
22.5.2.2.2: front.inserter - \tcode{front_inserter}
22.5.2.3: insert.iterator - Class template \tcode{insert_iterator}
22.5.2.3.1: insert.iter.ops - \tcode{insert_iterator} operations
22.5.2.3.2: inserter - \tcode{inserter}
22.5.3: move.iterators - Move iterators
22.5.3.1: move.iterator - Class template \tcode{move_iterator}
22.5.3.2: move.iter.requirements - \tcode{move_iterator} requirements
22.5.3.3: move.iter.cons - \tcode{move_iterator} construction and assignment
22.5.3.4: move.iter.op.conv - \tcode{move_iterator} conversion
22.5.3.5: move.iter.elem - \tcode{move_iterator} element access
22.5.3.6: move.iter.nav - \tcode{move_iterator} navigation
22.5.3.7: move.iter.op.comp - \tcode{move_iterator} comparisons
22.5.3.8: move.iter.nonmember - \tcode{move_iterator} non-member functions
22.6: stream.iterators - Stream iterators
22.6.1: istream.iterator - Class template \tcode{istream_iterator}
22.6.1.1: istream.iterator.cons - \tcode{istream_iterator} constructors and destructor
22.6.1.2: istream.iterator.ops - \tcode{istream_iterator} operations
22.6.2: ostream.iterator - Class template \tcode{ostream_iterator}
22.6.2.1: ostream.iterator.cons.des - \tcode{ostream_iterator} constructors and destructor
22.6.2.2: ostream.iterator.ops - \tcode{ostream_iterator} operations
22.6.3: istreambuf.iterator - Class template \tcode{istreambuf_iterator}
22.6.3.1: istreambuf.iterator.proxy - Class \tcode{istreambuf_iterator::proxy}
22.6.3.2: istreambuf.iterator.cons - \tcode{istreambuf_iterator} constructors
22.6.3.3: istreambuf.iterator.ops - \tcode{istreambuf_iterator} operations
22.6.4: ostreambuf.iterator - Class template \tcode{ostreambuf_iterator}
22.6.4.1: ostreambuf.iter.cons - \tcode{ostreambuf_iterator} constructors
22.6.4.2: ostreambuf.iter.ops - \tcode{ostreambuf_iterator} operations
22.7: iterator.range - Range access
22.8: iterator.container - Container and view access
23: algorithms - Algorithms library
23.1: algorithms.general - General
23.2: algorithms.requirements - Algorithms requirements
23.3: algorithms.parallel - Parallel algorithms
23.3.1: algorithms.parallel.defns - Terms and definitions
23.3.2: algorithms.parallel.user - Requirements on user-provided function objects
23.3.3: algorithms.parallel.exec - Effect of execution policies on algorithm execution
23.3.4: algorithms.parallel.exceptions - Parallel algorithm exceptions
23.3.5: algorithms.parallel.overloads - \tcode{ExecutionPolicy} algorithm overloads
23.4: algorithm.syn - Header \tcode{<algorithm>} synopsis
23.5: alg.nonmodifying - Non-modifying sequence operations
23.5.1: alg.all_of - All of
23.5.2: alg.any_of - Any of
23.5.3: alg.none_of - None of
23.5.4: alg.foreach - For each
23.5.5: alg.find - Find
23.5.6: alg.find.end - Find end
23.5.7: alg.find.first.of - Find first
23.5.8: alg.adjacent.find - Adjacent find
23.5.9: alg.count - Count
23.5.10: mismatch - Mismatch
23.5.11: alg.equal - Equal
23.5.12: alg.is_permutation - Is permutation
23.5.13: alg.search - Search
23.6: alg.modifying.operations - Mutating sequence operations
23.6.1: alg.copy - Copy
23.6.2: alg.move - Move
23.6.3: alg.swap - Swap
23.6.4: alg.transform - Transform
23.6.5: alg.replace - Replace
23.6.6: alg.fill - Fill
23.6.7: alg.generate - Generate
23.6.8: alg.remove - Remove
23.6.9: alg.unique - Unique
23.6.10: alg.reverse - Reverse
23.6.11: alg.rotate - Rotate
23.6.12: alg.random.sample - Sample
23.6.13: alg.random.shuffle - Shuffle
23.6.14: alg.shift - Shift
23.7: alg.sorting - Sorting and related operations
23.7.1: alg.sort - Sorting
23.7.1.1: sort - \tcode{sort}
23.7.1.2: stable.sort - \tcode{stable_sort}
23.7.1.3: partial.sort - \tcode{partial_sort}
23.7.1.4: partial.sort.copy - \tcode{partial_sort_copy}
23.7.1.5: is.sorted - \tcode{is_sorted}
23.7.2: alg.nth.element - Nth element
23.7.3: alg.binary.search - Binary search
23.7.3.1: lower.bound - \tcode{lower_bound}
23.7.3.2: upper.bound - \tcode{upper_bound}
23.7.3.3: equal.range - \tcode{equal_range}
23.7.3.4: binary.search - \tcode{binary_search}
23.7.4: alg.partitions - Partitions
23.7.5: alg.merge - Merge
23.7.6: alg.set.operations - Set operations on sorted structures
23.7.6.1: includes - \tcode{includes}
23.7.6.2: set.union - \tcode{set_union}
23.7.6.3: set.intersection - \tcode{set_intersection}
23.7.6.4: set.difference - \tcode{set_difference}
23.7.6.5: set.symmetric.difference - \tcode{set_symmetric_difference}
23.7.7: alg.heap.operations - Heap operations
23.7.7.1: push.heap - \tcode{push_heap}
23.7.7.2: pop.heap - \tcode{pop_heap}
23.7.7.3: make.heap - \tcode{make_heap}
23.7.7.4: sort.heap - \tcode{sort_heap}
23.7.7.5: is.heap - \tcode{is_heap}
23.7.8: alg.min.max - Minimum and maximum
23.7.9: alg.clamp - Bounded value
23.7.10: alg.lex.comparison - Lexicographical comparison
23.7.11: alg.3way - Three-way comparison algorithms
23.7.12: alg.permutation.generators - Permutation generators
23.8: numeric.ops.overview - Header \tcode{<numeric>} synopsis
23.9: numeric.ops - Generalized numeric operations
23.9.1: accumulate - Accumulate
23.9.2: reduce - Reduce
23.9.3: inner.product - Inner product
23.9.4: transform.reduce - Transform reduce
23.9.5: partial.sum - Partial sum
23.9.6: exclusive.scan - Exclusive scan
23.9.7: inclusive.scan - Inclusive scan
23.9.8: transform.exclusive.scan - Transform exclusive scan
23.9.9: transform.inclusive.scan - Transform inclusive scan
23.9.10: adjacent.difference - Adjacent difference
23.9.11: numeric.iota - Iota
23.9.12: numeric.ops.gcd - Greatest common divisor
23.9.13: numeric.ops.lcm - Least common multiple
23.10: alg.c.library - C library algorithms
24: numerics - Numerics library
24.1: numerics.general - General
24.2: numerics.defns - Definitions
24.3: numeric.requirements - Numeric type requirements
24.4: cfenv - The floating-point environment
24.4.1: cfenv.syn - Header \tcode{<cfenv>} synopsis
24.5: complex.numbers - Complex numbers
24.5.1: complex.syn - Header \tcode{<complex>} synopsis
24.5.2: complex - Class template \tcode{complex}
24.5.3: complex.special - \tcode{complex} specializations
24.5.4: complex.members - \tcode{complex} member functions
24.5.5: complex.member.ops - \tcode{complex} member operators
24.5.6: complex.ops - \tcode{complex} non-member operations
24.5.7: complex.value.ops - \tcode{complex} value operations
24.5.8: complex.transcendentals - \tcode{complex} transcendentals
24.5.9: cmplx.over - Additional overloads
24.5.10: complex.literals - Suffixes for complex number literals
24.6: bit - Bit manipulation
24.6.1: bit.general - General
24.6.2: bit.syn - Header \tcode{<bit>} synopsis
24.6.3: bit.cast - Function template \tcode{bit_cast}
24.6.4: bit.pow.two - Integral powers of 2
24.7: rand - Random number generation
24.7.1: rand.synopsis - Header \tcode{<random>} synopsis
24.7.2: rand.req - Requirements
24.7.2.1: rand.req.genl - General requirements
24.7.2.2: rand.req.seedseq - Seed sequence requirements
24.7.2.3: rand.req.urng - Uniform random bit generator requirements
24.7.2.4: rand.req.eng - Random number engine requirements
24.7.2.5: rand.req.adapt - Random number engine adaptor requirements
24.7.2.6: rand.req.dist - Random number distribution requirements
24.7.3: rand.eng - Random number engine class templates
24.7.3.1: rand.eng.lcong - Class template \tcode{linear_congruential_engine}
24.7.3.2: rand.eng.mers - Class template \tcode{mersenne_twister_engine}
24.7.3.3: rand.eng.sub - Class template \tcode{subtract_with_carry_engine}
24.7.4: rand.adapt - Random number engine adaptor class templates
24.7.4.1: rand.adapt.general - In general
24.7.4.2: rand.adapt.disc - Class template \tcode{discard_block_engine}
24.7.4.3: rand.adapt.ibits - Class template \tcode{independent_bits_engine}
24.7.4.4: rand.adapt.shuf - Class template \tcode{shuffle_order_engine}
24.7.5: rand.predef - Engines and engine adaptors with predefined parameters
24.7.6: rand.device - Class \tcode{random_device}
24.7.7: rand.util - Utilities
24.7.7.1: rand.util.seedseq - Class \tcode{seed_seq}
24.7.7.2: rand.util.canonical - Function template \tcode{generate_canonical}
24.7.8: rand.dist - Random number distribution class templates
24.7.8.1: rand.dist.general - In general
24.7.8.2: rand.dist.uni - Uniform distributions
24.7.8.2.1: rand.dist.uni.int - Class template \tcode{uniform_int_distribution}
24.7.8.2.2: rand.dist.uni.real - Class template \tcode{uniform_real_distribution}
24.7.8.3: rand.dist.bern - Bernoulli distributions
24.7.8.3.1: rand.dist.bern.bernoulli - Class \tcode{bernoulli_distribution}
24.7.8.3.2: rand.dist.bern.bin - Class template \tcode{binomial_distribution}
24.7.8.3.3: rand.dist.bern.geo - Class template \tcode{geometric_distribution}
24.7.8.3.4: rand.dist.bern.negbin - Class template \tcode{negative_binomial_distribution}
24.7.8.4: rand.dist.pois - Poisson distributions
24.7.8.4.1: rand.dist.pois.poisson - Class template \tcode{poisson_distribution}
24.7.8.4.2: rand.dist.pois.exp - Class template \tcode{exponential_distribution}
24.7.8.4.3: rand.dist.pois.gamma - Class template \tcode{gamma_distribution}
24.7.8.4.4: rand.dist.pois.weibull - Class template \tcode{weibull_distribution}
24.7.8.4.5: rand.dist.pois.extreme - Class template \tcode{extreme_value_distribution}
24.7.8.5: rand.dist.norm - Normal distributions
24.7.8.5.1: rand.dist.norm.normal - Class template \tcode{normal_distribution}
24.7.8.5.2: rand.dist.norm.lognormal - Class template \tcode{lognormal_distribution}
24.7.8.5.3: rand.dist.norm.chisq - Class template \tcode{chi_squared_distribution}
24.7.8.5.4: rand.dist.norm.cauchy - Class template \tcode{cauchy_distribution}
24.7.8.5.5: rand.dist.norm.f - Class template \tcode{fisher_f_distribution}
24.7.8.5.6: rand.dist.norm.t - Class template \tcode{student_t_distribution}
24.7.8.6: rand.dist.samp - Sampling distributions
24.7.8.6.1: rand.dist.samp.discrete - Class template \tcode{discrete_distribution}
24.7.8.6.2: rand.dist.samp.pconst - Class template \tcode{piecewise_constant_distribution}
24.7.8.6.3: rand.dist.samp.plinear - Class template \tcode{piecewise_linear_distribution}
24.7.9: c.math.rand - Low-quality random number generation
24.8: numarray - Numeric arrays
24.8.1: valarray.syn - Header \tcode{<valarray>} synopsis
24.8.2: template.valarray - Class template \tcode{valarray}
24.8.2.1: template.valarray.overview - Class template \tcode{valarray} overview
24.8.2.2: valarray.cons - \tcode{valarray} constructors
24.8.2.3: valarray.assign - \tcode{valarray} assignment
24.8.2.4: valarray.access - \tcode{valarray} element access
24.8.2.5: valarray.sub - \tcode{valarray} subset operations
24.8.2.6: valarray.unary - \tcode{valarray} unary operators
24.8.2.7: valarray.cassign - \tcode{valarray} compound assignment
24.8.2.8: valarray.members - \tcode{valarray} member functions
24.8.3: valarray.nonmembers - \tcode{valarray} non-member operations
24.8.3.1: valarray.binary - \tcode{valarray} binary operators
24.8.3.2: valarray.comparison - \tcode{valarray} logical operators
24.8.3.3: valarray.transcend - \tcode{valarray} transcendentals
24.8.3.4: valarray.special - \tcode{valarray} specialized algorithms
24.8.4: class.slice - Class \tcode{slice}
24.8.4.1: class.slice.overview - Class \tcode{slice} overview
24.8.4.2: cons.slice - \tcode{slice} constructors
24.8.4.3: slice.access - \tcode{slice} access functions
24.8.5: template.slice.array - Class template \tcode{slice_array}
24.8.5.1: template.slice.array.overview - Class template \tcode{slice_array} overview
24.8.5.2: slice.arr.assign - \tcode{slice_array} assignment
24.8.5.3: slice.arr.comp.assign - \tcode{slice_array} compound assignment
24.8.5.4: slice.arr.fill - \tcode{slice_array} fill function
24.8.6: class.gslice - The \tcode{gslice} class
24.8.6.1: class.gslice.overview - The \tcode{gslice} class overview
24.8.6.2: gslice.cons - \tcode{gslice} constructors
24.8.6.3: gslice.access - \tcode{gslice} access functions
24.8.7: template.gslice.array - Class template \tcode{gslice_array}
24.8.7.1: template.gslice.array.overview - Class template \tcode{gslice_array} overview
24.8.7.2: gslice.array.assign - \tcode{gslice_array} assignment
24.8.7.3: gslice.array.comp.assign - \tcode{gslice_array} compound assignment
24.8.7.4: gslice.array.fill - \tcode{gslice_array} fill function
24.8.8: template.mask.array - Class template \tcode{mask_array}
24.8.8.1: template.mask.array.overview - Class template \tcode{mask_array} overview
24.8.8.2: mask.array.assign - \tcode{mask_array} assignment
24.8.8.3: mask.array.comp.assign - \tcode{mask_array} compound assignment
24.8.8.4: mask.array.fill - \tcode{mask_array} fill function
24.8.9: template.indirect.array - Class template \tcode{indirect_array}
24.8.9.1: template.indirect.array.overview - Class template \tcode{indirect_array} overview
24.8.9.2: indirect.array.assign - \tcode{indirect_array} assignment
24.8.9.3: indirect.array.comp.assign - \tcode{indirect_array} compound assignment
24.8.9.4: indirect.array.fill - \tcode{indirect_array} fill function
24.8.10: valarray.range - \tcode{valarray} range access
24.9: c.math - Mathematical functions for floating-point types
24.9.1: cmath.syn - Header \tcode{<cmath>} synopsis
24.9.2: c.math.abs - Absolute values
24.9.3: c.math.hypot3 - Three-dimensional hypotenuse
24.9.4: c.math.fpclass - Classification / comparison functions
24.9.5: sf.cmath - Mathematical special functions
24.9.5.1: sf.cmath.assoc_laguerre - Associated Laguerre polynomials
24.9.5.2: sf.cmath.assoc_legendre - Associated Legendre functions
24.9.5.3: sf.cmath.beta - Beta function
24.9.5.4: sf.cmath.comp_ellint_1 - Complete elliptic integral of the first kind
24.9.5.5: sf.cmath.comp_ellint_2 - Complete elliptic integral of the second kind
24.9.5.6: sf.cmath.comp_ellint_3 - Complete elliptic integral of the third kind
24.9.5.7: sf.cmath.cyl_bessel_i - Regular modified cylindrical Bessel functions
24.9.5.8: sf.cmath.cyl_bessel_j - Cylindrical Bessel functions of the first kind
24.9.5.9: sf.cmath.cyl_bessel_k - Irregular modified cylindrical Bessel functions
24.9.5.10: sf.cmath.cyl_neumann - Cylindrical Neumann functions
24.9.5.11: sf.cmath.ellint_1 - Incomplete elliptic integral of the first kind
24.9.5.12: sf.cmath.ellint_2 - Incomplete elliptic integral of the second kind
24.9.5.13: sf.cmath.ellint_3 - Incomplete elliptic integral of the third kind
24.9.5.14: sf.cmath.expint - Exponential integral
24.9.5.15: sf.cmath.hermite - Hermite polynomials
24.9.5.16: sf.cmath.laguerre - Laguerre polynomials
24.9.5.17: sf.cmath.legendre - Legendre polynomials
24.9.5.18: sf.cmath.riemann_zeta - Riemann zeta function
24.9.5.19: sf.cmath.sph_bessel - Spherical Bessel functions of the first kind
24.9.5.20: sf.cmath.sph_legendre - Spherical associated Legendre functions
24.9.5.21: sf.cmath.sph_neumann - Spherical Neumann functions
25: time - Time library
25.1: time.general - General
25.2: time.syn - Header \tcode{<chrono>} synopsis
25.3: time.clock.req - \oldconcept{Clock} requirements
25.4: time.traits - Time-related traits
25.4.1: time.traits.is_fp - \tcode{treat_as_floating_point}
25.4.2: time.traits.duration_values - \tcode{duration_values}
25.4.3: time.traits.specializations - Specializations of \tcode{common_type}
25.4.4: time.traits.is_clock - Class template \tcode{is_clock}
25.5: time.duration - Class template \tcode{duration}
25.5.1: time.duration.cons - Constructors
25.5.2: time.duration.observer - Observer
25.5.3: time.duration.arithmetic - Arithmetic
25.5.4: time.duration.special - Special values
25.5.5: time.duration.nonmember - Non-member arithmetic
25.5.6: time.duration.comparisons - Comparisons
25.5.7: time.duration.cast - \tcode{duration_cast}
25.5.8: time.duration.literals - Suffixes for duration literals
25.5.9: time.duration.alg - Algorithms
25.5.10: time.duration.io - I/O
25.6: time.point - Class template \tcode{time_point}
25.6.1: time.point.cons - Constructors
25.6.2: time.point.observer - Observer
25.6.3: time.point.arithmetic - Arithmetic
25.6.4: time.point.special - Special values
25.6.5: time.point.nonmember - Non-member arithmetic
25.6.6: time.point.comparisons - Comparisons
25.6.7: time.point.cast - \tcode{time_point_cast}
25.7: time.clock - Clocks
25.7.1: time.clock.system - Class \tcode{system_clock}
25.7.1.1: time.clock.system.overview - Overview
25.7.1.2: time.clock.system.members - Members
25.7.1.3: time.clock.system.nonmembers - Non-member functions
25.7.2: time.clock.utc - Class \tcode{utc_clock}
25.7.2.1: time.clock.utc.overview - Overview
25.7.2.2: time.clock.utc.members - Member functions
25.7.2.3: time.clock.utc.nonmembers - Non-member functions
25.7.3: time.clock.tai - Class \tcode{tai_clock}
25.7.3.1: time.clock.tai.overview - Overview
25.7.3.2: time.clock.tai.members - Member functions
25.7.3.3: time.clock.tai.nonmembers - Non-member functions
25.7.4: time.clock.gps - Class \tcode{gps_clock}
25.7.4.1: time.clock.gps.overview - Overview
25.7.4.2: time.clock.gps.members - Member functions
25.7.4.3: time.clock.gps.nonmembers - Non-member functions
25.7.5: time.clock.file - Class \tcode{file_clock}
25.7.5.1: time.clock.file.overview - Overview
25.7.5.2: time.clock.file.members - Member functions
25.7.5.3: time.clock.file.nonmembers - Non-member functions
25.7.6: time.clock.steady - Class \tcode{steady_clock}
25.7.7: time.clock.hires - Class \tcode{high_resolution_clock}
25.7.8: time.clock.local - Local time
25.7.9: time.clock.cast - \tcode{time_point} conversions
25.7.9.1: time.clock.conv - Class template \tcode{clock_time_conversion}
25.7.9.2: time.clock.cast.id - Identity conversions
25.7.9.3: time.clock.cast.sys.utc - Conversions between \tcode{system_clock} and \tcode{utc_clock}
25.7.9.4: time.clock.cast.sys - Conversions between \tcode{system_clock} and other clocks
25.7.9.5: time.clock.cast.utc - Conversions between \tcode{utc_clock} and other clocks
25.7.9.6: time.clock.cast.fn - Function template \tcode{clock_cast}
25.8: time.cal - The civil calendar
25.8.1: time.cal.general - In general
25.8.2: time.cal.last - Class \tcode{last_spec}
25.8.3: time.cal.day - Class \tcode{day}
25.8.3.1: time.cal.day.overview - Overview
25.8.3.2: time.cal.day.members - Member functions
25.8.3.3: time.cal.day.nonmembers - Non-member functions
25.8.4: time.cal.month - Class \tcode{month}
25.8.4.1: time.cal.month.overview - Overview
25.8.4.2: time.cal.month.members - Member functions
25.8.4.3: time.cal.month.nonmembers - Non-member functions
25.8.5: time.cal.year - Class \tcode{year}
25.8.5.1: time.cal.year.overview - Overview
25.8.5.2: time.cal.year.members - Member functions
25.8.5.3: time.cal.year.nonmembers - Non-member functions
25.8.6: time.cal.wd - Class \tcode{weekday}
25.8.6.1: time.cal.wd.overview - Overview
25.8.6.2: time.cal.wd.members - Member functions
25.8.6.3: time.cal.wd.nonmembers - Non-member functions
25.8.7: time.cal.wdidx - Class \tcode{weekday_indexed}
25.8.7.1: time.cal.wdidx.overview - Overview
25.8.7.2: time.cal.wdidx.members - Member functions
25.8.7.3: time.cal.wdidx.nonmembers - Non-member functions
25.8.8: time.cal.wdlast - Class \tcode{weekday_last}
25.8.8.1: time.cal.wdlast.overview - Overview
25.8.8.2: time.cal.wdlast.members - Member functions
25.8.8.3: time.cal.wdlast.nonmembers - Non-member functions
25.8.9: time.cal.md - Class \tcode{month_day}
25.8.9.1: time.cal.md.overview - Overview
25.8.9.2: time.cal.md.members - Member functions
25.8.9.3: time.cal.md.nonmembers - Non-member functions
25.8.10: time.cal.mdlast - Class \tcode{month_day_last}
25.8.11: time.cal.mwd - Class \tcode{month_weekday}
25.8.11.1: time.cal.mwd.overview - Overview
25.8.11.2: time.cal.mwd.members - Member functions
25.8.11.3: time.cal.mwd.nonmembers - Non-member functions
25.8.12: time.cal.mwdlast - Class \tcode{month_weekday_last}
25.8.12.1: time.cal.mwdlast.overview - Overview
25.8.12.2: time.cal.mwdlast.members - Member functions
25.8.12.3: time.cal.mwdlast.nonmembers - Non-member functions
25.8.13: time.cal.ym - Class \tcode{year_month}
25.8.13.1: time.cal.ym.overview - Overview
25.8.13.2: time.cal.ym.members - Member functions
25.8.13.3: time.cal.ym.nonmembers - Non-member functions
25.8.14: time.cal.ymd - Class \tcode{year_month_day}
25.8.14.1: time.cal.ymd.overview - Overview
25.8.14.2: time.cal.ymd.members - Member functions
25.8.14.3: time.cal.ymd.nonmembers - Non-member functions
25.8.15: time.cal.ymdlast - Class \tcode{year_month_day_last}
25.8.15.1: time.cal.ymdlast.overview - Overview
25.8.15.2: time.cal.ymdlast.members - Member functions
25.8.15.3: time.cal.ymdlast.nonmembers - Non-member functions
25.8.16: time.cal.ymwd - Class \tcode{year_month_weekday}
25.8.16.1: time.cal.ymwd.overview - Overview
25.8.16.2: time.cal.ymwd.members - Member functions
25.8.16.3: time.cal.ymwd.nonmembers - Non-member functions
25.8.17: time.cal.ymwdlast - Class \tcode{year_month_weekday_last}
25.8.17.1: time.cal.ymwdlast.overview - Overview
25.8.17.2: time.cal.ymwdlast.members - Member functions
25.8.17.3: time.cal.ymwdlast.nonmembers - Non-member functions
25.8.18: time.cal.operators - Conventional syntax operators
25.9: time.tod - Class template \tcode{time_of_day}
25.9.1: time.tod.overview - Overview
25.9.2: time.tod.hours - Hours precision
25.9.3: time.tod.minutes - Minutes precision
25.9.4: time.tod.seconds - Seconds precision
25.9.5: time.tod.subsecond - Sub-second precision
25.9.6: time.tod.io - Formatted output
25.10: time.zone - Time zones
25.10.1: time.zone.general - In general
25.10.2: time.zone.db - Time zone database
25.10.2.1: time.zone.db.tzdb - Class \tcode{tzdb}
25.10.2.2: time.zone.db.list - Class \tcode{tzdb_list}
25.10.2.3: time.zone.db.access - Time zone database access
25.10.2.4: time.zone.db.remote - Remote time zone database support
25.10.3: time.zone.exception - Exception classes
25.10.3.1: time.zone.exception.nonexist - Class \tcode{nonexistent_local_time}
25.10.3.2: time.zone.exception.ambig - Class \tcode{ambiguous_local_time}
25.10.4: time.zone.info - Information classes
25.10.4.1: time.zone.info.sys - Class \tcode{sys_info}
25.10.4.2: time.zone.info.local - Class \tcode{local_info}
25.10.5: time.zone.timezone - Class \tcode{time_zone}
25.10.5.1: time.zone.overview - Overview
25.10.5.2: time.zone.members - Member functions
25.10.5.3: time.zone.nonmembers - Non-member functions
25.10.6: time.zone.zonedtraits - Class template \tcode{zoned_traits}
25.10.7: time.zone.zonedtime - Class template \tcode{zoned_time}
25.10.7.1: time.zone.zonedtime.overview - Overview
25.10.7.2: time.zone.zonedtime.ctor - Constructors
25.10.7.3: time.zone.zonedtime.members - Member functions
25.10.7.4: time.zone.zonedtime.nonmembers - Non-member functions
25.10.8: time.zone.leap - Class \tcode{leap}
25.10.8.1: time.zone.leap.overview - Overview
25.10.8.2: time.zone.leap.members - Member functions
25.10.8.3: time.zone.leap.nonmembers - Non-member functions
25.10.9: time.zone.link - Class \tcode{link}
25.10.9.1: time.zone.link.overview - Overview
25.10.9.2: time.zone.link.members - Member functions
25.10.9.3: time.zone.link.nonmembers - Non-member functions
25.11: time.format - Formatting
25.12: time.parse - Parsing
25.13: ctime.syn - Header \tcode{<ctime>} synopsis
26: localization - Localization library
26.1: localization.general - General
26.2: locale.syn - Header \tcode{<locale>} synopsis
26.3: locales - Locales
26.3.1: locale - Class \tcode{locale}
26.3.1.1: locale.types - Types
26.3.1.1.1: locale.category - Type \tcode{locale::category}
26.3.1.1.2: locale.facet - Class \tcode{locale::facet}
26.3.1.1.3: locale.id - Class \tcode{locale::id}
26.3.1.2: locale.cons - Constructors and destructor
26.3.1.3: locale.members - Members
26.3.1.4: locale.operators - Operators
26.3.1.5: locale.statics - Static members
26.3.2: locale.global.templates - \tcode{locale} globals
26.3.3: locale.convenience - Convenience interfaces
26.3.3.1: classification - Character classification
26.3.3.2: conversions - Conversions
26.3.3.2.1: conversions.character - Character conversions
26.4: locale.categories - Standard \tcode{locale} categories
26.4.1: category.ctype - The \tcode{ctype} category
26.4.1.1: locale.ctype - Class template \tcode{ctype}
26.4.1.1.1: locale.ctype.members - \tcode{ctype} members
26.4.1.1.2: locale.ctype.virtuals - \tcode{ctype} virtual functions
26.4.1.2: locale.ctype.byname - Class template \tcode{ctype_byname}
26.4.1.3: facet.ctype.special - \tcode{ctype} specializations
26.4.1.3.1: facet.ctype.char.dtor - \tcode{ctype<char>} destructor
26.4.1.3.2: facet.ctype.char.members - \tcode{ctype<char>} members
26.4.1.3.3: facet.ctype.char.statics - \tcode{ctype<char>} static members
26.4.1.3.4: facet.ctype.char.virtuals - \tcode{ctype<char>} virtual functions
26.4.1.4: locale.codecvt - Class template \tcode{codecvt}
26.4.1.4.1: locale.codecvt.members - \tcode{codecvt} members
26.4.1.4.2: locale.codecvt.virtuals - \tcode{codecvt} virtual functions
26.4.1.5: locale.codecvt.byname - Class template \tcode{codecvt_byname}
26.4.2: category.numeric - The numeric category
26.4.2.1: locale.num.get - Class template \tcode{num_get}
26.4.2.1.1: facet.num.get.members - \tcode{num_get} members
26.4.2.1.2: facet.num.get.virtuals - \tcode{num_get} virtual functions
26.4.2.2: locale.nm.put - Class template \tcode{num_put}
26.4.2.2.1: facet.num.put.members - \tcode{num_put} members
26.4.2.2.2: facet.num.put.virtuals - \tcode{num_put} virtual functions
26.4.3: facet.numpunct - The numeric punctuation facet
26.4.3.1: locale.numpunct - Class template \tcode{numpunct}
26.4.3.1.1: facet.numpunct.members - \tcode{numpunct} members
26.4.3.1.2: facet.numpunct.virtuals - \tcode{numpunct} virtual functions
26.4.3.2: locale.numpunct.byname - Class template \tcode{numpunct_byname}
26.4.4: category.collate - The collate category
26.4.4.1: locale.collate - Class template \tcode{collate}
26.4.4.1.1: locale.collate.members - \tcode{collate} members
26.4.4.1.2: locale.collate.virtuals - \tcode{collate} virtual functions
26.4.4.2: locale.collate.byname - Class template \tcode{collate_byname}
26.4.5: category.time - The time category
26.4.5.1: locale.time.get - Class template \tcode{time_get}
26.4.5.1.1: locale.time.get.members - \tcode{time_get} members
26.4.5.1.2: locale.time.get.virtuals - \tcode{time_get} virtual functions
26.4.5.2: locale.time.get.byname - Class template \tcode{time_get_byname}
26.4.5.3: locale.time.put - Class template \tcode{time_put}
26.4.5.3.1: locale.time.put.members - \tcode{time_put} members
26.4.5.3.2: locale.time.put.virtuals - \tcode{time_put} virtual functions
26.4.5.4: locale.time.put.byname - Class template \tcode{time_put_byname}
26.4.6: category.monetary - The monetary category
26.4.6.1: locale.money.get - Class template \tcode{money_get}
26.4.6.1.1: locale.money.get.members - \tcode{money_get} members
26.4.6.1.2: locale.money.get.virtuals - \tcode{money_get} virtual functions
26.4.6.2: locale.money.put - Class template \tcode{money_put}
26.4.6.2.1: locale.money.put.members - \tcode{money_put} members
26.4.6.2.2: locale.money.put.virtuals - \tcode{money_put} virtual functions
26.4.6.3: locale.moneypunct - Class template \tcode{moneypunct}
26.4.6.3.1: locale.moneypunct.members - \tcode{moneypunct} members
26.4.6.3.2: locale.moneypunct.virtuals - \tcode{moneypunct} virtual functions
26.4.6.4: locale.moneypunct.byname - Class template \tcode{moneypunct_byname}
26.4.7: category.messages - The message retrieval category
26.4.7.1: locale.messages - Class template \tcode{messages}
26.4.7.1.1: locale.messages.members - \tcode{messages} members
26.4.7.1.2: locale.messages.virtuals - \tcode{messages} virtual functions
26.4.7.2: locale.messages.byname - Class template \tcode{messages_byname}
26.5: c.locales - C library locales
26.5.1: clocale.syn - Header \tcode{<clocale>} synopsis
27: input.output - Input/output library
27.1: input.output.general - General
27.2: iostreams.requirements - Iostreams requirements
27.2.1: iostream.limits.imbue - Imbue limitations
27.2.2: iostreams.limits.pos - Positioning type limitations
27.2.3: iostreams.threadsafety - Thread safety
27.3: iostream.forward - Forward declarations
27.3.1: iosfwd.syn - Header \tcode{<iosfwd>} synopsis
27.3.2: iostream.forward.overview - Overview
27.4: iostream.objects - Standard iostream objects
27.4.1: iostream.syn - Header \tcode{<iostream>} synopsis
27.4.2: iostream.objects.overview - Overview
27.4.3: narrow.stream.objects - Narrow stream objects
27.4.4: wide.stream.objects - Wide stream objects
27.5: iostreams.base - Iostreams base classes
27.5.1: ios.syn - Header \tcode{<ios>} synopsis
27.5.2: stream.types - Types
27.5.3: ios.base - Class \tcode{ios_base}
27.5.3.1: ios.types - Types
27.5.3.1.1: ios::failure - Class \tcode{ios_base::failure}
27.5.3.1.2: ios::fmtflags - Type \tcode{ios_base::fmtflags}
27.5.3.1.3: ios::iostate - Type \tcode{ios_base::iostate}
27.5.3.1.4: ios::openmode - Type \tcode{ios_base::openmode}
27.5.3.1.5: ios::seekdir - Type \tcode{ios_base::seekdir}
27.5.3.1.6: ios::Init - Class \tcode{ios_base::Init}
27.5.3.2: fmtflags.state - \tcode{ios_base} state functions
27.5.3.3: ios.base.locales - \tcode{ios_base} functions
27.5.3.4: ios.members.static - \tcode{ios_base} static members
27.5.3.5: ios.base.storage - \tcode{ios_base} storage functions
27.5.3.6: ios.base.callback - \tcode{ios_base} callbacks
27.5.3.7: ios.base.cons - \tcode{ios_base} constructors/destructor
27.5.4: fpos - Class template \tcode{fpos}
27.5.4.1: fpos.members - \tcode{fpos} members
27.5.4.2: fpos.operations - \tcode{fpos} requirements
27.5.5: ios - Class template \tcode{basic_ios}
27.5.5.1: ios.overview - Overview
27.5.5.2: basic.ios.cons - \tcode{basic_ios} constructors
27.5.5.3: basic.ios.members - Member functions
27.5.5.4: iostate.flags - \tcode{basic_ios} flags functions
27.5.6: std.ios.manip - \tcode{ios_base} manipulators
27.5.6.1: fmtflags.manip - \tcode{fmtflags} manipulators
27.5.6.2: adjustfield.manip - \tcode{adjustfield} manipulators
27.5.6.3: basefield.manip - \tcode{basefield} manipulators
27.5.6.4: floatfield.manip - \tcode{floatfield} manipulators
27.5.7: error.reporting - Error reporting
27.6: stream.buffers - Stream buffers
27.6.1: streambuf.syn - Header \tcode{<streambuf>} synopsis
27.6.2: streambuf.reqts - Stream buffer requirements
27.6.3: streambuf - Class template \tcode{basic_streambuf}
27.6.3.1: streambuf.cons - \tcode{basic_streambuf} constructors
27.6.3.2: streambuf.members - \tcode{basic_streambuf} public member functions
27.6.3.2.1: streambuf.locales - Locales
27.6.3.2.2: streambuf.buffer - Buffer management and positioning
27.6.3.2.3: streambuf.pub.get - Get area
27.6.3.2.4: streambuf.pub.pback - Putback
27.6.3.2.5: streambuf.pub.put - Put area
27.6.3.3: streambuf.protected - \tcode{basic_streambuf} protected member functions
27.6.3.3.1: streambuf.assign - Assignment
27.6.3.3.2: streambuf.get.area - Get area access
27.6.3.3.3: streambuf.put.area - Put area access
27.6.3.4: streambuf.virtuals - \tcode{basic_streambuf} virtual functions
27.6.3.4.1: streambuf.virt.locales - Locales
27.6.3.4.2: streambuf.virt.buffer - Buffer management and positioning
27.6.3.4.3: streambuf.virt.get - Get area
27.6.3.4.4: streambuf.virt.pback - Putback
27.6.3.4.5: streambuf.virt.put - Put area
27.7: iostream.format - Formatting and manipulators
27.7.1: istream.syn - Header \tcode{<istream>} synopsis
27.7.2: ostream.syn - Header \tcode{<ostream>} synopsis
27.7.3: iomanip.syn - Header \tcode{<iomanip>} synopsis
27.7.4: input.streams - Input streams
27.7.4.1: istream - Class template \tcode{basic_istream}
27.7.4.1.1: istream.cons - \tcode{basic_istream} constructors
27.7.4.1.2: istream.assign - Class \tcode{basic_istream} assign and swap
27.7.4.1.3: istream::sentry - Class \tcode{basic_istream::sentry}
27.7.4.2: istream.formatted - Formatted input functions
27.7.4.2.1: istream.formatted.reqmts - Common requirements
27.7.4.2.2: istream.formatted.arithmetic - Arithmetic extractors
27.7.4.2.3: istream.extractors - \tcode{basic_istream::operator>>}
27.7.4.3: istream.unformatted - Unformatted input functions
27.7.4.4: istream.manip - Standard \tcode{basic_istream} manipulators
27.7.4.5: istream.rvalue - Rvalue stream extraction
27.7.4.6: iostreamclass - Class template \tcode{basic_iostream}
27.7.4.6.1: iostream.cons - \tcode{basic_iostream} constructors
27.7.4.6.2: iostream.dest - \tcode{basic_iostream} destructor
27.7.4.6.3: iostream.assign - \tcode{basic_iostream} assign and swap
27.7.5: output.streams - Output streams
27.7.5.1: ostream - Class template \tcode{basic_ostream}
27.7.5.1.1: ostream.cons - \tcode{basic_ostream} constructors
27.7.5.1.2: ostream.assign - Class \tcode{basic_ostream} assign and swap
27.7.5.1.3: ostream::sentry - Class \tcode{basic_ostream::sentry}
27.7.5.1.4: ostream.seeks - \tcode{basic_ostream} seek members
27.7.5.2: ostream.formatted - Formatted output functions
27.7.5.2.1: ostream.formatted.reqmts - Common requirements
27.7.5.2.2: ostream.inserters.arithmetic - Arithmetic inserters
27.7.5.2.3: ostream.inserters - \tcode{basic_ostream::operator<<}
27.7.5.2.4: ostream.inserters.character - Character inserter function templates
27.7.5.3: ostream.unformatted - Unformatted output functions
27.7.5.4: ostream.manip - Standard \tcode{basic_ostream} manipulators
27.7.5.5: ostream.rvalue - Rvalue stream insertion
27.7.6: std.manip - Standard manipulators
27.7.7: ext.manip - Extended manipulators
27.7.8: quoted.manip - Quoted manipulators
27.8: string.streams - String-based streams
27.8.1: sstream.syn - Header \tcode{<sstream>} synopsis
27.8.2: stringbuf - Class template \tcode{basic_stringbuf}
27.8.2.1: stringbuf.cons - \tcode{basic_stringbuf}  constructors
27.8.2.2: stringbuf.assign - Assign and swap
27.8.2.3: stringbuf.members - Member functions
27.8.2.4: stringbuf.virtuals - Overridden virtual functions
27.8.3: istringstream - Class template \tcode{basic_istringstream}
27.8.3.1: istringstream.cons - \tcode{basic_istringstream} constructors
27.8.3.2: istringstream.assign - Assign and swap
27.8.3.3: istringstream.members - Member functions
27.8.4: ostringstream - Class template \tcode{basic_ostringstream}
27.8.4.1: ostringstream.cons - \tcode{basic_ostringstream} constructors
27.8.4.2: ostringstream.assign - Assign and swap
27.8.4.3: ostringstream.members - Member functions
27.8.5: stringstream - Class template \tcode{basic_stringstream}
27.8.5.1: stringstream.cons - \tcode{basic_stringstream} constructors
27.8.5.2: stringstream.assign - Assign and swap
27.8.5.3: stringstream.members - Member functions
27.9: file.streams - File-based streams
27.9.1: fstream.syn - Header \tcode{<fstream>} synopsis
27.9.2: filebuf - Class template \tcode{basic_filebuf}
27.9.2.1: filebuf.cons - \tcode{basic_filebuf} constructors
27.9.2.2: filebuf.assign - Assign and swap
27.9.2.3: filebuf.members - Member functions
27.9.2.4: filebuf.virtuals - Overridden virtual functions
27.9.3: ifstream - Class template \tcode{basic_ifstream}
27.9.3.1: ifstream.cons - \tcode{basic_ifstream} constructors
27.9.3.2: ifstream.assign - Assign and swap
27.9.3.3: ifstream.members - Member functions
27.9.4: ofstream - Class template \tcode{basic_ofstream}
27.9.4.1: ofstream.cons - \tcode{basic_ofstream} constructors
27.9.4.2: ofstream.assign - Assign and swap
27.9.4.3: ofstream.members - Member functions
27.9.5: fstream - Class template \tcode{basic_fstream}
27.9.5.1: fstream.cons - \tcode{basic_fstream} constructors
27.9.5.2: fstream.assign - Assign and swap
27.9.5.3: fstream.members - Member functions
27.10: syncstream - Synchronized output streams
27.10.1: syncstream.syn - Header \tcode{<syncstream>} synopsis
27.10.2: syncstream.syncbuf - Class template \tcode{basic_syncbuf}
27.10.2.1: syncstream.syncbuf.overview - Overview
27.10.2.2: syncstream.syncbuf.cons - Construction and destruction
27.10.2.3: syncstream.syncbuf.assign - Assignment and swap
27.10.2.4: syncstream.syncbuf.members - Member functions
27.10.2.5: syncstream.syncbuf.virtuals - Overridden virtual functions
27.10.2.6: syncstream.syncbuf.special - Specialized algorithms
27.10.3: syncstream.osyncstream - Class template \tcode{basic_osyncstream}
27.10.3.1: syncstream.osyncstream.overview - Overview
27.10.3.2: syncstream.osyncstream.cons - Construction and destruction
27.10.3.3: syncstream.osyncstream.assign - Assignment
27.10.3.4: syncstream.osyncstream.members - Member functions
27.11: filesystems - File systems
27.11.1: fs.general - General
27.11.2: fs.conformance - Conformance
27.11.2.1: fs.conform.9945 - POSIX conformance
27.11.2.2: fs.conform.os - Operating system dependent behavior conformance
27.11.2.3: fs.race.behavior - File system race behavior
27.11.3: fs.norm.ref - Normative references
27.11.4: fs.req - Requirements
27.11.4.1: fs.req.namespace - Namespaces and headers
27.11.5: fs.filesystem.syn - Header \tcode{<filesystem>} synopsis
27.11.6: fs.err.report - Error reporting
27.11.7: fs.class.path - Class \tcode{path}
27.11.7.1: fs.path.generic - Generic pathname format
27.11.7.2: fs.path.cvt - \tcode{path} conversions
27.11.7.2.1: fs.path.fmt.cvt - \tcode{path} argument format conversions
27.11.7.2.2: fs.path.type.cvt - \tcode{path} type and encoding conversions
27.11.7.3: fs.path.req - \tcode{path} requirements
27.11.7.4: fs.path.member - \tcode{path} members
27.11.7.4.1: fs.path.construct - \tcode{path} constructors
27.11.7.4.2: fs.path.assign - \tcode{path} assignments
27.11.7.4.3: fs.path.append - \tcode{path} appends
27.11.7.4.4: fs.path.concat - \tcode{path} concatenation
27.11.7.4.5: fs.path.modifiers - \tcode{path} modifiers
27.11.7.4.6: fs.path.native.obs - \tcode{path} native format observers
27.11.7.4.7: fs.path.generic.obs - \tcode{path} generic format observers
27.11.7.4.8: fs.path.compare - \tcode{path} compare
27.11.7.4.9: fs.path.decompose - \tcode{path} decomposition
27.11.7.4.10: fs.path.query - \tcode{path} query
27.11.7.4.11: fs.path.gen - \tcode{path} generation
27.11.7.5: fs.path.itr - \tcode{path} iterators
27.11.7.6: fs.path.io - \tcode{path} inserter and extractor
27.11.7.7: fs.path.nonmember - \tcode{path} non-member functions
27.11.7.7.1: fs.path.factory - \tcode{path} factory functions
27.11.8: fs.class.filesystem_error - Class \tcode{filesystem_error}
27.11.8.1: fs.filesystem_error.members - \tcode{filesystem_error} members
27.11.9: fs.enum - Enumerations
27.11.9.1: fs.enum.path.format - Enum \tcode{path::format}
27.11.9.2: fs.enum.file_type - Enum class \tcode{file_type}
27.11.9.3: fs.enum.copy.opts - Enum class \tcode{copy_options}
27.11.9.4: fs.enum.perms - Enum class \tcode{perms}
27.11.9.5: fs.enum.perm.opts - Enum class \tcode{perm_options}
27.11.9.6: fs.enum.dir.opts - Enum class \tcode{directory_options}
27.11.10: fs.class.file_status - Class \tcode{file_status}
27.11.10.1: fs.file_status.cons - \tcode{file_status} constructors
27.11.10.2: fs.file_status.obs - \tcode{file_status} observers
27.11.10.3: fs.file_status.mods - \tcode{file_status} modifiers
27.11.11: fs.class.directory_entry - Class \tcode{directory_entry}
27.11.11.1: fs.dir.entry.cons - \tcode{directory_entry} constructors
27.11.11.2: fs.dir.entry.mods - \tcode{directory_entry} modifiers
27.11.11.3: fs.dir.entry.obs - \tcode{directory_entry} observers
27.11.12: fs.class.directory_iterator - Class \tcode{directory_iterator}
27.11.12.1: fs.dir.itr.members - \tcode{directory_iterator} members
27.11.12.2: fs.dir.itr.nonmembers - \tcode{directory_iterator} non-member functions
27.11.13: fs.class.rec.dir.itr - Class \tcode{recursive_directory_iterator}
27.11.13.1: fs.rec.dir.itr.members - \tcode{recursive_directory_iterator} members
27.11.13.2: fs.rec.dir.itr.nonmembers - \tcode{recursive_directory_iterator} non-member functions
27.11.14: fs.op.funcs - Filesystem operation functions
27.11.14.1: fs.op.absolute - Absolute
27.11.14.2: fs.op.canonical - Canonical
27.11.14.3: fs.op.copy - Copy
27.11.14.4: fs.op.copy_file - Copy file
27.11.14.5: fs.op.copy_symlink - Copy symlink
27.11.14.6: fs.op.create_directories - Create directories
27.11.14.7: fs.op.create_directory - Create directory
27.11.14.8: fs.op.create_dir_symlk - Create directory symlink
27.11.14.9: fs.op.create_hard_lk - Create hard link
27.11.14.10: fs.op.create_symlink - Create symlink
27.11.14.11: fs.op.current_path - Current path
27.11.14.12: fs.op.equivalent - Equivalent
27.11.14.13: fs.op.exists - Exists
27.11.14.14: fs.op.file_size - File size
27.11.14.15: fs.op.hard_lk_ct - Hard link count
27.11.14.16: fs.op.is_block_file - Is block file
27.11.14.17: fs.op.is_char_file - Is character file
27.11.14.18: fs.op.is_directory - Is directory
27.11.14.19: fs.op.is_empty - Is empty
27.11.14.20: fs.op.is_fifo - Is fifo
27.11.14.21: fs.op.is_other - Is other
27.11.14.22: fs.op.is_regular_file - Is regular file
27.11.14.23: fs.op.is_socket - Is socket
27.11.14.24: fs.op.is_symlink - Is symlink
27.11.14.25: fs.op.last_write_time - Last write time
27.11.14.26: fs.op.permissions - Permissions
27.11.14.27: fs.op.proximate - Proximate
27.11.14.28: fs.op.read_symlink - Read symlink
27.11.14.29: fs.op.relative - Relative
27.11.14.30: fs.op.remove - Remove
27.11.14.31: fs.op.remove_all - Remove all
27.11.14.32: fs.op.rename - Rename
27.11.14.33: fs.op.resize_file - Resize file
27.11.14.34: fs.op.space - Space
27.11.14.35: fs.op.status - Status
27.11.14.36: fs.op.status_known - Status known
27.11.14.37: fs.op.symlink_status - Symlink status
27.11.14.38: fs.op.temp_dir_path - Temporary directory path
27.11.14.39: fs.op.weakly_canonical - Weakly canonical
27.12: c.files - C library files
27.12.1: cstdio.syn - Header \tcode{<cstdio>} synopsis
27.12.2: cinttypes.syn - Header \tcode{<cinttypes>} synopsis
28: re - Regular expressions library
28.1: re.general - General
28.2: re.def - Definitions
28.3: re.req - Requirements
28.4: re.syn - Header \tcode{<regex>} synopsis
28.5: re.const - Namespace \tcode{std::regex_constants}
28.5.1: re.synopt - Bitmask type \tcode{syntax_option_type}
28.5.2: re.matchflag - Bitmask type \tcode{match_flag_type}
28.5.3: re.err - Implementation-defined \tcode{error_type}
28.6: re.badexp - Class \tcode{regex_error}
28.7: re.traits - Class template \tcode{regex_traits}
28.8: re.regex - Class template \tcode{basic_regex}
28.8.1: re.regex.construct - \tcode{basic_regex} constructors
28.8.2: re.regex.assign - \tcode{basic_regex} assign
28.8.3: re.regex.operations - \tcode{basic_regex} constant operations
28.8.4: re.regex.locale - \tcode{basic_regex} locale
28.8.5: re.regex.swap - \tcode{basic_regex} swap
28.8.6: re.regex.nonmemb - \tcode{basic_regex} non-member functions
28.8.6.1: re.regex.nmswap - \tcode{basic_regex} non-member swap
28.9: re.submatch - Class template \tcode{sub_match}
28.9.1: re.submatch.members - \tcode{sub_match} members
28.9.2: re.submatch.op - \tcode{sub_match} non-member operators
28.10: re.results - Class template \tcode{match_results}
28.10.1: re.results.const - \tcode{match_results} constructors
28.10.2: re.results.state - \tcode{match_results} state
28.10.3: re.results.size - \tcode{match_results} size
28.10.4: re.results.acc - \tcode{match_results} element access
28.10.5: re.results.form - \tcode{match_results} formatting
28.10.6: re.results.all - \tcode{match_results} allocator
28.10.7: re.results.swap - \tcode{match_results} swap
28.10.8: re.results.nonmember - \tcode{match_results} non-member functions
28.11: re.alg - Regular expression algorithms
28.11.1: re.except - Exceptions
28.11.2: re.alg.match - \tcode{regex_match}
28.11.3: re.alg.search - \tcode{regex_search}
28.11.4: re.alg.replace - \tcode{regex_replace}
28.12: re.iter - Regular expression iterators
28.12.1: re.regiter - Class template \tcode{regex_iterator}
28.12.1.1: re.regiter.cnstr - \tcode{regex_iterator} constructors
28.12.1.2: re.regiter.comp - \tcode{regex_iterator} comparisons
28.12.1.3: re.regiter.deref - \tcode{regex_iterator} indirection
28.12.1.4: re.regiter.incr - \tcode{regex_iterator} increment
28.12.2: re.tokiter - Class template \tcode{regex_token_iterator}
28.12.2.1: re.tokiter.cnstr - \tcode{regex_token_iterator} constructors
28.12.2.2: re.tokiter.comp - \tcode{regex_token_iterator} comparisons
28.12.2.3: re.tokiter.deref - \tcode{regex_token_iterator} indirection
28.12.2.4: re.tokiter.incr - \tcode{regex_token_iterator} increment
28.13: re.grammar - Modified ECMAScript regular expression grammar
29: atomics - Atomic operations library
29.1: atomics.general - General
29.2: atomics.syn - Header \tcode{<atomic>} synopsis
29.3: atomics.alias - Type aliases
29.4: atomics.order - Order and consistency
29.5: atomics.lockfree - Lock-free property
29.6: atomics.ref.generic - Class template \tcode{atomic_ref}
29.6.1: atomics.ref.operations - Operations
29.6.2: atomics.ref.int - Specializations for integral types
29.6.3: atomics.ref.float - Specializations for floating-point types
29.6.4: atomics.ref.pointer - Partial specialization for pointers
29.7: atomics.types.generic - Class template \tcode{atomic}
29.7.1: atomics.types.operations - Operations on atomic types
29.7.2: atomics.types.int - Specializations for integers
29.7.3: atomics.types.float - Specializations for floating-point types
29.7.4: atomics.types.pointer - Partial specialization for pointers
29.7.5: atomics.types.memop - Member operators common to integers and pointers to objects
29.8: atomics.nonmembers - Non-member functions
29.9: atomics.flag - Flag type and operations
29.10: atomics.fences - Fences
30: thread - Thread support library
30.1: thread.general - General
30.2: thread.req - Requirements
30.2.1: thread.req.paramname - Template parameter names
30.2.2: thread.req.exception - Exceptions
30.2.3: thread.req.native - Native handles
30.2.4: thread.req.timing - Timing specifications
30.2.5: thread.req.lockable - Requirements for \oldconcept{Lockable} types
30.2.5.1: thread.req.lockable.general - In general
30.2.5.2: thread.req.lockable.basic - \oldconcept{BasicLockable} requirements
30.2.5.3: thread.req.lockable.req - \oldconcept{Lockable} requirements
30.2.5.4: thread.req.lockable.timed - \oldconcept{TimedLockable} requirements
30.2.6: thread.decaycopy - \tcode{decay_copy}
30.3: thread.threads - Threads
30.3.1: thread.syn - Header \tcode{<thread>} synopsis
30.3.2: thread.thread.class - Class \tcode{thread}
30.3.2.1: thread.thread.id - Class \tcode{thread::id}
30.3.2.2: thread.thread.constr - \tcode{thread} constructors
30.3.2.3: thread.thread.destr - \tcode{thread} destructor
30.3.2.4: thread.thread.assign - \tcode{thread} assignment
30.3.2.5: thread.thread.member - \tcode{thread} members
30.3.2.6: thread.thread.static - \tcode{thread} static members
30.3.2.7: thread.thread.algorithm - \tcode{thread} specialized algorithms
30.3.3: thread.thread.this - Namespace \tcode{this_thread}
30.4: thread.mutex - Mutual exclusion
30.4.1: mutex.syn - Header \tcode{<mutex>} synopsis
30.4.2: shared_mutex.syn - Header \tcode{<shared_mutex>} synopsis
30.4.3: thread.mutex.requirements - Mutex requirements
30.4.3.1: thread.mutex.requirements.general - In general
30.4.3.2: thread.mutex.requirements.mutex - Mutex types
30.4.3.2.1: thread.mutex.class - Class \tcode{mutex}
30.4.3.2.2: thread.mutex.recursive - Class \tcode{recursive_mutex}
30.4.3.3: thread.timedmutex.requirements - Timed mutex types
30.4.3.3.1: thread.timedmutex.class - Class \tcode{timed_mutex}
30.4.3.3.2: thread.timedmutex.recursive - Class \tcode{recursive_timed_mutex}
30.4.3.4: thread.sharedmutex.requirements - Shared mutex types
30.4.3.4.1: thread.sharedmutex.class - Class \tcode{shared_mutex}
30.4.3.5: thread.sharedtimedmutex.requirements - Shared timed mutex types
30.4.3.5.1: thread.sharedtimedmutex.class - Class \tcode{shared_timed_mutex}
30.4.4: thread.lock - Locks
30.4.4.1: thread.lock.guard - Class template \tcode{lock_guard}
30.4.4.2: thread.lock.scoped - Class template \tcode{scoped_lock}
30.4.4.3: thread.lock.unique - Class template \tcode{unique_lock}
30.4.4.3.1: thread.lock.unique.cons - \tcode{unique_lock} constructors, destructor, and assignment
30.4.4.3.2: thread.lock.unique.locking - \tcode{unique_lock} locking
30.4.4.3.3: thread.lock.unique.mod - \tcode{unique_lock} modifiers
30.4.4.3.4: thread.lock.unique.obs - \tcode{unique_lock} observers
30.4.4.4: thread.lock.shared - Class template \tcode{shared_lock}
30.4.4.4.1: thread.lock.shared.cons - \tcode{shared_lock} constructors, destructor, and assignment
30.4.4.4.2: thread.lock.shared.locking - \tcode{shared_lock} locking
30.4.4.4.3: thread.lock.shared.mod - \tcode{shared_lock} modifiers
30.4.4.4.4: thread.lock.shared.obs - \tcode{shared_lock} observers
30.4.5: thread.lock.algorithm - Generic locking algorithms
30.4.6: thread.once - Call once
30.4.6.1: thread.once.onceflag - Struct \tcode{once_flag}
30.4.6.2: thread.once.callonce - Function \tcode{call_once}
30.5: thread.condition - Condition variables
30.5.1: condition_variable.syn - Header \tcode{<condition_variable>} synopsis
30.5.2: thread.condition.nonmember - Non-member functions
30.5.3: thread.condition.condvar - Class \tcode{condition_variable}
30.5.4: thread.condition.condvarany - Class \tcode{condition_variable_any}
30.6: futures - Futures
30.6.1: futures.overview - Overview
30.6.2: future.syn - Header \tcode{<future>} synopsis
30.6.3: futures.errors - Error handling
30.6.4: futures.future_error - Class \tcode{future_error}
30.6.5: futures.state - Shared state
30.6.6: futures.promise - Class template \tcode{promise}
30.6.7: futures.unique_future - Class template \tcode{future}
30.6.8: futures.shared_future - Class template \tcode{shared_future}
30.6.9: futures.async - Function template \tcode{async}
30.6.10: futures.task - Class template \tcode{packaged_task}
30.6.10.1: futures.task.members - \tcode{packaged_task} member functions
30.6.10.2: futures.task.nonmembers - \tcode{packaged_task} globals
A: gram - Grammar summary
A.1: gram.key - Keywords
B: implimits - Implementation quantities
C: diff - Compatibility
C.1: diff.iso - \Cpp{} and ISO C
C.1.1: diff.lex - \ref{lex}: lexical conventions
C.1.2: diff.basic - \ref{basic}: basic concepts
C.1.3: diff.expr - \ref{expr}: expressions
C.1.4: diff.stat - \ref{stmt.stmt}: statements
C.1.5: diff.dcl - \ref{dcl.dcl}: declarations
C.1.6: diff.class - \ref{class}: classes
C.1.7: diff.cpp - \ref{cpp}: preprocessing directives
C.2: diff.cpp03 - \Cpp{} and ISO \CppIII{}
C.2.1: diff.cpp03.lex - \ref{lex}: lexical conventions
C.2.2: diff.cpp03.expr - \ref{expr}: expressions
C.2.3: diff.cpp03.dcl.dcl - \ref{dcl.dcl}: declarations
C.2.4: diff.cpp03.class - \ref{class}: classes
C.2.5: diff.cpp03.temp - \ref{temp}: templates
C.2.6: diff.cpp03.library - \ref{library}: library introduction
C.2.7: diff.cpp03.language.support - \ref{language.support
C.2.8: diff.cpp03.diagnostics - \ref{diagnostics}: diagnostics library
C.2.9: diff.cpp03.utilities - \ref{utilities}: general utilities library
C.2.10: diff.cpp03.strings - \ref{strings}: strings library
C.2.11: diff.cpp03.containers - \ref{containers}: containers library
C.2.12: diff.cpp03.algorithms - \ref{algorithms}: algorithms library
C.2.13: diff.cpp03.numerics - \ref{numerics}: numerics library
C.2.14: diff.cpp03.input.output - \ref{input.output}: input/output library
C.3: diff.cpp11 - \Cpp{} and ISO \CppXI{}
C.3.1: diff.cpp11.lex - \ref{lex}: lexical conventions
C.3.2: diff.cpp11.basic - \ref{basic}: basic concepts
C.3.3: diff.cpp11.expr - \ref{expr}: expressions
C.3.4: diff.cpp11.dcl.dcl - \ref{dcl.dcl}: declarations
C.3.5: diff.cpp11.library - \ref{library}: library introduction
C.3.6: diff.cpp11.input.output - \ref{input.output}: input/output library
C.4: diff.cpp14 - \Cpp{} and ISO \CppXIV{}
C.4.1: diff.cpp14.lex - \ref{lex}: lexical conventions
C.4.2: diff.cpp14.expr - \ref{expr}: expressions
C.4.3: diff.cpp14.dcl.dcl - \ref{dcl.dcl}: declarations
C.4.4: diff.cpp14.class - \ref{class}: classes
C.4.5: diff.cpp14.temp - \ref{temp}: templates
C.4.6: diff.cpp14.except - \ref{except}: exception handling
C.4.7: diff.cpp14.library - \ref{library}: library introduction
C.4.8: diff.cpp14.utilities - \ref{utilities}: general utilities library
C.4.9: diff.cpp14.string - \ref{strings}: strings library
C.4.10: diff.cpp14.containers - \ref{containers}: containers library
C.4.11: diff.cpp14.depr - \ref{depr}: compatibility features
C.5: diff.cpp17 - \Cpp{} and ISO \CppXVII{}
C.5.1: diff.cpp17.lex - \ref{lex}: lexical conventions
C.5.2: diff.cpp17.expr - \ref{expr}: expressions
C.5.3: diff.cpp17.dcl.dcl - \ref{dcl.dcl}: declarations
C.5.4: diff.cpp17.class - \ref{class}: classes
C.5.5: diff.cpp17.temp - \ref{temp}: templates
C.5.6: diff.cpp17.except - \ref{except}: exception handling
C.5.7: diff.cpp17.library - \ref{library}: library introduction
C.5.8: diff.cpp17.containers - \ref{containers}: containers library
C.5.9: diff.cpp17.depr - \ref{depr}: compatibility features
C.6: diff.library - C standard library
C.6.1: diff.mods.to.headers - Modifications to headers
C.6.2: diff.mods.to.definitions - Modifications to definitions
C.6.2.1: diff.char16 - Types \tcode{char16_t} and \tcode{char32_t}
C.6.2.2: diff.wchar.t - Type \tcode{wchar_t}
C.6.2.3: diff.header.assert.h - Header \tcode{<assert.h>}
C.6.2.4: diff.header.iso646.h - Header \tcode{<iso646.h>}
C.6.2.5: diff.header.stdalign.h - Header \tcode{<stdalign.h>}
C.6.2.6: diff.header.stdbool.h - Header \tcode{<stdbool.h>}
C.6.2.7: diff.null - Macro \tcode{NULL}
C.6.3: diff.mods.to.declarations - Modifications to declarations
C.6.4: diff.mods.to.behavior - Modifications to behavior
C.6.4.1: diff.offsetof - Macro \tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
C.6.4.2: diff.malloc - Memory allocation functions
D: depr - Compatibility features
D.1: depr.arith.conv.enum - Arithmetic conversion on enumerations
D.2: depr.capture.this - Implicit capture of \tcode{*this} by reference
D.3: depr.array.comp - Array comparisons
D.4: depr.static_constexpr - Redeclaration of \tcode{static constexpr} data members
D.5: depr.impldec - Implicit declaration of copy functions
D.6: depr.c.headers - C standard library headers
D.6.1: depr.complex.h.syn - Header \tcode{<complex.h>} synopsis
D.6.2: depr.iso646.h.syn - Header \tcode{<iso646.h>} synopsis
D.6.3: depr.stdalign.h.syn - Header \tcode{<stdalign.h>} synopsis
D.6.4: depr.stdbool.h.syn - Header \tcode{<stdbool.h>} synopsis
D.6.5: depr.tgmath.h.syn - Header \tcode{<tgmath.h>} synopsis
D.6.6: depr.c.headers.other - Other C headers
D.7: depr.relops - Relational operators
D.8: depr.str.strstreams - \tcode{char*} streams
D.8.1: depr.strstream.syn - Header \tcode{<strstream>} synopsis
D.8.2: depr.strstreambuf - Class \tcode{strstreambuf}
D.8.2.1: depr.strstreambuf.cons - \tcode{strstreambuf} constructors
D.8.2.2: depr.strstreambuf.members - Member functions
D.8.2.3: depr.strstreambuf.virtuals - \tcode{strstreambuf} overridden virtual functions
D.8.3: depr.istrstream - Class \tcode{istrstream}
D.8.3.1: depr.istrstream.cons - \tcode{istrstream} constructors
D.8.3.2: depr.istrstream.members - Member functions
D.8.4: depr.ostrstream - Class \tcode{ostrstream}
D.8.4.1: depr.ostrstream.cons - \tcode{ostrstream} constructors
D.8.4.2: depr.ostrstream.members - Member functions
D.8.5: depr.strstream - Class \tcode{strstream}
D.8.5.1: depr.strstream.cons - \tcode{strstream} constructors
D.8.5.2: depr.strstream.dest - \tcode{strstream} destructor
D.8.5.3: depr.strstream.oper - \tcode{strstream} operations
D.9: depr.meta.types - Deprecated type traits
D.10: depr.iterator.primitives - Deprecated iterator primitives
D.10.1: depr.iterator.basic - Basic iterator
D.11: depr.util.smartptr.shared.atomic - Deprecated \tcode{shared_ptr} atomic access
D.12: depr.string.capacity - Deprecated \tcode{basic_string} capacity
D.13: depr.locale.stdcvt - Deprecated standard code conversion facets
D.13.1: depr.codecvt.syn - Header \tcode{<codecvt>} synopsis
D.13.2: depr.locale.stdcvt.req - Requirements
D.14: depr.conversions - Deprecated convenience conversion interfaces
D.14.1: depr.conversions.string - Class template \tcode{wstring_convert}
D.14.2: depr.conversions.buffer - Class template \tcode{wbuffer_convert}
